{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome to Deck of Adventures, The Game", "text": "<p>This website establishes latest rules for the Deck of Adventures tabletop roleplaying game, where there's an adventure in every card.</p> <p>Deck of Adventures is a collaborative roleplaying system, built with an open source ethos. You can view the Quickstart Guide, or read our Full Player's Guide to learn how to play.</p> <p>If you'd like to learn more about this project and how to contribute, you can read our Development Guide.</p>"}, {"location": "#join-our-discord-server", "title": "Join our Discord server!", "text": "<p>If the above link is expired, please submit an issue.</p>"}, {"location": "CHANGELOG/", "title": "Changelog", "text": ""}, {"location": "CHANGELOG/#general", "title": "General", "text": "<p>Deck of Adventures adopts conventions outlined by Semantic Versioning: Major:Minor:Patch. As much of this convention is specific to software development, we make the following general adjustments.</p> <ol> <li>MAJOR versions are for significant changes that may not be backwards compatible.</li> <li>MINOR versions add significant new backwards compatible features to be tested.</li> <li>PATCH versions are backwards compatible adjustments not yet ready for widespread    testing.</li> </ol> <p>While untracked edits may change individual pages and patches may systematically change multiple pages, minor and major versions will be accompanied by descriptors detailing the nature of these changes.</p>"}, {"location": "CHANGELOG/#100a6-unreleased", "title": "1.0.0a6 - Unreleased", "text": "<ul> <li>Update misc bugs in notebooks/simulator</li> <li>Update changelog description of MINOR/PATCH to reflect actual use</li> <li>Add pytests</li> <li>Add retroactive tags and add tag links to changelog</li> </ul>"}, {"location": "CHANGELOG/#100a5-2023-04-02", "title": "1.0.0a5 - 2023-04-02", "text": "<ul> <li>Update name of Fate Points to Power Points</li> <li>Update repo structure for mkdocs</li> <li>Add combined Power/Vulnerability spreadsheet</li> <li>Add conversion tools to import yaml, output csv, markdown, and html-based png files</li> <li>Add dataclass object to handle Power, Beast, and Item information</li> <li>Add Bestiary and Items list</li> <li>Add simulator to reflect structure of Card, Deck, Player, and Encounter with    methods relevant to each, including simulating draws, attacks, rests and Epic Events</li> <li>Add spelling config for cspell extension</li> </ul>"}, {"location": "CHANGELOG/#100a4-2022-08-14", "title": "1.0.0a4 - 2022-08-14", "text": "<ul> <li>Add v1 GM Guide</li> <li>Add Adversary and House Actions</li> <li>Update name of Primary Suit to Burn Mechanics</li> <li>Update DR + Mod on Report</li> <li>Add 'Fatigued' Status Condition</li> </ul>"}, {"location": "CHANGELOG/#100a3-2022-06-09", "title": "1.0.0a3 - 2022-06-09", "text": "<ul> <li>Add Fate Point naming convention</li> <li>Add premade level 1 characters</li> <li>Update Epic Events</li> <li>Update Rest Mechanics</li> </ul>"}, {"location": "CHANGELOG/#100a2-2022-03-19", "title": "1.0.0a2 - 2022-03-19", "text": "<ul> <li>Update core mechanic, from banded capped to circular.</li> <li>Add tools for circular: printout</li> </ul>"}, {"location": "CHANGELOG/#100a1-2022-03-01", "title": "1.0.0a1 - 2022-03-01", "text": "<ul> <li>Update core mechanic, from threshold to banded target.</li> </ul>"}, {"location": "CHANGELOG/#000-2022-02-10", "title": "0.0.0 - 2022-02-10", "text": "<ul> <li>Changed Suit mechanic to start at Level 1 per   Issue #15</li> </ul>"}, {"location": "CHANGELOG/#000a1-2022-01-14", "title": "0.0.0a1 - 2022-01-14", "text": "<ul> <li>Began porting notes to GitHub</li> <li>Add primary suit feature</li> <li>Further additions pending work on spells and backgrounds</li> </ul>"}, {"location": "CHANGELOG/#000a0-2021-12-10", "title": "0.0.0a0 - 2021-12-10", "text": "<ul> <li>Started discussions and drafts</li> </ul>"}, {"location": "CODE_OF_CONDUCT/", "title": "Contributor Covenant Code of Conduct", "text": ""}, {"location": "CODE_OF_CONDUCT/#our-pledge", "title": "Our Pledge", "text": "<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"}, {"location": "CODE_OF_CONDUCT/#our-standards", "title": "Our Standards", "text": "<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"}, {"location": "CODE_OF_CONDUCT/#enforcement-responsibilities", "title": "Enforcement Responsibilities", "text": "<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"}, {"location": "CODE_OF_CONDUCT/#scope", "title": "Scope", "text": "<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"}, {"location": "CODE_OF_CONDUCT/#enforcement", "title": "Enforcement", "text": "<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at support@deckofadventures.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"}, {"location": "CODE_OF_CONDUCT/#enforcement-guidelines", "title": "Enforcement Guidelines", "text": "<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"}, {"location": "CODE_OF_CONDUCT/#1-correction", "title": "1. Correction", "text": "<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"}, {"location": "CODE_OF_CONDUCT/#2-warning", "title": "2. Warning", "text": "<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"}, {"location": "CODE_OF_CONDUCT/#3-temporary-ban", "title": "3. Temporary Ban", "text": "<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"}, {"location": "CODE_OF_CONDUCT/#4-permanent-ban", "title": "4. Permanent Ban", "text": "<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"}, {"location": "CODE_OF_CONDUCT/#attribution", "title": "Attribution", "text": "<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"}, {"location": "CONTRIBUTING/", "title": "Contributing", "text": ""}, {"location": "CONTRIBUTING/#summary", "title": "Summary", "text": "<p>Deck of Adventures Admin welcome input from the community, whether to help us make the wording of rules more precise or to expand upon the options provided. Admin ask that you review the licenses applicable to any material submitted and respect the Creative Commons BY-NC-SA nature of this community. When contributing, please provide moderators with your preferred name, pronouns, and a URL to link to your other work. You can make a contribution by opening a GitHub issue. For more major contributions, see our design document for design principles, and community document for information about GitHub pull request permissions.</p>"}, {"location": "CONTRIBUTING/#github-issues", "title": "GitHub Issues", "text": "<p>This repository has the following issue templates:</p> <ol> <li>Bug reports for inconsistencies, either in mechanics or lore.</li> <li>Minor fixes. Find a typo or grammatical error? Let us know.</li> <li>Question, to start dialogs about the design process or anything that's not clear.</li> <li>Feature requests. What should the team prioritize next? Feel free to submit your own ideas here, as a general idea others could expand upon or a first draft.</li> </ol>"}, {"location": "CONTRIBUTING/#license", "title": "License", "text": "<p>Present materials adapted from Fandom wiki licensing.</p> <p>Deck of Adventures Versions &lt; 1.1.0 material is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) by admin users (see Community Roles) Deck of Adventures documentation (hereafter \u2018licensees\u2019).</p> <ul> <li>Read the license summary</li> <li>Read the full legal code of the license</li> </ul>"}, {"location": "CONTRIBUTING/#contributing-to-the-deck-of-adventures", "title": "Contributing to the Deck of Adventures", "text": "<p>To grow this community-driven TTRPG and fandom, licensees encourage the submission of supplemental materials. By editing or otherwise contributing to a page that uses the CC BY-NC-SA license, you agree to license any text you change or contribute under the CC BY-NC-SA license, subject to the waiver described here (\u201cCommercial Use Waiver\u201d). Please note that your contributions are shareable and remixable under such license, but cannot be used for commercial purposes by Deck of Adventures users. As a contributor, you agree that being attributed via our list of contributors page satisfies the attribution requirements of the license applicable to your contribution to a page. Contributions are always welcome as GitHub issues. GitHub pull requests should be reserved for major changes to at least one section, or minor changes across many sections (e.g., for terminology changes).</p> <p>Contributions may take the form of suggested ideas or mechanics that could be implemented into the existing version. The Deck of Adventures admins reserve the right to choose which proposals and contributions are considered for integration, which are modified, adapted, play tested, and ultimately integrated into the current or future version.</p> <p>An Issue will be tagged as \"Under Consideration\", \"In Development\", \"In Play testing\", and \"Integrated\" to establish where it is in the development cycle. Not all ideas will make it to the Integrated step, but every Contribution and comment from the Community is valued.</p>"}, {"location": "CONTRIBUTING/#commercial-use-waiver", "title": "Commercial Use Waiver", "text": "<p>If you contribute to, or have contributed to, Deck of Adventures content, you hereby waive such restriction with respect to licensees\u2019s use of such contribution and any derivative works of such contribution.</p>"}, {"location": "CONTRIBUTING/#importing-text", "title": "Importing Text", "text": "<p>If you want to provide contributions in which you do not own or control the copyright, you may only do so if you originally received such contributions under terms that are compatible with the license used on the page to which you intend to provide the contribution. In addition, you may not contribute to a page that uses a license that restricts commercial uses unless you hold the copyright to such contribution or otherwise have the right to grant the Commercial Use Waiver with respect to such contribution.</p>"}, {"location": "CONTRIBUTING/#non-text-files", "title": "Non-text files", "text": "<p>Freely licensed or public domain images are strongly preferred in contributions. Non-text media should not be assumed to be available under the same license as the text. If you are uploading files to Deck of Adventures, you should cite the source of the file, attribute the authors, and note any copyright information, where applicable.</p>"}, {"location": "CONTRIBUTING/#using-deck-of-adventures-content", "title": "Using Deck of Adventures Content", "text": "<p>It is your responsibility to understand and adhere to the licenses that govern Deck of Adventures Content. Text from external sources may attach additional attribution requirements to the work beyond what is described on this page. When re-using text that has been posted subject to a Creative Commons license, you must provide attribution to the authors through direct listing of author(s) preferred citations. For example:</p> <p>This article uses material from the \u201cCharacter Creation\" page at Deck of Adventures   and is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike   License. Quoted content should not be assumed to be released under this license if   this is not explicitly stated.</p>"}, {"location": "CONTRIBUTING/#translations", "title": "Translations", "text": "<p>These licensing terms are not to be modified. If there is any inconsistency between these terms and any translation into other languages, the English language version takes precedence. Links will be added above to any unofficial translations.</p>"}, {"location": "CONTRIBUTING/#future-deck-of-adventures-content", "title": "Future Deck of Adventures Content", "text": "<p>Licensees reserve the right to revise this license in tandem with major version updates.</p>"}, {"location": "LICENSE/", "title": "License Info", "text": "<p>Attribution-NonCommercial-ShareAlike 4.0 International</p> <p>Licensees reserve the right to revise licensing decisions at major version updates.</p> <p>=======================================================================</p> <p>Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p> <p>Using Creative Commons Public Licenses</p> <p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <pre><code> Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n</code></pre> <p>=======================================================================</p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License</p> <p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p> <p>Section 1 -- Definitions.</p> <p>a. Adapted Material means material subject to Copyright and Similar      Rights that is derived from or based upon the Licensed Material      and in which the Licensed Material is translated, altered,      arranged, transformed, or otherwise modified in a manner requiring      permission under the Copyright and Similar Rights held by the      Licensor. For purposes of this Public License, where the Licensed      Material is a musical work, performance, or sound recording,      Adapted Material is always produced where the Licensed Material is      synched in timed relation with a moving image.</p> <p>b. Adapter's License means the license You apply to Your Copyright      and Similar Rights in Your contributions to Adapted Material in      accordance with the terms and conditions of this Public License.</p> <p>c. BY-NC-SA Compatible License means a license listed at      creativecommons.org/compatiblelicenses, approved by Creative      Commons as essentially the equivalent of this Public License.</p> <p>d. Copyright and Similar Rights means copyright and/or similar rights      closely related to copyright including, without limitation,      performance, broadcast, sound recording, and Sui Generis Database      Rights, without regard to how the rights are labeled or      categorized. For purposes of this Public License, the rights      specified in Section 2(b)(1)-(2) are not Copyright and Similar      Rights.</p> <p>e. Effective Technological Measures means those measures that, in the      absence of proper authority, may not be circumvented under laws      fulfilling obligations under Article 11 of the WIPO Copyright      Treaty adopted on December 20, 1996, and/or similar international      agreements.</p> <p>f. Exceptions and Limitations means fair use, fair dealing, and/or      any other exception or limitation to Copyright and Similar Rights      that applies to Your use of the Licensed Material.</p> <p>g. License Elements means the license attributes listed in the name      of a Creative Commons Public License. The License Elements of this      Public License are Attribution, NonCommercial, and ShareAlike.</p> <p>h. Licensed Material means the artistic or literary work, database,      or other material to which the Licensor applied this Public      License.</p> <p>i. Licensed Rights means the rights granted to You subject to the      terms and conditions of this Public License, which are limited to      all Copyright and Similar Rights that apply to Your use of the      Licensed Material and that the Licensor has authority to license.</p> <p>j. Licensor means the individual(s) or entity(ies) granting rights      under this Public License.</p> <p>k. NonCommercial means not primarily intended for or directed towards      commercial advantage or monetary compensation. For purposes of      this Public License, the exchange of the Licensed Material for      other material subject to Copyright and Similar Rights by digital      file-sharing or similar means is NonCommercial provided there is      no payment of monetary compensation in connection with the      exchange.</p> <p>l. Share means to provide material to the public by any means or      process that requires permission under the Licensed Rights, such      as reproduction, public display, public performance, distribution,      dissemination, communication, or importation, and to make material      available to the public including in ways that members of the      public may access the material from a place and at a time      individually chosen by them.</p> <p>m. Sui Generis Database Rights means rights other than copyright      resulting from Directive 96/9/EC of the European Parliament and of      the Council of 11 March 1996 on the legal protection of databases,      as amended and/or succeeded, as well as other essentially      equivalent rights anywhere in the world.</p> <p>n. You means the individual or entity exercising the Licensed Rights      under this Public License. Your has a corresponding meaning.</p> <p>Section 2 -- Scope.</p> <p>a. License grant.</p> <pre><code>   1. Subject to the terms and conditions of this Public License,\n      the Licensor hereby grants You a worldwide, royalty-free,\n      non-sublicensable, non-exclusive, irrevocable license to\n      exercise the Licensed Rights in the Licensed Material to:\n\n        a. reproduce and Share the Licensed Material, in whole or\n           in part, for NonCommercial purposes only; and\n\n        b. produce, reproduce, and Share Adapted Material for\n           NonCommercial purposes only.\n\n   2. Exceptions and Limitations. For the avoidance of doubt, where\n      Exceptions and Limitations apply to Your use, this Public\n      License does not apply, and You do not need to comply with\n      its terms and conditions.\n\n   3. Term. The term of this Public License is specified in Section\n      6(a).\n\n   4. Media and formats; technical modifications allowed. The\n      Licensor authorizes You to exercise the Licensed Rights in\n      all media and formats whether now known or hereafter created,\n      and to make technical modifications necessary to do so. The\n      Licensor waives and/or agrees not to assert any right or\n      authority to forbid You from making technical modifications\n      necessary to exercise the Licensed Rights, including\n      technical modifications necessary to circumvent Effective\n      Technological Measures. For purposes of this Public License,\n      simply making modifications authorized by this Section 2(a)\n      (4) never produces Adapted Material.\n\n   5. Downstream recipients.\n\n        a. Offer from the Licensor -- Licensed Material. Every\n           recipient of the Licensed Material automatically\n           receives an offer from the Licensor to exercise the\n           Licensed Rights under the terms and conditions of this\n           Public License.\n\n        b. Additional offer from the Licensor -- Adapted Material.\n           Every recipient of Adapted Material from You\n           automatically receives an offer from the Licensor to\n           exercise the Licensed Rights in the Adapted Material\n           under the conditions of the Adapter's License You apply.\n\n        c. No downstream restrictions. You may not offer or impose\n           any additional or different terms or conditions on, or\n           apply any Effective Technological Measures to, the\n           Licensed Material if doing so restricts exercise of the\n           Licensed Rights by any recipient of the Licensed\n           Material.\n\n   6. No endorsement. Nothing in this Public License constitutes or\n      may be construed as permission to assert or imply that You\n      are, or that Your use of the Licensed Material is, connected\n      with, or sponsored, endorsed, or granted official status by,\n      the Licensor or others designated to receive attribution as\n      provided in Section 3(a)(1)(A)(i).\n</code></pre> <p>b. Other rights.</p> <pre><code>   1. Moral rights, such as the right of integrity, are not\n      licensed under this Public License, nor are publicity,\n      privacy, and/or other similar personality rights; however, to\n      the extent possible, the Licensor waives and/or agrees not to\n      assert any such rights held by the Licensor to the limited\n      extent necessary to allow You to exercise the Licensed\n      Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this\n      Public License.\n\n   3. To the extent possible, the Licensor waives any right to\n      collect royalties from You for the exercise of the Licensed\n      Rights, whether directly or through a collecting society\n      under any voluntary or waivable statutory or compulsory\n      licensing scheme. In all other cases the Licensor expressly\n      reserves any right to collect such royalties, including when\n      the Licensed Material is used other than for NonCommercial\n      purposes.\n</code></pre> <p>Section 3 -- License Conditions.</p> <p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <pre><code>   1. If You Share the Licensed Material (including in modified\n      form), You must:\n\n        a. retain the following if it is supplied by the Licensor\n           with the Licensed Material:\n\n             i. identification of the creator(s) of the Licensed\n                Material and any others designated to receive\n                attribution, in any reasonable manner requested by\n                the Licensor (including by pseudonym if\n                designated);\n\n            ii. a copyright notice;\n\n           iii. a notice that refers to this Public License;\n\n            iv. a notice that refers to the disclaimer of\n                warranties;\n\n             v. a URI or hyperlink to the Licensed Material to the\n                extent reasonably practicable;\n\n        b. indicate if You modified the Licensed Material and\n           retain an indication of any previous modifications; and\n\n        c. indicate the Licensed Material is licensed under this\n           Public License, and include the text of, or the URI or\n           hyperlink to, this Public License.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any\n      reasonable manner based on the medium, means, and context in\n      which You Share the Licensed Material. For example, it may be\n      reasonable to satisfy the conditions by providing a URI or\n      hyperlink to a resource that includes the required\n      information.\n   3. If requested by the Licensor, You must remove any of the\n      information required by Section 3(a)(1)(A) to the extent\n      reasonably practicable.\n</code></pre> <p>b. ShareAlike.</p> <pre><code> In addition to the conditions in Section 3(a), if You Share\n Adapted Material You produce, the following conditions also apply.\n\n   1. The Adapter's License You apply must be a Creative Commons\n      license with the same License Elements, this version or\n      later, or a BY-NC-SA Compatible License.\n\n   2. You must include the text of, or the URI or hyperlink to, the\n      Adapter's License You apply. You may satisfy this condition\n      in any reasonable manner based on the medium, means, and\n      context in which You Share Adapted Material.\n\n   3. You may not offer or impose any additional or different terms\n      or conditions on, or apply any Effective Technological\n      Measures to, Adapted Material that restrict exercise of the\n      rights granted under the Adapter's License You apply.\n</code></pre> <p>Section 4 -- Sui Generis Database Rights.</p> <p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right      to extract, reuse, reproduce, and Share all or a substantial      portion of the contents of the database for NonCommercial purposes      only;</p> <p>b. if You include all or a substantial portion of the database      contents in a database in which You have Sui Generis Database      Rights, then the database in which You have Sui Generis Database      Rights (but not its individual contents) is Adapted Material,      including for purposes of Section 3(b); and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share      all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p> <p>Section 5 -- Disclaimer of Warranties and Limitation of Liability.</p> <p>a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE      EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS      AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF      ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,      IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,      WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR      PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,      ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT      KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT      ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.</p> <p>b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE      TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,      NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,      INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,      COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR      USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN      ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR      DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR      IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.</p> <p>c. The disclaimer of warranties and limitation of liability provided      above shall be interpreted in a manner that, to the extent      possible, most closely approximates an absolute disclaimer and      waiver of all liability.</p> <p>Section 6 -- Term and Termination.</p> <p>a. This Public License applies for the term of the Copyright and      Similar Rights licensed here. However, if You fail to comply with      this Public License, then Your rights under this Public License      terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under      Section 6(a), it reinstates:</p> <pre><code>   1. automatically as of the date the violation is cured, provided\n      it is cured within 30 days of Your discovery of the\n      violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n For the avoidance of doubt, this Section 6(b) does not affect any\n right the Licensor may have to seek remedies for Your violations\n of this Public License.\n</code></pre> <p>c. For the avoidance of doubt, the Licensor may also offer the      Licensed Material under separate terms or conditions or stop      distributing the Licensed Material at any time; however, doing so      will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public      License.</p> <p>Section 7 -- Other Terms and Conditions.</p> <p>a. The Licensor shall not be bound by any additional or different      terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the      Licensed Material not stated herein are separate from and      independent of the terms and conditions of this Public License.</p> <p>Section 8 -- Interpretation.</p> <p>a. For the avoidance of doubt, this Public License does not, and      shall not be interpreted to, reduce, limit, restrict, or impose      conditions on any use of the Licensed Material that could lawfully      be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is      deemed unenforceable, it shall be automatically reformed to the      minimum extent necessary to make it enforceable. If the provision      cannot be reformed, it shall be severed from this Public License      without affecting the enforceability of the remaining terms and      conditions.</p> <p>c. No term or condition of this Public License will be waived and no      failure to comply consented to unless expressly agreed to by the      Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted      as a limitation upon, or waiver of, any privileges and immunities      that apply to the Licensor or You, including from the legal      processes of any jurisdiction or authority.</p> <p>=======================================================================</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/", "title": "Deck of Adventures Quickstart Guide", "text": ""}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#what-is-deck-of-adventures", "title": "What is Deck of Adventures?", "text": "<p>Deck of Adventures is a Tabletop Roleplaying Game (TTRPG) where friends tell a collaborative narrative story together as a group of adventurers. This guide is enough to get started, but we recommend you read the Full Player's Guide to learn all of the rules, mechanics, and story-telling devices.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#quick-start-guide", "title": "Quick-Start Guide", "text": "<p>Your Game Master (GM) is about to play narrator to a story in which you will take part. The GM will be there to help guide you through the process and understand the rules. They serve as the primary storyteller and referee throughout an Adventure.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#the-deck", "title": "The Deck", "text": "<p>Grab a standard deck of playing cards, reserving the Jokers, and shuffle well. Cards will be drawn from this deck and make their way to a Discard Pile.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#checks", "title": "Checks", "text": "<p>If your character attempts an action with an unknown outcome, you'll be asked to make a Check, which involves drawing one more cards from your deck, and comparing the outcome via...</p> <ul> <li> <p>A Target Card (TC) that is drawn and shown on the table, which you hope to Draw a   value close to in order to succeed on your Check. Think of it as the bullseye of the   target you are aiming for.</p> </li> <li> <p>Difficulty Range (DR) that defines how far away from the Target Card you can be and   still succeed. Think of it as the closest rings surrounding the bullseye. A Difficulty   Range 'above' a King is an Ace, then 2, and so on. A Difficulty Range 'below' 2 is an   Ace, then King, etc.</p> </li> <li> <p>A Modifier (Mod) is associated with a specific skill or attribute and can be found   on your character sheet. A mod allows you to add that number to the Difficulty Range,   increasing the effective Difficulty Range and making it easier for you to succeed.   This helps widen the rings around the bullseye that will result in a successful draw.</p> </li> <li> <p>Under some circumstances, you'll be asked to draw with the Upper Hand or the Lower   Hand.</p> <ul> <li>With the Upper Hand, you can draw an additional card(s) and use the more favorable  value to increase your odds.</li> <li>With the Lower Hand, you must draw an additional card(s) and use the less  favorable value, decreasing your odds.</li> <li>A single instance of Upper Hand or Lower Hand requires you to draw just 1  additional card. However, these effects can compound, requiring you to draw 2 or  more cards for the applicable check. Upper and Lower Hand can also cancel each  other out.</li> </ul> </li> <li> <p>For example, on a Target Card of 4, with a Difficulty Range 1, you would need either a   3, 4, or 5 to succeed on a Check. If you have a +1 Mod, the effective Difficulty Range   is now 2 which means you can draw a 2, 3, 4, 5 or 6 and still report a successful   draw.</p> </li> </ul> <p>There are two special kinds of Checks:</p> <ul> <li> <p>A Contested Check is triggered by two characters using skills for opposing goals.   The initiator sets the Target Card (their own card) and the Difficulty Range (3 -   Mod/2). The character responding makes a simple check against these values.</p> </li> <li> <p>A Save is a Check made with an Attribute (see below) with a predetermined Difficulty   Range that a character makes against their own Target Card.</p> </li> </ul>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#fate-cards", "title": "Fate Cards", "text": "<p>You start with 2 Jokers in your hand as Fate Cards. Any Aces drawn during play are also reserved as Fate Cards. At any time, you can discard a Fate Card to ...</p> <ol> <li>Push Fate: redraw use the new value.</li> <li>Exchange Fate: gain one Power Point per card discarded.</li> <li>Toughen Up: nullify one point of damage taken per card discarded.</li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#characters", "title": "Characters", "text": "<p>You will have a Character Sheet with all the information about your character. This includes Attributes (general traits, like Agility and Intelligence), and specific Skills under each Attribute (e.g., Finesse under Agility). Each Attribute and Skill has a Modifier that you add when performing a Check related to that Attribute or Skill, signified by a number like +1. If a Mod equals 0, do not add or subtract from the Difficulty Range when making a check.</p> <p>Also on your character sheet are Powers. This is anything your character can do that might not be accessible to others. Some Powers, labeled Minor and Major, may require Power Points to activate. Your character sheet shows your starting number of Power Points as your maximum. You'll need to keep track of how many Power Points you have left as you use Powers.</p> <p>You can work with your GM to create a custom character for the Adventure, or use one of the premade characters as a quick way to get started.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#gameplay", "title": "Gameplay", "text": "<p>Throughout an Adventure, your GM will describe scenes and may provide visual cues or props. It's up to you to ask follow-up questions and figure out what your character would do in each scenario. Creativity and thinking outside the box (i.e., exact rules) is encouraged.</p> <p>The GM might announce an Epic Event, a series of trials in a tense scenario.</p> <ul> <li> <p>The GM will reveal a Target Card and the Difficulty Range. One or more players can   volunteer and decide which skill they want to use for the relevant check.</p> </li> <li> <p>Each player and the GM will take turns drawing on the Target Card to get a success   with a matching suit.</p> </li> <li> <p>Each Target Card is a collective success or failure.</p> </li> </ul> <p>The GM determines how many successes are needed to resolve the Epic Event. At the end, the GM will reveal the narrative consequences for their success or failure.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#resting", "title": "Resting", "text": "<p>Your character may need to rest to recharge Power Points or heal Health Points. If a rest is interrupted, you do not gain the benefits and need to try resting again.</p> <ul> <li> <p>Quick Rest takes 30 minutes of in-game time. Each player can draw a number of   Rest Cards.</p> <ul> <li>Each Rest Card is used in a Difficulty Range 3 check to regain Health or Power   Points. On a miss, regain 1 point. On a success, regain 2.</li> <li>At the end of the rest, shuffle a number of Discarded cards into your deck equal   to 10 plus twice your Vitality modifier.</li> </ul> </li> <li> <p>A Full Rest takes 8 hours of in-game time. Return to your maximum Health, Fate,   Power and Armor Points.</p> <ul> <li>If you run out of cards before you can successfully take a Rest, you may reshuffle  your discard pile into your deck, but you gain one level of Fatigue. This  signifies your character running out of Stamina during a long day.</li> <li>Return all Aces to the deck, and Jokers to your hand and shuffle. Some GMs may also ask for shuffling on Quick Rests.</li> </ul> </li> </ul> <p>If you run out of cards in your deck before you are able to take a rest, you gain one level of Fatigue, which makes certain actions more difficult (see status conditions for more detail).</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#combat", "title": "Combat", "text": "<p>During an Adventure, your party may need to navigate conflict. If not resolved peacefully, this may result Combat. The GM decides when to initiate a separate set of Combat rules, where a turn order is implemented. A map may be used as a visual aid, whether physical or digital, or \"theater of the mind\", as determined by your GM.</p> <p>At the start of Combat, each character draws their own Target Card to determine turn order, Ace to 2.</p> <ul> <li>On your turn, you can move and take 1 Major Action and 1 Minor Action, in any order.   Minor actions include object interactions and some Skill Checks.</li> <li>Your movement is limited by the Speed value on your character sheet, showing the   maximum number of spaces you can move. The average speed is 6.</li> <li>Your character sheet will give you optional actions that you can take listed under   Powers, but you can always try something new. Ask your GM if your idea is possible   under the circumstances.</li> <li>Unless otherwise stated, Powers have a range of 6 spaces and do 1 point of damage.</li> <li>If you get hit, you can expend a Fate Card to nullify 1 point of damage.</li> <li>Some attacks may result in a Status Condition.</li> </ul>"}, {"location": "1_Mechanics/01_PlayerGuide_Brief/#have-fun", "title": "Have Fun!", "text": "<p>You're now ready to play your first game of Deck of Adventures! Remember: having fun comes first.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/", "title": "Deck of Adventures Full Player's Guide", "text": ""}, {"location": "1_Mechanics/01_PlayerGuide_Full/#what-is-a-tabletop-game-system", "title": "What is a Tabletop Game System?", "text": "<p>A game system provides all of the rules, mechanics, and story-telling devices that are used to describe how characters interact with the world during a session. During a game session, a Game Master (GM) uses the rules laid out in a game system to set the stage for a narrative that all players collectively move forward. Moment-to-moment, the GM presents a scenario and players respond by attempting actions, either specified by the game system or wholly invented. The GM determines a player\u2019s success and failure, and guides the group in a meaningful way.</p> <p>Choosing which Tabletop Roleplaying Game (TTRPG) to play is an important step when starting an adventure and different game systems are better for different things. Common game systems range from high fantasy to space-faring, typically using many-sided dice; rules, supplements, and other materials for various TTRPG game systems can be found in published volumes and elsewhere online. Deck of Adventures sets itself apart by swapping out dedicated many-sided dice for a standard deck of playing cards. While other TTRPGs rely on using dice to determine the results of an uncertain action, Deck of Adventures just asks you to draw a card from your deck.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#guiding-principles", "title": "Guiding Principles", "text": "<p>In times of uncertainty, defer to the following:</p> <ol> <li>Have fun.</li> <li>The Game Master (GM) is both the narrator and referee. They work to ensure the entire group has fun. They have the final say of rulings at the table and will work to try and resolve disputes between players that may come up.</li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#the-deck", "title": "The Deck", "text": "<p>Deck of Adventures is based around a 54-card deck: 13 cards (2-10, J, Q, K, and A) across 4 suits, as well as Jokers. Each player should have their own Deck, with room for a Discard Pile and Fate Card pile.</p> <ol> <li> <p>Actions with unknown outcomes will require a player to make a Check, which means   drawing from their respective decks to inform the outcome.</p> </li> <li> <p>Jokers and Aces are Fate Cards and should be reserved in one's hand, for both players   and the GM. All other cards go directly into a Discard Pile.</p> </li> <li> <p>Players will use their deck to do most anything; it represents their character's   stamina until they complete a Rest. When the deck is empty and a player has to shuffle   between rests, they suffer from one level of   Fatigue until they complete a Full Rest.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#fate-cards", "title": "Fate Cards", "text": "<p>Fate Cards (Jokers and Aces) are a chance to control your fate. They permit the player to choose when they want a second chance at a key moment.</p> <ol> <li> <p>After a Full Rest, both Jokers return to the player's hand as Fate Cards, if they're not there already.</p> </li> <li> <p>Aces drawn from the deck are played as usual, but remain in the player's hand as a Fate Card rather than going to the Discard Pile. Aces reserved as Fate Cards are reshuffled back into the deck after a Full Rest.</p> </li> <li> <p>Any time a player or the GM draws a card, they may discard one held Fate Card and redraw. Only one redraw is permitted per check.</p> </li> <li> <p>Fate Cards may also be expended to either ...</p> <ol> <li> <p>Push Fate: redraw any check.</p> </li> <li> <p>Exchange Fate: gain Power Points equal to the number of Fate Cards used.</p> </li> <li> <p>Toughen Up: ignore damage equal to the number of Fate Cards used. This can be done as soon as the damage is applied or before the end of the Player's next turn after receiving damage.</p> </li> </ol> </li> <li> <p>A GM may award a Fate Card (as pulled from the player's discard pile or signified by another token) to a player for excellent play, including exemplifying their character\u2019s strengths or weaknesses.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#characters", "title": "Characters", "text": ""}, {"location": "1_Mechanics/01_PlayerGuide_Full/#attributes-skills-and-modifiers", "title": "Attributes, Skills, and Modifiers", "text": "<ol> <li> <p>Attributes are general domains that collectively make up a characters strengths and weaknesses: Agility, Strength, Intuition, Intelligence, Conviction, and Vitality.</p> </li> <li> <p>Skills are specific to an Attribute. These signify how good a character is at performing certain types of actions. Each Skill is tied to an Attribute, meaning improving that Attribute also increases the effectiveness of a related Skill. Athletics is a Strength skill, but Bluffing is a Conviction skill. All Attributes and Skills are listed below and can be viewed on your character sheet.</p> </li> <li> <p>Modifiers reflect a character\u2019s level of expertise in a given Attribute or Skill domain and allow you to add that number to the Difficulty Range (DR) when making a Check. These modifiers are determined at Character Creation and can be improved as you Level Up.</p> </li> </ol> <p>Complete Attribute and Skill List:</p> <ul> <li>Agility AGL<ul> <li>Finesse (Fight)</li> <li>Stealth</li> </ul> </li> <li> <p>Conviction CON</p> <ul> <li>Bluffing</li> <li>Performance    </li> </ul> </li> <li> <p>Intuition GUT</p> <ul> <li> <p>Detection    </p> </li> <li> <p>Craft    </p> </li> </ul> </li> <li> <p>Intelligence INT</p> <ul> <li>Knowledge</li> <li>Investigation    </li> </ul> </li> <li> <p>Strength STR</p> <ul> <li>Athletics</li> <li>Brute (Fight)    </li> </ul> </li> <li> <p>Vitality VIT     </p> </li> </ul> <p>Each skill is generally related to a domain of expertise a character may possess. A GM might call for a Check using a specific Skill, but you can always ask if another would be applicable in the situation. The GM decides whether the Skill applies, so get creative!</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#dealers-npcs-and-companions", "title": "Dealers, NPCs and Companions", "text": "<p>The Player Characters (PCs) are typically the heroes of the story. PCs are considered Dealers and differ from the majority of other characters in the world. The GM may control other Dealers who can take the form of powerful allies or adversaries the players may encounter along the way.</p> <ol> <li> <p>Dealers. All player characters, and some in-game characters that are controlled by the Game Master. They...</p> <ul> <li>Can have Powers and Vulnerabilities.</li> <li>Have at least 5 health points (HP).</li> <li>Draw from their own deck of cards.</li> <li>Can receive and use Fate Cards.</li> <li>Can use Discard Actions.</li> </ul> </li> <li> <p>NPCs. All other characters. They...</p> <ul> <li>Are weaker than Dealers</li> <li>Have limited access to Powers</li> <li>Typically have between 1-3 HP.</li> <li>Draw from a collective set of cards controlled by the GM.</li> <li>Cannot use either Fate Cards or Discard Actions.</li> </ul> </li> <li> <p>Companions are creatures that can be associated with a Dealer, like a pet or other-worldly advisor. A Companion acts on the players turn, draws from the Dealer's deck of cards, and grants unique features in and out of combat. See the setting Bestiary for a list of potential Companions and their unique features.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#playing-the-game", "title": "Playing the Game", "text": ""}, {"location": "1_Mechanics/01_PlayerGuide_Full/#exploration-and-adventuring", "title": "Exploration and Adventuring", "text": "<p>The players are creating and experiencing the world at the same time. Adventures can include exploring the world, investigating for clues, and engaging in social interactions with other players and non-playable characters. During an Adventure, the GM will ask players to Make a Check by drawing a card and adding the modifier relevant to the circumstance.</p> <ol> <li> <p>Setting the Scene. The GM will include a brief descriptions of important events and new locations to spark the narrative. Descriptions may hint at events ahead. Players are encouraged to ask clarifying questions.</p> </li> <li> <p>What do I see? Characters often know more just by having direct access to the world. Players may ask about the world, immediate environment or common knowledge a character might have. The GM\u2019s answer may depend on a successful check.</p> </li> <li> <p>Talking to the Locals. The GM speaks on behalf of all other characters and will respond with what the relevant character knows depending on the situation. Some checks may determine the outcome of these conversations. When speaking either to the GM or other players, players should remember to be respectful. A brash character is no excuse to be rude to one\u2019s fellow players.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#making-a-check", "title": "Making a Check", "text": "<p>When the GM or a Player calls for a Check, they announce who will be making this check and reveal (a) a Target Card (TC), (b) the Attribute or Skill associated with the check. They may also choose to reveal (c) the Difficulty Range (DR).</p> <p>A Target Card (TC) is like the bullseye on a target you are hoping to hit. The Difficulty Range (DR) is the range around the TC the player might hope to draw, like the circles around the bullseye.</p> <p>Players may consult with their GM to determine which Attribute(s) or Skill(s) may be used, corresponding to a Modifier on the character sheet. The DR is decided by the GM before a check is made, and may or may not be revealed to the players. The DR may differ based on Attribute or Skill chosen. Once the check is called for and the relevant skill is selected, player(s) must make the check by drawing one or more cards. Immediately after drawing, a player will apply any relevant Modifiers before reporting the outcome. The Modifier is added to the DR when a check is made, effectively widening the DR and making it easier to succeed.</p> <p>The GM may describe the nature of the outcome or announce the degree of success, possibly including a  more detailed description of the outcome. Alternatively, the GM may ask the player to describe the specifics of a given success or failure.</p> <p>Because the range of cards is circular (Q, K, A, 2, 3, etc.), success is all about dialing in your effort to match the task at hand as closely as possible. Remembering which card is 5 below a 3 can be tough, so there is a table below as well as a printable tool to help look up the DR range as you get familiar with the system.</p> <p>Target Card Range Table For each card on the left, refer to the column with the corresponding DR. Left of 0 is the lower bound, right of 0 is the upper bound.</p> TC -6 -5 -4 -3 -2 -1 0 +1 +2 +3 +4 +5 +6 A 8 9 10 J Q K A 2 3 4 5 6 7 2 9 10 J Q K A 2 3 4 5 6 7 8 3 10 J Q K A 2 3 4 5 6 7 8 9 4 J Q K A 2 3 4 5 6 7 8 9 10 5 Q K A 2 3 4 5 6 7 8 9 10 J 6 K A 2 3 4 5 6 7 8 9 10 J Q 7 A 2 3 4 5 6 7 8 9 10 J Q K 8 2 3 4 5 6 7 8 9 10 J Q K A 9 3 4 5 6 7 8 9 10 J Q K A 2 10 4 5 6 7 8 9 10 J Q K A 2 3 J 5 6 7 8 9 10 J Q K A 2 3 4 Q 6 7 8 9 10 J Q K A 2 3 4 5 K 7 8 9 10 J Q K A 2 3 4 5 6"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#effective-difficulty-range-and-negative-drs", "title": "Effective Difficulty Range and Negative DRs", "text": "<p>Effective Difficulty Range (EDR) is the DR plus Modifier of a check, which can help players understand the difficultly of a task. A check can only be attempted if the EDR is -2 or higher. A -1 EDR requires a Color Major Success, while a -2 EDR requires a Suited Major Success. For example, drawing against a King of Diamonds on a -1 EDR means you must draw a red King to be successful. For a -2 EDR, you need the King of Diamonds.</p> <p>During an adventure, there will be tasks of varying degrees of difficulty. As characters grow, their Modifiers increase and previously challenging tasks are made easier. Higher level characters will be faced with more difficult challenges at a lower DR. A +6 EDR is an assured success, while a -3 EDR is assured failure.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#degrees-of-success", "title": "Degrees of Success", "text": "<ul> <li>Exactly matching the TC in numeric value is a Major Success. If the drawn card is a perfect match (i.e., value and suit), it's a Critical Success. If the card drawn is within the DR and matches the suit or color (i.e., red/black), it is either a Suited or Color Success. If there is a suit or color match outside the DR after the modifier has been applied, this is a Suited or Color Miss. Suit and Color will only matter under specific circumstances; for certain character Powers, item types or defenses. There is no critical failure in Deck of Adventures.</li> </ul> <p>For example, when Xena attempts to jump across a chasm, the GM reveals a TC of the 8 of Clubs and a DR of 2, asking for an Athletics check. If the player's Athletics modifier is +1, the EDR is now 3, and the check is ...</p> <ol> <li> <p>A Critical Success if they draw the 8 of Clubs. They might perfectly make the jump,  impressing their allies, and catch a glimpse of something important in the distance.</p> </li> <li> <p>A Major Success if they draw any 8. They might make the jump gracefully enough to impress their allies without any other benefits.</p> </li> <li> <p>A Success if they draw any card within 3. For TC 8, DR 2, and Mod 1, this is 5, 6, 7, 9, 10 or J.</p> </li> <li> <p>A Color Success for any Successes that match the color of the TC, in this case black which would be a Spade.</p> </li> <li> <p>A Suited Success for any Successes that match the Suit of the TC, in this case a Club. Xena might have a Power that grants benefits to allies on a Suited Success. After crossing, they can improve their ally's chances of crossing.</p> </li> <li> <p>A Suited or Color Miss if they draw any Club or Spade, respectively below 5 or above J. Xena might have a Power that lets them redraw on a Suited Miss, for example.</p> </li> <li> <p>A Miss is any Diamond or Heart draw below 5 or above J.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#upper-and-lower-hand", "title": "Upper and Lower Hand", "text": "<p>Sometimes the odds will be in your favor; sometimes they will be against you.</p> <ol> <li> <p>Having the Upper Hand (N) means you draw N additional cards and select the card closest to the TC after applying all relevant mechanics. A player may choose to stop drawing before N cards are drawn.</p> </li> <li> <p>Having the Lower Hand (N) means you draw N additional cards and select the card that is furthest from the TC after applying all relevant mechanics. A player must draw all N cards.</p> </li> </ol> <p>In these cases, all cards drawn are discarded. If N is not specified, draw 1 extra. Multiple Upper/Lower hand effects can compound or even out. If a rule specifies Upper/Lower Hand (N+), the effect can apply multiple times. N cards are drawn, +1 for each instance the effect is applied. For example, running through your deck without resting results in one level of Fatigue, which causes Lower Hand (1+) on all Saves. This means that, if another effect causes Lower Hand, draw an additional Lower Hand card on all Saves. Upper/Lower Hand effects are cumulative and cancel each other out.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#contested-checks", "title": "Contested Checks", "text": "<p>Some checks will be initiated by a character's actions and require others to respond, pitting two skills against each other. This might be one character sneaking past another (e.g., Stealth vs. Detection), or one character causing a magical effect that another tries to dodge (e.g., Craft vs. Agility). This is a Contested Check. In these cases, the character who initiated the action (i.e., the Attacker) sets the DR; the DR for a Contested Check is 3 minus half of the Attacker's relevant modifier, to a minimum of 0. The character(s) responding are the Target(s), and must draw a Check against the initiator's TC. Rules that describe a \"Contested X Check vs. Y\" use the attacker's Skill X and Targets' Y. Targets succeed or fail individually.</p> <p>For example, Xena attempts to convince Jonas of something (either truthfully or with deception), they would use their Bluffing Mod of +2, setting the DR to 2 (3-1). They draw a TC of 3 of Diamonds, permitting a card between A and 6. Jonas draws an 8 of Spades with a +1 Modifier to Detection and reports a 7, still outside the DR. Xena would successfully convince Jonas of something in this scenario.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#saves", "title": "Saves", "text": "<p>When a character attempts to resist or shrug off a negative effect, they make a Save. This could be caused by a Power, Status Condition, or a environmental effect. When a character makes a Save, they draw a Check against their own TC and apply their relevant Attribute Modifier. The Attribute and DR are explicitly set by the initiating effect and cannot be altered. If the effect forcing a Save is a Power, the DR is 3 minus half of the initiator's relevant Skill Modifier. Saves may still have consequences even on a success, as specified by the initiating effect.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#in-combat", "title": "In Combat", "text": "<p>Some stories involve hostile forces that will threaten players with violence. If violence is unavoidable, the GM decides when Combat begins and then a separate set of rules take effect. Combat in Deck of Adventures is designed to be fast-paced, while leaving a lot of room for player teamwork and creativity. To keep up the pace, players should be sure to study their character sheets and know their options ahead of combat, and use others\u2019 turns to make their choices. Deck of Adventures is all about teamwork, so communication is encouraged.</p> <p>GMs may provide a map and other visual cues like character tokens to help players visualize the situation. On a square grid, moving diagonally counts as one space unless otherwise ruled by the GM. Unless otherwise specified, each space on the map represents 5 square feet of distance.</p> <p>In combat, Powers do 1 damage unless otherwise stated. A Major Success does 1 extra damage. A Critical Success may have an additional effect, at the GM's discretion.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#taking-turns", "title": "Taking Turns", "text": "<ol> <li> <p>Combat order is determined by card draw. At the beginning of combat, all characters draw a Target Card and place it in on the table in view. The values represent the turn order (Ace first, then K, Q, etc.) and the TC for any attack. Players with the same Target Card values as an enemy go first. If two players draw the same Target Card, they can decide who goes first. Without consensus, the player with the higher Agility modifier goes first. In the event of a Surprise Round, the characters who are part of the Surprise Round draw their TCs and take one full round of actions before the characters being surprised can act.</p> </li> <li> <p>A player may delay their turn in initiative order to intentionally occur before or after another character(s)', but their turn is forfeited if they do not announce their action(s) by the end of the round. A GM may skip a player\u2019s turn if they are unprepared and need more time to think, and should ask skipped players to act at the end of the round before a new one starts.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#in-combat-actions", "title": "In Combat Actions", "text": "<p>Each round represents 6 seconds of game time passing. All of the actions from every characters' turns unfold simultaneously during this time, even though a turn order is followed. On a turn, a character may (a) move, (b) perform 1 Major Action, and/or (c) perform 1 Minor Action in any order they choose. They may also perform any number of Free Actions, within reason (approx 5), as permitted by the GM.</p> <ol> <li> <p>Movement By default, character speed is equal to 6, but may be faster or slower. Speed is the total number of spaces a character can move in a turn. This total may be split to occur before, after, and/or between actions. A creature can move through a friendly creature's space as part of their movement but can not end their turn on that space. A creature cannot move through a hostile creature's space or between two hostile creatures' spaces if they are within one space of one another.</p> </li> <li> <p>Actions The list below are possible Minor/Major Actions, but a GM may permit others. If an action specifies a skill, this requires a check.</p> <ol> <li> <p>Free</p> <ul> <li>Communication that does not require a check.</li> <li>Observation: gaining obvious information about the world.</li> <li>Toughening Up: discard one or more Fate Cards to nullify one damage per card  used.</li> <li>Exchanging Fate: discard one or more Fate Cards to gain one Power Point per card used.</li> </ul> </li> <li> <p>Minor</p> <ul> <li>Object interaction: Pressing a button, pulling a lever, using a disposable        item, equipping or changing weapons, etc.</li> <li>Inspect: Detection or Investigation vs. GM-determined DR; learn something  about an opponent or the terrain.</li> <li>Convince: Bluffing vs. GM-determined DR; convince a target to change their  course of action</li> <li>Recall: Knowledge vs. GM-determined DR; determine if a character knows a  specific piece of information</li> </ul> </li> <li> <p>Major</p> <ul> <li>Rush: double movement</li> <li>Grapple: Brute vs. target Finesse or Brute; cause one creature to be   Grappled</li> <li>Hide: Stealth vs. target(s) Detection; become Hidden</li> </ul> </li> </ol> </li> </ol> <p>A character can choose to Ready their Major Action to occur on a stated trigger, such  as \"I will make a Weapon Attack when an enemy moves within 1 space of me.\" If the  trigger occurs, the readied Major Action can then be activated. If the trigger does not  occur before the start of the character's next turn, this Major Action is forfeited,  along with any Power Points used for the Major Action.</p> <p>Some Powers specify multiple options that have different Power Point costs. On using a  Power, a character must declare the option being used and spend the associated Power  Point cost. All Power Points used are expended, even on a failure or miss.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#ending-combat", "title": "Ending Combat", "text": "<p>When the last enemy combatant has been Knocked Out, retreats, or surrenders, Combat is over. This ends the turn order, and characters can act independently of turn order. Characters do not discard their Target Cards after combat ends. This TC represents the character until the start of the next combat.</p> <p>If the Players are defeated in combat, the GM determines what happens next in the story. If the scenario was of life or death importance, the Player Characters may be killed outright. In less tense scenarios, the Player Characters may simply be left knocked out or imprisoned.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#status-conditions", "title": "Status Conditions", "text": "<p>Some Status Conditions will impact a character over time. The duration of each Condition is listed in the Power or effect that causes it.</p> <ol> <li> <p>Stunned If a character is hit by a critical attack, they make a DR 3 CON Save   at the start of their turn. If failed, they may either move or make one Action on   their turn, not both. Some Powers can cause the Stunned Condition.</p> </li> <li> <p>Entangled A character may expend a Major Action to make a DR 3 STR Save. Until   they are successful, their Speed is 0 and any Agility Saves are made with Lower Hand.</p> </li> <li> <p>Knocked Down A character must expend a Minor Action to get up. Their movement   speed is halved, rounding up. When Knocked Down, attackers within 1 space draw with   Upper Hand and attackers further than 1 space away draw with Lower Hand.  All STR and   AGL Saves are made with Lower Hand. A character can use 1 speed to willingly go prone   as part of their movement, gaining the Knocked Down status.</p> </li> <li> <p>Blinded, Deafened At the start of their turn, as a Free Action, a character   makes a DR 3 Intuition Save. If they fail, they draw Lower Hand (3) for any action   requiring the relevant sense.</p> </li> <li> <p>Knocked Out Knocked Out (KO) characters are unable to act until treated by a   Craft check or a Healing Power (DR 5 vs. the KO character's TC, minus 1 for each turn   passed since the effect onset). If a Knocked Out Dealer is attacked further, the   Player begins an Epic Event alone.</p> </li> <li> <p>Burned As a Minor Action, a character can make a DR 3 GUT Save to stop the   burning. On failure, they take 1 damage bypassing AP.</p> </li> <li> <p>Poisoned N Each poisoning effect adds +1 Poisoned. At the start of their turn,   as a Free Action, a character makes a DR 3 VIT Save to shake off the effects of the   poison. On failure, they discard N+1 cards.</p> </li> <li> <p>Frozen Movement speed is reduced by half and all STR and AGL based skill checks   are drawn at Lower Hand. A character makes a DR 3 Strength Save as a Free Action at   the end of their turn to attempt to end the freeze.</p> </li> <li> <p>Suffocating At the beginning of their turn, a character makes a DR 3 VIT Save.   On failure, take 2 damage bypassing AP. On a success, take 1 damage.</p> </li> <li> <p>Charmed At the start of their turn or whenever taking damage, a character   makes a DR 3 GUT Save. On failure, they may not take actions against the interests of   the creature that caused the condition. Another creature within 6 spaces may use a   Major action to end this effect. This effect ends automatically if the target is   damaged by the creature that caused the condition.</p> </li> <li> <p>Enthralled At the start of their turn or whenever taking damage, a character   makes a DR 3 CON Save. On failure, they must move up to their Speed and/or perform 1   Major Action available to them, as directed by the creature that caused the condition.   Another creature within 6 spaces may use a Major action to end this effect. This   effect ends automatically if the target is damaged by the creature that caused the   condition.</p> </li> <li> <p>Invisible When making a Check to detect an Invisible creature, draw with Lower   Hand. Unless otherwise stated, using a Power ends the Invisible condition. The attack   that ends Invisibility is drawn at Upper Hand.</p> </li> <li> <p>Grappled Movement speed is reduced to 0 and a Grappled creature cannot gain   the benefit of additional speed. They have Lower Hand when using any Power. A creature   can end the Grappled condition by making a successful Contested Brute or Finesse Check   against target's Brute.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#health-and-armor", "title": "Health and Armor", "text": "<p>Dealers have 4 health points (HP) plus their level, plus Vitality modifier. The health of Companions HP is half the level of their Dealer, rounding up. If a character is wounded beyond their health pool, they are Knocked Out. Armor Points (AP) are an additional resource that would be removed first in the event of a physical wound.</p> <p>Armor Range (AR) is how hard you are to hit in general and sets the DR for an attack against you. Without armor, this is 3 minus half of your Agility modifier rounded down. So if a character has an Agility modifier of +2, their AR would be 2. If you have physical armor or an armor-like magical effect, this determines your AR depending on the type of armor. Some armor has strength requirements which, if unmet, will cut a character's speed in half. Some armor can possess special effects, like granting bonuses to certain checks or requiring hits to color-match.</p> <p>Physical shields and magical effects can grant AP, either when equipping the item or activating the Power. Unless otherwise specified, damage subtracts from AP first. After AP is depleted, additional damage subtracts from HP. Unless otherwise noted, no two pieces of armor may be worn at the same time.</p> <p>Armor Table</p> Type AR AP Prerequisite Basic 3 0 Light 3 1 Medium 2 0 Strength \u2265 0 Fortified 2 1 Strength \u2265 0 Heavy 1 2 Strength \u2265 1 Massive 1 3 Strength \u2265 2 Gleaming 1 2 Agility \u2265 3"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#epic-events", "title": "Epic Events", "text": "<p>At any point, the DM may call for an Epic Event. The GM will narrate a particularly tense scenario and the player(s) must navigate the challenge. This usually involves player(s) needing to make a series of successes in a short time period. During an Epic Event...</p> <ol> <li> <p>The GM determines the total number of TCs and the amount of successes or failures needed to complete the Epic Event. The GM then draws a TC related to a specific task during the event.</p> </li> <li> <p>One or more players may announce how they would attempt this task. The GM decides the relevant Attribute or Skill, so each player may apply the relevant modifier. The GM applies no modifier.</p> </li> <li> <p>Each player involved and the GM take turns drawing on this TC, looking for a Suited Hit. If a player succeeds first, this is a success for the party. If the GM succeeds first, this is a failure.</p> </li> <li> <p>Powers cannot be used during an Epic Event unless the GM explicitly allows for it in a specific circumstance.</p> </li> </ol> <p>This process repeats for each TC in the Epic Event. A player may not volunteer for two TCs in a row. Just as in standard Checks, a failure may be associated with some drawbacks. Successive failures could change the course of the story. Fate Cards card mechanics still apply: played Aces return to the player\u2019s hand. Players may use Fate Cards for redraws or to negate damage taken during the Epic Event.</p> <p>For example, an earthquake causes a cavern to shake. The party must act quickly to   get out before a collapse</p> <ol> <li> <p>The GM reveals a TC: a 4 of Hearts, with DR 4. How will the party navigate their way to safety?</p> </li> <li> <p>Xena and Elise both volunteer for this TC. Xena will attempt to remember the way back, and will be making Knowledge Checks. Elise is a skilled survivalist, with experience in rock formations, and will be making Craft Checks.</p> <ol> <li> <p>Xena draws a 3 of Spades with +0 Mod. This is within the DR, but not a Suited Match.</p> </li> <li> <p>Elise draws a 9 of Hearts with a +1 Mod. This is a Suited Match, the group makes good headway.</p> </li> </ol> </li> <li> <p>The GM reveals a new TC: a K of Spades, with DR 3. A cultist blocks their path.</p> </li> <li> <p>Genesis volunteers to distract the cultists, using Performance Checks. Genesis and the GM each draw: Genesis, then the GM, then Genesis, then the GM, etc. Finally, the GM draws a Q of Spades. This is the first failure. The cultist sees the remaining party members.</p> </li> <li> <p>The GM reveals a new TC, DR 2. All party members must make Athletics checks to outrun the cultist.</p> </li> </ol> <p>When a Dealer is Knocked Out in combat, their subsequent turns are replaced with Epic Event TCs of DR 4 Vitality Checks. If they take additional damage, they make these checks at Lower Hand (+1). If they succeed on two TCs, they remain unconscious and the Epic Event is concluded. For a Major Success (same value as TC), they recover 1 HP. For a Critical Success, they recover 1 HP and up to 3 PP (PP max permitting). If they fail two of these TCs, they are Dead and are called to the great beyond.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#rests", "title": "Rests", "text": "<p>Rests are common throughout an Adventure. There are two types of rests. A Quick Rest represents a short 30-minute break of in-game time, where characters may be catching their breath or healing their wounds. A Full Rest is an 8-hour period of in-game time where characters get some sleep and recover from a long day.</p> <p>During a Quick Rest, each player who is resting draws from their deck using Rest Cards. Players start with a number of Rest Cards equal to their maximum Health. Each Rest Card can be used as a DR 3 draw against one's own target card without modifiers. On a miss, recover one HP or PP, your choice. On a success, recover two total points across HP and PP, your choice.</p> <p>At the end of a Quick Rest, shuffle the discard pile and draw 10 plus twice Vitality back into your deck, and then reshuffle your deck. A player can only gain the benefits of a Quick Rest twice per Full Rest.</p> <p>After completing a Full Rest, discard your TC, shuffle your discard pile back into your deck, along with any Aces from your hand. Add both Jokers to your hand as Fate Cards if they were used. Fate, Health, Power, and Armor Points, as well as Rest Cards, all return to their maximum values.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#fatigue", "title": "Fatigue", "text": "<p>If you run out of cards before you can successfully take a Rest, you suffer one level of Fatigue. This signifies your character running out of Stamina during a long day. Consult the list below for the consequences at each level of fatigue.</p> <ol> <li>Lower hand (1) on saves.</li> <li>Lower hand (1) on all checks.</li> <li>Movement halved and Fate Cards cannot be used to gain Upper Hand.</li> <li>PP expenditure requirements doubled.</li> <li>Knocked Out</li> </ol> <p>Upon completing a Full Rest, all levels of Fatigue are removed.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#discard-powers", "title": "Discard Powers", "text": "<p>Each Dealer may have one Discard Power. Dealers may discard cards as a Minor Action for additional benefits in combat starting at Level 2. For every 2 cards discarded, up to a limit of 4, an Upper/Lower Hand +1 is granted described below. These effects do not stack; only one may be applied to a character at a time. Cards are discarded and can still yield Fate Cards.</p> <p>Below is a list of possible Discard Powers, determined by Role. Work with your GM if you would like to use a different Discard Power instead.</p> <ul> <li> <p>Aggro (Defender): Discard N cards to force all creatures within 2 spaces to make   their next Check to attack targets besides the triggering Dealer at Lower Hand (N/2).</p> </li> <li> <p>Help (Support): Discard N cards to grant an ally within 6 spaces Upper Hand (N/2)   on all Checks until the end of their next turn.</p> </li> <li> <p>Thwart (Martial): Discard N cards and cause an enemy within 6 spaces to make all   Checks at Lower Hand (N/2) until the start of the triggering Dealer's next turn.</p> </li> <li> <p>Intensify (Caster): On your next Attack, discard cards until you reach a Major   Success. Standard Successes are treated as Misses. You can choose to end this effect   early.</p> </li> </ul> <p>The discard limit increases with level according to the table below.</p> Level Discard Cap Bonus 1 4 2 5 6 3 8 8 4"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#interacting-with-the-environment", "title": "Interacting with the Environment", "text": ""}, {"location": "1_Mechanics/01_PlayerGuide_Full/#light-and-vision", "title": "Light and Vision", "text": "<p>Certain types of Checks require light and vision to see the environment or a target effectively. The amount of light available impacts Checks for most creatures. There are some Powers that affect a creature's abilities depending on the amount of light available.</p> <p>Partial Darkness: When making a Detection or Investigation Check in partial   darkness, draw with the Lower Hand. For example...</p> <ul> <li>A dark alley in a city with some light spilling over from a nearby street.</li> <li>An underground room with some candles burning lightly.</li> </ul> <p>Full Darkness: When making a Detection or Investigation Check in full darkness, draw with the Lower Hand (3). For example...</p> <ul> <li>A moonless night in the countryside without any light source.</li> <li>Descending into a cave without a light source.</li> </ul> <p>Hidden: Upon a successful Stealth check a creature is considered Hidden with respect to other creatures. Attacks against unaware creatures have Upper Hand, and attacks against a Hidden creature have Lower Hand.</p> <p>Unless otherwise stated, a creature is no longer Hidden whenever another creature makes a Successful Detection Check or if the creature:</p> <ul> <li>Uses a Power</li> <li>Takes Damage</li> <li>Fails a Stealth Check</li> </ul>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#cover", "title": "Cover", "text": "<p>When a creature moves to a position that makes it more difficult to hit them, they will gain the effects of cover.</p> <p>Partially Covered: When a creature is still visible behind something but it is still   reasonable to hit them. While partially covered the creature's AR is reduced by -1,   making them harder to hit. For example...</p> <ul> <li>Standing directly between another creature and an attacker.</li> <li>Standing behind a crate or barrel that is half the creature's height.</li> </ul> <p>Fully Covered: when a creature is nearly impossible to see behind something and it   is unlikely to land a hit on them. While fully covered, the creature's AR is reduced   by -2. For example...</p> <ul> <li>Crouching below a crate that is half the creature's height.</li> <li>Standing behind a pillar or wall that is taller than the creature.</li> </ul> <p>A creature can go from Fully to Partially Covered or from Fully Covered to Not Covered by using their Speed or making a Check. Some Powers may grant these effects as well. A creature may be covered from one direction but not from another direction, and the GM determines if a creature is Fully or Partially Covered depending on the scenario.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#falling", "title": "Falling", "text": "<p>Falling from a great height is dangerous. At the end of a fall, a creature takes 1 damage and applies -1 speed for every 2 space equivalent in height it fell and the creature is Knocked Down. This speed is recovered after a Rest or if the creature is healed to their maximum HP. Your GM may allow for an Agility Save to mitigate the penalty from falling.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#challenging-terrain", "title": "Challenging Terrain", "text": "<p>Moving through the environment can sometimes be challenging. When navigating through Challenging Terrain, moving through one space requires 2 speed. While standing in Challenging Terrain, all Agility Saves are made with the Lower Hand.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#holding-breath", "title": "Holding Breath", "text": "<p>A character can go without air for 1 + 2 times Vitality Mod minutes. Taking damage without air reduces this time by 1 minute. After this time, the character gains the Suffocating Status Condition.</p> <p>Some Powers or effects can extend this time limit or prevent a character from Suffocating.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#character-creation", "title": "Character Creation", "text": "<p>Deck of Adventures offers both premade characters and a completely customizable process. Consult with your GM for information about the setting and what skills might be relevant for the story ahead. Custom creation starts with spending Experience Points on Attributes, Skills, Powers, Vulnerabilities and/or Skills.</p> <ul> <li> <p>A Background is descriptive of a   character's history and where they are when you begin your adventure.</p> </li> <li> <p>A Role is a general class that unlocks   access to certain abilities.</p> </li> <li> <p>Attributes cost more, but also increase corresponding skills.</p> </li> <li> <p>Spending points has diminishing returns. Going from 0 to +1 is relatively cheap, but   +3 to +4 will take many more points.</p> </li> <li> <p>Skill Modifiers start unskilled with a 0 Modifier, so choose carefully.</p> </li> <li> <p>Vulnerabilities are roleplay and/or combat weaknesses and yield 1 or 2 additional   Experience Points to spend when they are added to the Character Sheet during Character   Creation.</p> </li> <li> <p>Powers are special features, boons or strengths, that cost 1 or 2 Experience Points.   If a Power has a Power Point cost, add the higher PP value to your total PP. Powers   may have additional requirements such as Role or Level.</p> </li> </ul> <p>For a full set of character creation options, see our Character Creation page.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#leveling-up", "title": "Leveling up", "text": "<p>As your character journeys through the world and accumulates experience, they will Level Up. Every character starts at Level 1 and gains experience over time.</p> <p>When leveling up, characters:</p> <ul> <li>Acquire 2 Experience Points to spend on Attributes, Skills, and Powers</li> <li>Can access Powers that require a certain level</li> </ul> <p>Your GM decides when your character achieves a level up. Work with your GM to understand how leveling up works at your table.</p>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#starting-your-adventure", "title": "Starting your adventure", "text": "<p>There are four steps to starting an adventure of Deck of Adventures:</p> <ol> <li> <p>Find a group: Deck of Adventures requires as few as two people, one Game Master ( GM) and one player, but richer stories can be told with more people bringing more to the table. Join the Deck of Adventures Discord Server to find a group! (if this link is expired, please submit an issue)</p> </li> <li> <p>Discuss play style: Different players and GMs will have different preferences. Some love light-hearted misadventures, others enjoy dark melodrama. Some stories involve political intrigue, traditional dungeon crawling, reuniting lost lovers, or eldritch horrors. Consult with your group to match preferences. A GM should always be open to feedback on topics preferred or to be avoided.</p> </li> <li> <p>Choose your adventure: You can choose to run one of Deck of Adventures\u2019s standard adventures (Modules) or in the Deck of Adventures Starter Kit. The mechanics described here should be flexible to accommodate any story you want to tell, and GMs are invited to make modifications to fit their setting. A GM can also choose to write their own Adventure in a setting of their choosing.</p> </li> <li> <p>Pick a time and place: Deck of Adventures is designed to be as fun played in-person as it is online, and if you want to meet online there are virtual tabletop programs (VTTs) such as Roll20 that you can use that allow you to draw virtual cards.</p> </li> </ol> <p>To prepare for your first time playing, keep in mind...</p> <ol> <li> <p>Schedules: Regular meetings help your group stay on track, and the action moving forward. Session length varies from table to table and is determined by the GM, so make sure everyone knows how much time to schedule for each session. We suggest using a calendar or scheduling tool such as a Discord event to help coordinate schedules.</p> </li> <li> <p>Getting on the same page: A good \u2018first\u2019 session discussion topic is the story ahead, including preferences and topics players wish to avoid. Next, players should propose a character (idea or complete) to their GM. The GM may offer feedback to help your character better fit the setting ahead, or offer inspiration on a more complete backstory that fits the world. They will help you create your Character Sheet before the first official session of play.</p> </li> <li> <p>Players can prepare by knowing their character sheet, to be as quick as possible in their decision making. Premade characters are designed around common Roles that the GM can always help you understand. Custom characters are in your hands, and yours to remember.</p> </li> </ol>"}, {"location": "1_Mechanics/01_PlayerGuide_Full/#getting-started", "title": "Getting Started", "text": "<p>Now that you've read the rules, you're ready to get started with your first Adventure.</p> <p>You can make your own character or choose from a set of premade characters and add your own flavor and background to them.</p> <p>Grab some friends and a deck of cards, or visit the Discord to find a GM and a party for your next Adventure.</p> <p>Happy Adventuring!</p>"}, {"location": "1_Mechanics/02_GMGuide/", "title": "GM\u2019s Guide to Deck of Adventures", "text": ""}, {"location": "1_Mechanics/02_GMGuide/#introduction", "title": "Introduction", "text": "<p>As the Game Master (GM), your task is to bring together a group of Players and guide them through an Adventure. An Adventure can last for a single 2-3 hour session, or it can unfold over the course of weeks, months, or even years in a continuous narrative. You can bring together close friends in person, or find new friends virtually through the Discord.</p> <p>If you\u2019ve been a GM elsewhere and are hoping to learn about what\u2019s different about being a Deck of Adventures Game Master, you can skip right to Being a Deck of Adventures Game Master.</p> <p>For everyone else, or those GMs who want a refresher, we will dive into what being a GM is all about in Getting Started as a Game Master.</p> <p>If you or your players have questions or need a helping hand, please reach out to the team on Discord or via GitHub issues.</p>"}, {"location": "1_Mechanics/02_GMGuide/#getting-started-as-a-game-master", "title": "Getting Started as a Game Master", "text": "<p>Game Masters (GMs) play referee and narrator in a Tabletop RPG like Deck of Adventures (DofA). You are both the arbiter of the rules, and the actor/playwright who brings the various scenes of the story to life and voices the majority of the characters who populate the world. You control when certain characters come and go, scene changes, and the narration between scenes. You build the world, populate it with characters and history, and then the Players walk through that world and experience it first-hand.</p> <p>GMs are responsible for preparing ahead of sessions and guiding a group of Players through a collaborative narrative Adventure. You bring the game to life with any type of story you can imagine. There are so many possibilities as Game Master, and this guide is intended to help GMs develop and hone their skills running Adventures.</p> <p>There are many different approaches GMs take to this role, focusing on their unique strengths and talents. Don't compare yourself to others, especially those with years of experience. This craft takes years to hone, and decades to master, but you can be a great GM within your first few sessions by following some of the advice in this guide. The DofA Community also is available to respond to questions and offer advice, drawing from years of collective experience.</p> <p>You should be an impartial force in the world, controlling both allies and enemies neutrally. The best sessions feel like everyone is working together to complete an objective, even the GM, rather than competition between Players and GM. This is a delicate balance, and GMs should ask for Players' feedback. It's also a GM's responsibility to provide feedback to the Players at the table when necessary, especially if one's play style may be a distraction to others at the table. While the rules are there to guide you, as the Game Master you have the authority to modify and change things to suit your Players' needs and your individual goals for each session and adventure.</p>"}, {"location": "1_Mechanics/02_GMGuide/#making-checks", "title": "Making Checks", "text": "<p>As the GM, you decide when characters should make a Check when attempting an action during an Adventure. Some actions just happen, like a character opening an unlocked door. Other actions might require the character to attempt a Skill Check to see if they are successful. Incorporating luck makes Adventures feel more dynamic and exciting.</p> <p>When characters make a Check, they are drawing from their expertise (or inexperience) with a specific Skill to see how they perform. Their Modifier (Mod) indicates their character's expertise with a specific Skill. Characters with high Strength would be more likely to succeed on an Athletics Check than Characters with low Strength, though by incorporating luck a low Strength character still has a chance to succeed on a Strength Check.</p> <p>You determine when a Check should be made, what Skill should be used, and set the Difficulty. A Player might ask if a specific Skill could be used instead, and it is your decision whether to allow it in the circumstance. Stepping over a crack in the floor should not require a Check, but leaping ten feet across a chasm would. Attempting to sneak past a sleeping guard still requires a Stealth Check, but it should be less difficult than sneaking past the same guard who is on high alert.</p> <p>Flow state is achieved when we are at the peak of our ability and met with the exact level of challenge to fit our skills. To keep Players engaged, dial in the difficulty to where they're feeling challenged in a way that suits their play style, without worrying about what resources they have left.</p>"}, {"location": "1_Mechanics/02_GMGuide/#gm-preparation", "title": "GM Preparation", "text": "<p>As a GM, you will need to spend time outside of normal session hours working on your Adventure. You will be the primary resource for information about the world. Players will ask questions, and it's up to you to provide details, even if it's improvised. It's also OK to say you don't know something, or that you'll need to get back to them after the session. You should be open to Player questions and ideas, and work with them to tell the story as much as possible. Improvisation and spontaneity are two vital ingredients to a great session, but having key moments mapped out is important to shaping the Players' experience.</p> <p>What you prepare may not pan out perfectly, and that's part of the fun. The Players bring their own creative agency to the table, and that can be unpredictable. It's important not to force the Players back into a prescribed narrative. If the Players logically lead the the session in a different direction, go with it. The Players also may not know when story beats are improvised, and these moments can make for the most organic and memorable Adventures.</p> <p>During a session, GMs keep some information hidden from the Players. This can be a physical or virtual GM screen that separates the information that's available to the GM and not the players. Behind the GM screen also serves as a metaphor for what players can and can't see. As the GM, you choose what to share and under what circumstances, as a result of a Check or just part of the narrative. Every GM has their own style of maintaining this division of what is hidden and what is revealed.</p>"}, {"location": "1_Mechanics/02_GMGuide/#being-a-deck-of-adventures-game-master", "title": "Being a Deck of Adventures Game Master", "text": "<p>As a Deck of Adventures (DofA) Game Master (GM) you are controlling the flow of card draws on both sides of the table. Try to balance card draws between Players and NPCs throughout a session, and make sure all Players are involved.</p>"}, {"location": "1_Mechanics/02_GMGuide/#game-master-resources", "title": "Game Master Resources", "text": "<p>Game Masters (GMs) should have at least two decks of cards available during a session to represent allies and enemies. More decks may be useful to represent different groups in combat. If you only have one deck available, split it into two 26-card decks and shuffle regularly.</p> <p>One deck of cards should be designated the NPC Deck and one designated the World Deck. Different color card backs will help distinguish the two throughout play. The NPC Deck is used to draw Target Cards for NPCs, for their Actions, and when applying negative Status Conditions. The World Deck is used to make social checks, and to draw Target Cards representing items and objects in the world. Reshuffle the NPC Deck before each Combat. Reshuffle the World Deck empty.</p> <p>Most NPCs won't stick around long enough to use a deck completely, and therefore won't shuffle prematurely, which would invoke Lower Hand on Checks. For the exceptional NPC, such as a Dealer or a Boss, try assigning them a deck, if available. If unavailable, you can decide when to invoke Lower Hand behind the GM screen.</p>"}, {"location": "1_Mechanics/02_GMGuide/#managing-player-resources", "title": "Managing Player Resources", "text": "<p>Adventures can also be designed to test different aspects of the Players and characters. Each Player holds a single deck of 52 cards, with two Fate Cards reserved at the beginning of play. Each character has statistics that include total Health Points (HP), Power Points (PP), and Armor Points (AP). Your focus during a session will be balancing the expenditure of all of these resources.</p> <p>Absolute values are low in Deck of Adventures to promote speed of play and simplicity of calculations. With that in mind, Player controlled Dealer HP starts at 5, but scales with level and Vitality modifier. The theoretical maximum is 21 HP, at level 10 with a +6 Vitality modifier. Armor Points are similarly small, with a maximum of 3. Maximum Power Points may be larger at higher levels of play, the enemies that players face should require higher level Powers that balance out this scaling. Players will leverage all of their resources to survive and succeed in Adventures. As the GM, it is up to you to make those resources feel strained and tested.</p>"}, {"location": "1_Mechanics/02_GMGuide/#cards", "title": "Cards", "text": "<p>Think of the Players' decks as their characters' stamina. They should get progressively more tired throughout the day as cards are drawn for Checks and Powers. If a Player runs out of cards between Rests, they are Fatigued and reshuffle their deck. They then make all checks at Lower Hand until they complete a Rest. At lower levels, Players may not reach the end of their decks between Rests to incur Lower Hand penalties. As Players level up, both the Powers they use and the Encounters they face may require more draws, bringing them closer to running out. Some Players will go through cards more quickly than others. Keep this in mind when developing Encounters to challenge different Players.</p>"}, {"location": "1_Mechanics/02_GMGuide/#resting", "title": "Resting", "text": "<p>Health and Power Points are also balanced by Rests. Players can take a Quick Rest using 30 minutes of in-game time, or a Full Rest using 8 hours. Depending on the Encounters they face and the resources expended, Players may try to Rest more often. While Resting, the Players will regain their HP and PP, and expending Rest Cards. Keep these resources in mind when planning Encounters that deal damage. Try to keep Players motivated to press on, even without full resources.</p> <p>To Rest, Players will consult with the GM about whether it may be feasible to secure an uninterrupted break. Players can only use Rest Cards after a Rest has been successfully completed. If a situation is tense, it may not always be possible to gain the benefits of a Rest. In the event that a Rest is interrupted, it can be resumed based on the remaining time left and extended as necessary.</p> <p>For example, a Full Rest would be easy to secure at a comfortable inn in a major city. A temporary hiding spot in an enemy bandit camp would me much more risky. You could use (a) a Player Stealth Check (b) an enemy Detection Check, or (c) an Epic Event to see if the Rest is interrupted. As the GM, you have the ultimate authority in the successful completion of a Rest. Encourage players to work with each other to make the best decision given circumstances.</p>"}, {"location": "1_Mechanics/02_GMGuide/#character-vulnerabilities", "title": "Character Vulnerabilities", "text": "<p>Each character can have one or more Vulnerabilities, which may have mechanical and/or roleplay implications. GMs are highly encouraged to keep these Vulnerabilities in mind when designing Adventures. For Players, these are narrative seeds that can be cultivated into truly meaningful moments for the Players.</p> <p>For Player Vulnerabilities with more severe mechanical consequences, or those that could lead to dangerous situations, GMs should avoid planning too much around this weakness. The Players should feel like their Vulnerabilities add to the richness of the story, and that are ultimately rewarded for taking on the added challenge. A Vulnerability should feel both like an added difficulty and the source of heroism despite the odds. At its best, Vulnerabilities will inspire characters that develop over time, intertwining with a broader narrative.</p> <p>For NPCs, Vulnerabilities can add depth to an otherwise flat archetype of merchant or farmer. Are there Vulnerabilities that can work to challenge the values of Players? What foils can help Players flesh out their character by disagreeing with another character. Seeing a corruptible guard might really activate a character focused on justice. Enemy NPC Vulnerabilities also give Players something to exploit, through deeper analysis of the world. Yes, one Player can do consistent damage by continuing to attack, but another could spend a turn studying movements to learn that their adversary has an injury and can't defend against specific attacks. Perhaps an enemy has specific values or beliefs that could be used to turn them into an ally.</p>"}, {"location": "1_Mechanics/02_GMGuide/#running-a-session-with-deck-of-adventures", "title": "Running a Session with Deck of Adventures", "text": ""}, {"location": "1_Mechanics/02_GMGuide/#the-target-card-system", "title": "The Target Card System", "text": "<p>As a Game Master (GM), you will set up various challenges wherein you or a Player will draw a Target Card (TC), and the other draws against that card to make a Check. The level of difficulty of a Check is set by the Difficulty Range (DR), which is the distance between pip values that will still count as a success. When thinking about the Target Card System, it may be helpful to consider a bullseye, where the TC is the center and the DR is the number of circles away from the center you can hit and still be successful.</p> <p>One of the initial barriers a new GM must overcome is helping the Players understand this target system. As Players get more familiar with the system, speed of play increases, and it is then easier for them to understand more complex mechanics. Using the Circular TC-DR Tool is a helpful visual aid.</p> <p>The Target Card System is circular, so an Ace is only 1 away from both a King and a 2. If you were aiming a Check against a Target Card of an Ace, you could consult the below table to understand which cards would be successful within the set DR.</p> DR -6 -5 -4 -3 -2 -1 0 +1 +2 +3 +4 +5 +6 Card 8 9 10 J Q K A 2 3 4 5 6 7"}, {"location": "1_Mechanics/02_GMGuide/#successes-and-failures", "title": "Successes and Failures", "text": "<ul> <li> <p>Successes happen when the drawn card is within the DR. The character     making the Check is able to accomplish what they intended, within     reason.</p> </li> <li> <p>Misses happen when the drawn card is outside the DR. The character     making the Check is not able to accomplish what they intended.</p> </li> <li> <p>Critical Successes happen when the drawn card exactly matches the TC in     pip value and suit. At 2% chance, they should feel amazing for the     Player. Make an effort to reward these exact matches whenever possible     with additional effects or bonuses.</p> </li> <li> <p>Major Successes happen when the drawn card matches the TC in pip value     At 6% chance, this should feel pretty good. In Combat, a Major Success     increases the damage of the attack by 1. Out of combat, some smaller     bonus should happen whenever possible.</p> </li> <li> <p>Color and Suited Successes happen when the drawn card is within the DR     and matches the TC in color or suit.</p> </li> <li> <p>Fate Cards  permit a Dealer (Player character or significant NPC) to     redraw. If this changes the success state, the first draw should be     ignored.</p> </li> </ul>"}, {"location": "1_Mechanics/02_GMGuide/#difficulty-chart", "title": "Difficulty Chart", "text": "<p>As the GM, you set the Difficulty for all Checks made during a session. Setting the Difficulty Range (DR) is the GM's way of establishing how difficult something is to accomplish. The chart below shows probability of success for the most frequent draws at each Difficulty Range (DR). To further dial in the difficulty, you might say that a specific check requires a Color or Suited Success. Note that Color or Suit make success half or a quarter as likely. Some mechanics or GM rulings can call for Checks to be made at Upper or Lower Hand, potentially drawing additional cards, and taking the more or less beneficial result. The final row notes the difference caused by drawing 2 cards. At DR 0 or 6, there's little difference, but it can be as much as 25% for a DR 3 check.</p> DR 0 1 2 3 4 5 6 Normal Draw 8% 23% 38% 54% 69% 85% 100% Color Draw 4% 12% 19% 27% 35% 42% 50% Suit Draw 2% 6% 10% 13% 17% 21% 25% Lower Hand 2 1% 5% 15% 29% 48% 72% 100% Upper Hand 2 15% 41% 62% 79% 91% 98% 100% Difference 7% 18% 24% 25% 21% 13% NA <p>Keep this table as a handy reference for setting DRs throughout a session. Do you want something to feel extremely difficult? Maybe make it a DR 1. Should a Player feel like something is less challenging for their character in a moment where the odds are in their favor? Make it a DR 3 with Upper Hand. You decide what makes the most sense given a specific situation.</p>"}, {"location": "1_Mechanics/02_GMGuide/#player-skill-mods-and-dr-reporting", "title": "Player Skill Mods and DR Reporting", "text": "<p>Players will have Modifiers (Mods) on their Character Sheet that allow them to reduce the difficulty of Checks made in the relevant domain. A Modifier widens the DR, making it more likely their draw will be successful. In some circumstances, having a +1 Mod may be the difference between success and failure.</p> <p>Referencing the table above, it's clear to see the difference an additional DR +1 can make. As you progress Players through an Adventure, keep these Modifiers in mind when balancing Encounters and challenges. A Player with a +3 Mod facing a DR 3 Check is an automatic success on a Normal Draw. Scale difficulties up or down accordingly, but never punish a Player for having a high Modifier. If it is likely their character would be able to easily succeed on something, allow it rather than changing the Difficulty on the spot.</p>"}, {"location": "1_Mechanics/02_GMGuide/#fate-cards", "title": "Fate Cards", "text": "<p>Players start with 2 Jokers as Fate Cards and will randomly gain more as they draw their Aces. As the GM, you also reserve Fate Cards when controlling Dealers during a session. Fate Cards are opportunities for Players and Dealers to manipulate fate by allowing for a re-draw or avoiding damage. You can ask if a Player would like to use a Fate Card when they Miss or when they take damage. You can encourage Players to use these more often by giving additional Fate Cards to reward key moments of play. This can be a great tool for encouraging great roleplay or working together.</p>"}, {"location": "1_Mechanics/02_GMGuide/#skills-breakdown", "title": "Skills Breakdown", "text": "<p>Players will want to make Checks based on their characters' strengths. Their approach to a situation should determine the nature of a Check. As the GM, you have the final say as to which Skill applies. Attributes are meant to be more responsive/reactive, and are often used for Contested Checks. Skills are intended to be more active for character-initiated events.</p> <p>The list below provides of general information about the Attributes and Skills (see Full Player's Guide for more info).</p> <ul> <li> <p>AGL Agility: Dodging Contested Checks, boosts Unarmored AC.</p> <ul> <li>Finesse: Performing difficult physical actions with ease. Primary Skill   for Martial role.</li> <li>Stealth: Moving quietly, undetected.</li> </ul> </li> <li> <p>CON Conviction: Strength of character to resist harmful mental effects.</p> <ul> <li>Bluffing: Convincing others, either truthfully or deceptively.</li> <li>Performance: Acting under scrutiny, potentially in front of audiences.</li> </ul> </li> <li> <p>GUT Intuition: Gut feelings about the state of the world (e.g., truthfulness,   supernatural knowledge)</p> <ul> <li>Detection: Observing the world using all senses.</li> <li>Craft: Practicing a honed trade (i.e., Medicine, Pottery, Piety).   Primary Skill for Support role.</li> </ul> </li> <li> <p>INT Intelligence: Reactive critical thinking or recalling recalling explicit   information.</p> <ul> <li>Knowledge: Recalling and amassing knowledge at leisure. Primary Skill   for Casters.</li> <li>Investigation: Seeking the answer to a question or piecing together   information.</li> </ul> </li> <li> <p>STR Strength: Physical limits and boundaries (e.g,. resisting a push).</p> <ul> <li>Athletics: Exerting oneself in physical sustained challenge.</li> <li>Brute: Burst force or single lifts. Primary Skill for Defenders.</li> </ul> </li> <li> <p>VIT Vitality: Resisting bodily harm. Determines max HP.</p> </li> </ul>"}, {"location": "1_Mechanics/02_GMGuide/#contested-checks", "title": "Contested Checks", "text": "<p>Contested Checks are initiated when two characters attempt to accomplish opposite goals, or one character attempts to overcome the resistance of another (see Full Player Guide for more info).</p> <p>The list below features a few examples of Contested Checks, but, as the GM, it's up to you to decide what a situation calls for if it is not explicitly described in the guide or in a Power mechanic.</p> <ol> <li> <p>Tackle Target: Initiator Finesse vs. Target Athletics</p> </li> <li> <p>Convince Target, truthfully or deceptively: Initiator Bluffing vs. Target Detection or (if possessing relevant knowledge) Knowledge</p> </li> <li> <p>Sneaking past Target: Initiator Stealth vs. Target Detection</p> </li> <li> <p>Arm wrestle: Brute vs. Brute</p> </li> <li> <p>Impersonation: Initiator Performance vs. Target Detection or (if suspecting) Investigation</p> </li> </ol>"}, {"location": "1_Mechanics/02_GMGuide/#saves", "title": "Saves", "text": "<p>Saves occur when a character is attempting to resist or shrug off a negative effect (see Full Player Guide.</p> <p>When calling for a Save, choose the Attribute that is most relevant to the initiating effect. A character cannot choose to use a different Attribute.</p> <p>Because characters draw against their own TC, Saves will never be a Critical Success. You can choose to add an additional effect to a Major Success.</p> <p>While all saves will have effects for failure, some may still have effects on success, such as half damage. Refer to the specific wording of the initiating effect.</p> <p>If an environmental effect initiates a Save, you determine the DR and Attribute as the GM. If an effect would cause a character to attempt to resist it to avoid damage or a Status Condition, that character should make a Save.</p>"}, {"location": "1_Mechanics/02_GMGuide/#epic-events", "title": "Epic Events", "text": "<p>Epic Events are unique, time-gated scenarios that can occur throughout an Adventure. As the Game Master (GM), you determine when an Epic Event will happen, set the Difficulty, and decide the stakes.</p> <p>Epic Events invoke a specific set of rules for determining the outcome, which is different than traditional combat, social interaction, or exploration. These are typically very draining on Player stamina (remaining decks), and could be a tool to engage resource management. This is also is a good way to engage all Players in faster-paced, more free-form roleplaying. Since Players can't make a Check two times in a row, it requires active dialogue, planning, and participation from every Player.</p> <p>As the GM, you are actively drawing against the Players on a TC during the Epic Event. The odds are skewed in the Players' favor by allowing them to draw using Skill Modifiers while you draw with a +0 Mod. Your ability to modify the challenge of an Epic Event comes from setting the Difficulty.</p> <p>For more information on Epic Events, visit the Full Player's Guide</p>"}, {"location": "1_Mechanics/02_GMGuide/#how-to-identify-an-epic-event", "title": "How to Identify an Epic Event", "text": "<p>Epic Events often occur within a limited time frame, typically less than a minute, and typically no more than twice per session. This could be a fleeing event under some thread of harm (e.g., a crumbling dungeon or an erupting volcano), or an unexpected smaller scenario (e.g., preventing an uncontrolled vehicle from crashing). It can cover a small scope (e.g, a moment of surprise that begins a larger battlefield), something larger (e.g., replace an entire combat), or even be used to shrink longer periods of time into manageable pieces (e.g., dealing with the storms and resource management of travel across a sea). As GM, you will get a feel for what makes for a good Epic Event, and how to place it in your narrative to keep the session feeling fresh and lively for all of your Players.</p>"}, {"location": "1_Mechanics/02_GMGuide/#setting-an-epic-events-difficulty", "title": "Setting an Epic Event's Difficulty", "text": "<p>The GM sets the difficulty ahead by announcing how many Successes will be needed before 3 Failures. Setting a difficulty of 4 means that the Players need to make 4 successful Checks before reaching 3 failures.</p>"}, {"location": "1_Mechanics/02_GMGuide/#deciding-the-stakes", "title": "Deciding the Stakes", "text": "<p>Going into an Epic Event, there is no guarantee of Success, even at lower Difficulties. Try to balance the outcomes based on the scope of the Epic Event. Not all Epic Events are life-or-death scenarios, and consequences can vary depending on the number of success before 3 failures.</p> <p>If Players get 3 Failures trying to escape a collapsing dungeon, they may take a little damage, discard some cards, or lose a precious object in the fray. Likewise, if the Players are successful without any failures, the reward for their success can be balanced accordingly.</p>"}, {"location": "1_Mechanics/02_GMGuide/#an-example-of-an-epic-event", "title": "An Example of an Epic Event", "text": "<p>The Players hear screaming ~ 100 ft away, and rush to investigate. They see a group of townsfolk being attacked by a group of monsters. Each of the townsfolk is engaged with a different monster. The difficulty is set to 3, and 5 target cards are drawn. The Players then declare which skill they will use to save one of the townsfolk, and must make a suited hit before the GM does to succeed on each TC.</p> <ul> <li> <p>The Defender chooses Brute, and intends to ram into a monster while the   townsperson gets away. The GM decides a corresponding DR of 3 on a 9 of   Hearts Target Card (TC). The Defender draws a 6 of Hearts and, with the   Defender's +2 to Brute, this is a Suited Success and a success on the first   Epic Event challenge.</p> </li> <li> <p>The Support wants to protect a townsperson using their magic via Craft, with   a +1 modifier. The GM rules this more difficult, with a DR 2 on a 7 of   Clubs TC. The Support draws a 3 of Diamonds, which is a miss. The GM then   draws, without a modifier, against this same TC. They draw a 6 of Spades;   also a miss. Support and GM each take turns drawing until until the Support   draws a 5 of Clubs, which is a success.</p> </li> <li> <p>The Martial wants to sneak up to a monster and help the townsperson escape,   using Stealth. The GM sets a DR 2 on the Jack of Spades TC. The Martial   draws first, and misses. The GM draws a King of Spades. As the GM got a   Suited Success, this is the first failure for the Players.</p> </li> <li> <p>The Caster and Support both go for the fourth TC together, each with their   primary skill modifier. The DR is set to a 3, and they each draw first,   missing the TC. The GM draws, and misses. The Caster misses again, but uses   a Fate Card to re-draw and draws a suited hit. This marks a 3rd success for   the Players, which ends the Epic Event.</p> </li> </ul> <p>The Players watch as the monsters retreat, having saved the majority of the townsfolk. Due to the one failure, one of the townsfolk has been gravely injured and was dragged away with the monsters as they retreated. The Players can choose to follow after the monsters or regroup with the townsfolk they saved. This might result in a reward from the local government for saving lives, or kick off a new Adventure that involves seeking out the monsters.</p>"}, {"location": "1_Mechanics/02_GMGuide/#combat", "title": "Combat", "text": "<p>Deck of Adventures (DofA) combat is meant to be fast-paced, collaborative, and accessible. It is designed around a simple core, while allowing for a lot of player freedom based on how they built their character. To run combat in DofA successfully, you should plan encounters thoughtfully and be able to adapt on the fly when Players make unexpected strategic decisions.</p> <p>Some sessions may be very focused on combat, with 3-4 combat encounters between Full Rests, while others will be more roleplay-oriented. As the Game Master (GM), you decide what mix is best for your table. Some Players may be more interested in combat, while others get excited and engaged with good social roleplay, and it is up to you as the GM to balance the interests of the Players at the table.</p>"}, {"location": "1_Mechanics/02_GMGuide/#initiating-combat", "title": "Initiating Combat", "text": "<p>You choose when to declare the beginning of Combat, and this triggers the start of Combat Turn Order. The start depends entirely on the scenario. It might begin when the Players decide to attack an enemy, or when an enemy decides to attack the Players.</p> <p>To determine Turn Order, every Player will draw a Target Card for themselves. As the GM, you will draw a TC for each Minion and Dealer involved in the Encounter, including any new enemies that appear throughout Combat. To simplify, a group of Minions might have a single TC, but a Dealer must always have their own TC.</p>"}, {"location": "1_Mechanics/02_GMGuide/#strengths-and-weaknesses", "title": "Strengths and Weaknesses", "text": "<p>There are ways to build encounters that allow the Players to highlight their character's strengths or Vulnerabilities. If a Player recently took a new Power, you might build an encounter to give them a chance to shine. A new area of effect Power would be feel great to deploy on a swarm of smaller enemies. If a Player has the Wanted Vulnerability, you might introduce the faction hunting them, who might approach the Players as hostile. Can the Players talk their way out of the situation, or will they choose to fight?</p>"}, {"location": "1_Mechanics/02_GMGuide/#setting-up-combat-encounters", "title": "Setting up Combat Encounters", "text": "<p>You decide what types of Combat Encounters you want to run during a session. Players could be matched against a single strong foe. Many smaller enemies might have the players torn in different directions. A single Dealer with supporting Minions might have interesting interaction effects, where one gains benefits in the presence of the other.</p> <p>GMs should try to include a mix of roleplay and combat in an Adventure, when possible. Storming an enemy fortress may result in several Combat Encounters back to back. Investigating a crime in a major city may have more social investigation-based with relatively little combat.</p>"}, {"location": "1_Mechanics/02_GMGuide/#moving-in-space", "title": "Moving in space", "text": "<p>Deck of Adventures is designed to be playable using either imperial or metric units, on either a square grid or hex map. For units, treat 1 space as either 5 feet or 1 meter. You choice of map can impact diagonal movement and area of effect. Following the Player Guide , moving diagonally on a grid is assumed to be the same as moving horizontally. You could alternatively decide that players are limited to 2 diagonal moves per round of combat, or that a diagonal move is worth 1.5 speed.</p> <p>To measure area of effect (AOE), refer to the images provided in Visual Tools. Powers will define an AOE by it's shape and size (e.g., Cone 3). Here, we us N to define each shape at any size.</p> <ul> <li> <p>Line: Pick an edge of the space of the character or object causing this effect.   Draw a straight line perpendicular to this edge N spaces long. Any space touched by   this line is affected.</p> </li> <li> <p>Aura: Unless otherwise specified, the point of origin is assumed to be the   character or object causing the effect. A circle is drawn around this point. Any space   caught overlapping with this circle is affected.</p> <ul> <li>On a grid map, the radius of this circle is at the far edge of the Nth space   away from the point of origin.</li> <li>On a hex map, the radius of this circle is at the far edge of the line segment   pointing in the direction of the point of origin.</li> </ul> </li> <li> <p>Cone: Pick an edge of the space of the character or object causing this effect.   The radius is measured from the center point of this edge, with additional lines drawn   to endpoints of the arc. Any space caught overlapping with this arc is affected.</p> <ul> <li>On a grid map, the radius extends N squares away from the origin, with lines   drawn to the corners of the squares included in a perpendicular line N squares   long.</li> <li>On a hex map, the radius extends N minus .5 hex away from this origin, with   lines drawn to the far-most corners of the hex touched by a straight line N hex   long, perpendicular to the radius.</li> </ul> </li> </ul>"}, {"location": "1_Mechanics/02_GMGuide/#character-types", "title": "Character Types", "text": "<ul> <li> <p>Minions are enemies that are weaker than the Players. They often have     lower HP, and cannot take Powers or Vulnerabilities. They do not have     access to Fate Cards, and draw from a single GM deck.</p> </li> <li> <p>Dealers are just as powerful as, or more powerful than, the Players.     They have a name, and experience that would lend them power. GMs     might draw from a separate deck of cards for each Dealer. Each starts     with one Fate Card, and reserves Aces when drawn. Dealers can also take     Powers and Vulnerabilities, and may possess items. See below for how to     turn a Dealer into a Boss.</p> </li> <li> <p>Bystanders are allied or neutral characters that exist throughout the     world, as anything from a store owner to noble ambassador. These     characters are typically on par in power with Minions, and may be     persuaded to join Players in combat as Companions or GM controlled     Dealers.</p> </li> <li> <p>Companions are Player-controlled creatures who can be commanded with an     Action. Players can invest in Powers to make their Companion more     powerful. A GM might also grant a temporary Companion as part of an     Adventure, potentially as a result of a Check, or an exchange for other     money or items.</p> </li> <li> <p>Bosses are even more powerful than Dealers, and gain the following     benefits: Adversary Actions, House Actions, and Phases.</p> </li> </ul>"}, {"location": "1_Mechanics/02_GMGuide/#creating-a-boss-encounter", "title": "Creating a Boss Encounter", "text": "<p>Boss Encounters are best saved for the end of Adventures, as a culmination of the the story thus far. As the GM, you choose what Actions they have access to.</p>"}, {"location": "1_Mechanics/02_GMGuide/#adversary-actions", "title": "Adversary Actions", "text": "<p>An Adversary Action is a Boss ability that takes place outside their turn during Combat to help balance encounters where a single Boss might be facing up to 6 Players. This helps Players feel a sense of danger from a single enemy. Adversary Actions may be related to resource replenishment, like allowing a Boss to recover a small amount of HP or gain Power Points. They may allow for an additional attack, or an environmental effect involving a Check for the Players. Players who fail might take damage or receive a Status Condition like Entangled.</p> <p>For example, a poisonous monster would have the following Adversary Action: Acid Splash. A cloud of acid appears in a 4 space cube. Any creature inside  the cube at the start of their turn makes a DR 3 Agility Check or take 2  damage. On a success, 1 damage.</p>"}, {"location": "1_Mechanics/02_GMGuide/#house-actions", "title": "House Actions", "text": "<p>House Actions take place when a Boss is in their home or base of operations. Once initiated, they happen at the beginning of every round of combat. This is a great way to add in dynamic elements to an encounter, such as new enemies appearing or the environment becoming more dangerous.</p>"}, {"location": "1_Mechanics/02_GMGuide/#boss-phases", "title": "Boss Phases", "text": "<p>Dealers often have &lt; 10 HP. For balance, Boss Encounters can have multiple Phases. After running out of HP, they replenish and changes their approach. Every time a Boss enters a new Phase, draw a new TC for them. The following list features a number of examples that might be triggered by a new Phase:</p> <ul> <li>Boss escapes to another location</li> <li>Boss summons Minions</li> <li>Boss alters the environment to make certain areas<ul> <li>cause damage (e.g., erupting flame)</li> <li>require a check (e.g,. Agility check to stay standing on ice)</li> </ul> </li> <li>Boss disappears, and reappears<ul> <li>when Minions have been defeated</li> <li>after a set number of rounds</li> <li>after an environmental effect dissipates</li> </ul> </li> <li>Boss changes features like<ul> <li>core stats</li> <li>higher or lower AR</li> <li>drawing with Upper Hand (e.g., putting in more effort)</li> <li>drawing with Lower Hand (e.g., getting angry/sloppy)</li> </ul> </li> </ul>"}, {"location": "1_Mechanics/02_GMGuide/#example-combat-encounter-designed-for-4-players-at-level-2", "title": "Example Combat Encounter designed for 4 Players at Level 2", "text": "<p>In a longer campaign, mix up the types of encounters to see how Players react and interact with each other. This will keep things fresh so combat keeps Players engaged over time. Here, the context is kept purposefully blank to fill in with your setting.</p> <p>Location. Start with a wide open space for the Players and enemies to move   around in, between 10-20 spaces across to allow for movement and let the   range influence Player tactics.</p> <p>Setup. Add 4 Minions close to the entrance and 1 Dealer farther away. 2   Minions are melee guards and 2 are shooters 3-5 spaces away, to force the   Players to choose their targets and allow space between each enemy. The   Players will need to deal with the Minions first in order to reach the   Dealer, allowing the Dealer to use their abilities in the first 2+ rounds.</p>"}, {"location": "1_Mechanics/02_GMGuide/#stat-blocks", "title": "Stat Blocks", "text": "<p>Every creature has a set of statistics that govern their actions in the game. Consult their stat block in the Bestiary to learn their strengths and weaknesses, and what actions they can take in combat.</p>"}, {"location": "1_Mechanics/02_GMGuide/#items", "title": "Items", "text": ""}, {"location": "1_Mechanics/02_GMGuide/#standard-currency", "title": "Standard Currency", "text": "<p>Every setting may have its own currency and economy, but in Deck of Adventures the standard recommendation is to use a system based on rare metals or minerals. Diamond, Gold, Silver, and Copper Pieces are useful breakdowns, and can be modified as needed to fit your setting.</p> <p>By default, currencies are at a 1:10 ratio with the next-most valuable counterpart: 1 Diamond Piece (dp) = 10 Gold Pieces(gp), 1 Gold Piece = 10 Silver Pieces (sp), and 1 Silver Piece = 10 Copper Pieces (cp). When creating your own currency, use the below tables as a reference for adapting these items to your setting.</p> <p>The GM can grant currency as a reward for completing an Adventure, defeating an Encounter, and general exploration and adventuring. You can show your Players the tables below, or encourage them to seek out merchants to acquire new items using the currency they've earned. Leverage the Player's desire to continue to strengthen their character by offering them opportunities to earn more currency during their Adventures, and reward strong roleplay, barter skills, and careful exploration and examination with additional currency.</p>"}, {"location": "1_Mechanics/02_GMGuide/#starting-items", "title": "Starting Items", "text": "<p>All characters start with a basic set of items, depending on choices made at Character Creation. This may be setting dependent. A high fantasy campaign may start characters with a Magic Item, while others may simply start the characters with a Standard Weapon and Light Armor. Determine what makes the most sense for your world.</p> <p>The general starting items in Deck of Adventures include a standard weapon, simple armor, an Adventuring Pack, a Trinket and 50 gp.</p> <p>Adventuring Pack contains the following:</p> <ul> <li>1 Bedroll</li> <li>1 Rations Kit (contains 10 meals)</li> <li>5 Torches</li> <li>1 Flint &amp; Tinder</li> <li>1 Flask</li> </ul> <p>Trinkets are simple items, low in monetary value, that are meaningful to the   character and may be a part of their backstory. Examples include:</p> <ul> <li>a small statue</li> <li>a bauble from childhood</li> <li>a broken dagger</li> <li>a worn painting or image</li> <li>an old letter</li> </ul> <p>Work with your Players during Character Creation to generate a list of Starting Items that make sense for their character. Take their Vulnerabilities into account as well. Would an Outsider carry something significant to their people? Maybe a character with the Frail Vulnerability would carry a cane with them of some significance.</p>"}, {"location": "1_Mechanics/02_GMGuide/#weapons", "title": "Weapons", "text": "<p>Weapons are one way to damage in combat. The quality of that weapon determines how much damage.</p> <p>Weapon Quality Table</p> Damage Descriptor Average Cost 1 Standard 15 sp 2 Improved 25 gp 3 Heroic 25 dp 4 Legendary 100 dp <p>Characters with high quality weapons are able to deal damage quickly, so keep this in mind when balancing Encounters or granting Players loot as they Level Up. The average costs are meant to guide you as to when Players can expect to afford each, but these can be given as rewards or made available at any price.</p>"}, {"location": "1_Mechanics/02_GMGuide/#armor", "title": "Armor", "text": "<p>Armor and Agility Modifiers are the only way for characters to alter their base Armor Range (AR). For characters with low Agility, wearing Armor will help them avoid attacks in combat.</p> <p>Base AR for an unarmored character is 3. Wearing Armor reduces this AR depending on Type. Some have Strength Requirements in order to wear. A character who ignores this requirement may only use their movement speed and must make all Agility, Finesse, and Stealth Checks at Lower Hand.</p> <p>Armor Type Table</p> AR Armor Type AP Prerequisite Average Cost 3 Unarmored 0 - - 3 Light 0 - 5 sp 2 Medium 0 - 20 sp 2 Fortified 1 Strength \u2265 0 15 gp 1 Heavy 2 Strength \u2265 1 50 gp 1 Massive 3 Strength \u2265 2 20 dp 1 Gleaming 2 Agility \u2265 3 100 dp <p>Characters may start with Light Armor at Level 1, but must acquire other armor over the course of their Adventures, either through purchase or reward.</p> <p>Some armor and items also grant Armor Points (AP). Items like Shields can provide AP when readied using an Action, while other types of Armor may have magical effects that provide AP (see Magic Items). Shields can be purchased and can be found in varying quality.</p> <p>Shield Quality Table</p> AP Descriptor Average Cost 1 Standard 5 sp 2 Hardened 10 gp 3 Impervious 25 dp"}, {"location": "1_Mechanics/02_GMGuide/#general-items", "title": "General Items", "text": "<p>When Players venture into a town or city, they will expect to find a store available that will sell them General Goods. The items they find here are up to the GM's discretion, but below is a list of items and their general costs.</p> <p>General Items Table</p> Item Name Cost Hammer 5 cp Backpack 8 cp Empty Vial 2 cp Canvas Pouch 2 cp Tent 1 sp Torches 5 cp Flint &amp; Tinder 5 cp Bedroll 8 cp Rations Kit 5 cp Flask 1 sp Lantern 2 sp Mirror 1 sp Crowbar 1 sp"}, {"location": "1_Mechanics/02_GMGuide/#tools", "title": "Tools", "text": "<p>Tools are useful items that a character can use to perform certain Checks more easily. A character who uses a Tool to perform a Check may draw with the Upper Hand. General domains and trade skills will use a specific tool to make a Check. These are listed below.</p> <p>Tools Table</p> <p>Various professions in the world require tools for their craft. To attempt a Check in a relevant profession, you must be in possession of that profession's tools or you make your Check at the Lower Hand. These tools can often be found in a General Store, though in some settings some professions' tools may be harder to find.</p> Profession Name Cost Blacksmith 1 gp Locksmith 1 gp Chef 5 sp Carpenter 5 sp Sailor 2 sp Leatherworker 5 sp Clothier 1 gp Navigator 2 sp Alchemist 3 sp Herbalist 2 sp Mountaineer 3 sp Jeweler 1 gp Cartographer 1 gp"}, {"location": "1_Mechanics/02_GMGuide/#consumables", "title": "Consumables", "text": "<p>Consumables are one-time use items that grant a specific effect,  usually during a set duration of time. These can include Potions, Charms,  Meals, and Ammunition. See below for how to use these Consumables in game.</p> Consumable Type Use Time General Properties Potions Minor Action Short term effects, usually a single effect. Charms Major Action Medium-term effects, more complex effects. Meals 10 minutes Long-term effects, enough to last most of a day. <p>These items may vary in supply and cost depending on where the Players are looking. In a desolate town that only has a trader pass through once every year, these items might be in short supply. In a wealthy merchant district of a major city, they would be easy to find.</p> <p>It is up to the GM which Consumables to make available, and when. The reason to grant access to Consumables over Magical Items is to allow the Players to feel like they've gotten something valuable and powerful, but they need to be strategic in when to use it. These can create memorable moments of an Adventure without permanently altering the balance of power.</p> <p>The Consumables listed below draw from a selection of possible Consumables and their Effects that you can add to your game. Feel free to create your own Consumables and ask the Community for help as needed.</p> Consumable Name Cost Effect Duration Potion of Healing 2 gp Regain 1 HP immediately Potion of Water Breath 5 gp You are immune to the Suffocating Status Condition 1 hour Potion of Extended Breath 2 gp Your ability to hold your breath is extended by 60 minutes 1 hour Potion of Strength 15 gp Gain +1 to all Strength-based Checks 1 min Potion of Agility 15 gp Gain +1 to all Agility-based Checks 1 min Potion of Conviction 15 gp Gain +1 to all Conviction-based Checks 1 min Potion of Intelligence 15 gp Gain +1 to all Intelligence-based Checks 1 min Potion of Intuition 15 gp Gain +1 to all Intuition-based Checks 1 min Potion of Vitality 2 dp Gain +1 Maximum HP and +1 to all Vitality-based Checks 1 min Charm of Efficiency 6 dp You cannot draw with Upper or Lower Hand 1 hour Charm of True Aim 4 dp All Attacks are made with Upper Hand 1 hour Charm of Amplification 5 dp All Upper Hand and Lower Hand effects are doubled 1 hour Charm of Wounding 3 dp When dealing damage with an Attack or Power, add +1 damage to the total 1 hour Hearty Stew 1 dp Gain +1 HP and +1 to your Maximum HP 8 hours Focusing Beverage 1 dp Gain +1 HP and +1 to your Maximum PP 8 hours Fortifying Feast 1 dp Gain +3 AP immediately. For the duration, if you end your turn with 0 AP, return to 1 AP 8 hours"}, {"location": "1_Mechanics/02_GMGuide/#magic-items", "title": "Magic Items", "text": "<p>Some items can have additional effects granted while wielding them, such as modifying damage on a Suited Hit or granting additional effects on a Major Success.</p>"}, {"location": "1_Mechanics/02_GMGuide/#upgrading-items", "title": "Upgrading Items", "text": "<p>Some items can be upgraded with the proper materials. A Standard Weapon or Light Armor can be modified to higher quality levels, and they can also be outfitted with magical upgrade materials as well. These materials are an optional addition to any GM's setting, and they are very straightforward ways to reward your Players during an Adventure with clear upgrades to existing items so they don't have to replace items often. For example, a gemstone attached a weapon causes an additional 1 damage. Attached to armor, the same gemstone might grants +1 Max PP or HP.</p>"}, {"location": "1_Mechanics/03_CharacterCreation/", "title": "Character Creation", "text": ""}, {"location": "1_Mechanics/03_CharacterCreation/#create-your-dealer", "title": "Create Your Dealer", "text": "<p>Players and GMs both control Dealers. A Dealer is someone who is in charge of their own fate, and likely plays using their own unique deck. Players are able to level up their Dealers by playing in Adventures, and GMs can set the level of their Dealers to best balance Encounters during a session.</p> <p>Every Dealer can take Powers and Vulnerabilities, and has Attribute and Skill Modifiers that impact their ability to interact with the world around them.</p> <p>Outlined below are the steps to building a Dealer as part of Character Creation. GMs can find additional advice on how to create a GM Dealer in the GM Guide</p>"}, {"location": "1_Mechanics/03_CharacterCreation/#decide-your-background", "title": "Decide Your Background", "text": "<p>First, choose where your character is coming from including your lived experiences that would motivate adventuring. Classically, this is a 'racial' or species origin (e.g., Dwarves, Humans, or Elves of Fantasy) that fits with the GM's setting. This has no inherent mechanical impact, but may shape how your character navigates challenges. Growing up at a seaport, your character might be more adept at sailing (i.e., certain Skill Checks) than others. Coming to a new land as an outsider might be a Vulnerability, as described below.</p> <p>Characters beginning their journey at Level 1 are relatively unskilled. They may have had one profession for many years, but should not have significant experience adventuring or traveling beyond the borders of the comfort zone shared by their peers. Work with your GM if you feel your character would have specific experience related to their background.</p>"}, {"location": "1_Mechanics/03_CharacterCreation/#choose-your-role", "title": "Choose Your Role", "text": "<p>Your Role describes how your character navigates challenges. While a Defender might apply force, a Caster might find a more magical solution. Choosing a Role grants you access to specific Powers. Each Role has a skill they use to attack in combat (e.g., Brute or Knowledge). You can switch your Role later on, but must forfeit Powers with a prerequisite Role in exchange for the points previously spent.</p> <ul> <li>Caster<ul> <li>Description: Casters can be mages of fantasy or techno-wizards of a much more mundane world. Their intellect drives them to skills the rest of us can barely comprehend.</li> <li>Primary Attribute: Intelligence</li> <li>Suggested Primary Skill: Knowledge</li> <li>Example Powers: Attack, Mystic Aura, Slow</li> </ul> </li> <li>Defender<ul> <li>Description: Defenders can take a hit and keep protecting their allies. They focus more on battlefield control during combat than outright damage. Not someone to mess with!</li> <li>Primary Attribute: Strength</li> <li>Suggested Primary Skill: Brute</li> <li>Example Powers: Shield, Self, Attack, Sweep</li> </ul> </li> <li>Martial<ul> <li>Description: Martials move quick and hit hard. They're adept with physical weapons to directly damage enemies. Agile and light on their feet!</li> <li>Primary Attribute: Agility</li> <li>Suggested Primary Skill: Finesse</li> <li>Example Powers: Attack, Charge, Attack, Dual Wield</li> </ul> </li> <li>Support<ul> <li>Description: Attending to their allies, support characters may focus on healing or other boons to sway the battle in their favor. We're all stronger thanks to the support of our friends.</li> <li>Primary Attribute: Intuition</li> <li>Suggested Primary Skill: Craft</li> <li>Example Powers: Lend Vigor, Attack, Mystic Entangle</li> </ul> </li> </ul>"}, {"location": "1_Mechanics/03_CharacterCreation/#using-experience-points-xp", "title": "Using Experience Points (XP)", "text": "<p>At character creation (6) and for each level up (3), you are awarded Experience Points. These points can be spent to gain additional Powers, boost an Attribute or a Skill, or remove a Vulnerability. Total XP is equal to 6 + (Level * 3). You may have leftover XP after a level up, but your XP can never be negative.</p> <p>On level up, a GM may allow you to re-specialize (known as respec). This allows you to exchange Powers for their equivalent XP value, and reduce any Attributes or Skills down to 0. You may also choose at this time to change your Role, though you can no longer access any Powers that require your old Role.</p>"}, {"location": "1_Mechanics/03_CharacterCreation/#choose-your-powers", "title": "Choose Your Powers", "text": "<p>Powers are your way of amplifying your character both on and off the battlefield, covering simple abilities like swinging a weapon to complicated magical feats. Some Powers require a specific Role, prerequisite levels or relevant Attribute/Skill Modifiers. These are listed in each Powers description.</p> <p>Each Power has an associated XP cost to add to your character. Passive mechanics, or Minor magical tricks typically cost 1 XP. Big, character-altering feats will cost more.</p> <p>Major Powers are tiresome and require a limited resource to use: Power Points (PP). Each Power will list the PP that must be spent to use the Power. Some Powers allow for different effects depending on the PP expended (e.g., 1 PP to target one enemy vs. 2 PP to target multiple). The more PP spent, the bigger the effect. Numbers separated by <code>or</code> in the mechanics description indicate different effects depending on PP spent.</p> <p>Adding a Power with a PP cost also raises the character's maximum PP by the largest number of PP listed for that Power. This means when you add a new Power you automatically gain enough PP to use it once. PP are replenished on a Rest.</p> <p>Unless otherwise noted, Powers...</p> <ol> <li> <p>Take a Major Action to perform and use a Dealer's Primary  Skill Modifier.</p> </li> <li> <p>That have sustained effects, may only be used one at a time. Passive Powers take no action and are always in effect.</p> </li> <li> <p>That damage, deal 1 point of damage.</p> </li> <li> <p>That have implied range, may be used up to 6 spaces away.</p> </li> </ol>"}, {"location": "1_Mechanics/03_CharacterCreation/#choose-your-vulnerabilities", "title": "Choose Your Vulnerabilities", "text": "<p>People are not perfect, and many have Vulnerabilities as a result of their relationship with the world. At character creation you can choose up to four Vulnerabilities, which add mechanical and roleplay implications, like being afraid of fire or unable to swim. Adding Vulnerabilities to your character will grant you additional Experience Points during character creation. Each Vulnerability added grants 1 (Minor) or 2 (Major) Experience Points, but you can only gain 4 total Experience Points during character creation. A GM may overrule this limit if, for example, the events of the story result in a character gaining an additional Vulnerability.</p> <p>When roleplaying your character, keep these Vulnerabilities in mind. How do they shape the way your character interacts with the world, and how might this affect their relationships with others?</p> <p>Vulnerability types:</p> <ul> <li>Minor: Adds 1 XP</li> <li>Major: Adds 2 XP</li> </ul> <p>Some Vulnerabilities can be either Minor or Major, depending on the effects you choose. Work with your GM if a Vulnerability has story implications (e.g., Hunted or Outsider).</p>"}, {"location": "1_Mechanics/03_CharacterCreation/#modifying-attributes-and-skills", "title": "Modifying Attributes and Skills", "text": "<p>All Attributes and Skills start at a 0 Modifier. You can adjust your Skills and Attributes using your Experience Points (XP), which will help define how capable your character for relevant actions. On initial character creation, you can spend or earn points by increasing or decreasing Attributes and Skill Modifiers up to -2 or +2 at Level 1. This upper limit increases as you level up (see table below). Once modifiers are set at character creation, a player may only add newly awarded Experience points.</p> <p>Mod Cap by Level</p> Level SkillCap 1 2 2 2 3 3 4 3 5 3 6 4 7 5 8 5 9 5 10 6 <p>The lower limit for Modifiers is -2. If a Modifier is -1, any Check made with that modifier must be be a Color Match for success. If -2, any Check made with that modifier must be a Suited Match for success.</p> <p>When modifying an Attribute, the related Skills are affected as well. This means that boosting Strength to a +1 will also add a +1 to Brute and Intimidation. Reducing an Attribute by -1 also reduces the related Skills by -1.</p> <p>Raising an Attribute Modifier by +1 initially costs 2 Experience Points. Raising a Skill Modifier by +1 initially costs +1 Experience Point. In both cases, raising modifiers becomes more costly as you add. The table below shows the cost in Experience Points and the resulting modifier for Attributes and Skills.</p> <p>XP Cost for Attributes (left) and Skills (Right)</p> XP Cost AttribMod XP Cost SkillMod -4 -2 -2 -2 -2 -1 -1 -1 0 0 0 0 2 1 1 1 4 2 2 2 8 3 4 3 12 4 6 4 18 5 9 5 24 6 12 6"}, {"location": "1_Mechanics/04_Powers/", "title": "Powers", "text": ""}, {"location": "1_Mechanics/04_Powers/#boss-only", "title": "Boss-Only", "text": "<p>Manifest Terrain</p> <ul> <li>Mechanic: Major. For 1 PP, you change the area around you to an ensnaring landscape. On starting turn, target(s) make a DR 2 AGL Save. On fail, target(s) Entangled.</li> <li>AOE: Aura 2</li> </ul> <p>Undying</p> <ul> <li>Mechanic: Passive. This creature cannot be killed by traditional weapons. On reaching 0 HP, this creature goes into a stasis. The following day, they return to 1 HP. A GM determines the corresponding Vulnerability that counteracts this effect.</li> </ul> <p>Undying Vulnerability</p> <ul> <li>Mechanic: Vulny. When the creature is exposed to this Vulnerability, they take 1 damage. While the creature is at 0 HP, when they are exposed to this Vulnerability they are instead killed. A GM determines the nature of Vulnerability that a creature possesses to trigger this effect, such as exposure to sunlight.</li> </ul> <p>Stunning Glare</p> <ul> <li>Mechanic: Major. Force one target within range to make a DR 2 CON Save. On a failure, they take 2 damage and are Stunned. On a success, they take half damage and are not Stunned.</li> <li>Range: 10</li> </ul> <p>Drain Life</p> <ul> <li>Mechanic: Major. Force all targets within Aura 2 to make a DR 2 VIT Save. On a failure, they take 1 damage and the Boss is healed for the total amount of damage dealt.</li> <li>AOE: Aura 2</li> </ul> <p>Grant Invisibility</p> <ul> <li>Mechanic: Major. Target a creature within range. That creature gains the Invisible condition.</li> <li>Range: 10</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#adversary-actions", "title": "Adversary Actions", "text": "<p>Ally Swap</p> <ul> <li>Mechanic: Adversary. Choose a friendly creature within 10 spaces and swap places with them. That creature can then make one Attack, Weapon to a creature within 1 space after the swap is complete.</li> </ul> <p>Adversary Major Action</p> <ul> <li>Mechanic: Adversary. Once per round, you make take an additional Major Action after a Dealer's turn.</li> </ul> <p>Drain Stamina</p> <ul> <li>Mechanic: Adversary. All creatures within 2 spaces make a DR 2 GUT Save. On a failure, discard 2 cards.</li> <li>AOE: Aura 2</li> </ul> <p>Phase Shift</p> <ul> <li>Mechanic: Adversary. Choose a space within 10 spaces and move there instantly.</li> </ul> <p>Shake Enemy</p> <ul> <li>Mechanic: Adversary. Choose a creature within 10 spaces. They make a DR 2 CON Save. On a failure, their next check will be made at Lower Hand.</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#house-actions", "title": "House Actions", "text": "<p>Summon Ally</p> <ul> <li>Description: Your authority allows you to call for reinforcements.</li> <li>Mechanic: House. Select N creatures from the Bestiary and summon them to the battlefield. The GM determines how many creatures are summoned.</li> </ul> <p>Amplify Ally</p> <ul> <li>Description: Move the chess pieces on your board.</li> <li>Mechanic: House. Select one ally. They can immediately move up to 4 spaces and take one Action.</li> </ul> <p>Wall Grab</p> <ul> <li>Description: Even the walls of your House obey you. Hold still!</li> <li>Mechanic: House. All creatures within 2 spaces of a wall must make a DR 2 AGL Save. On a failure, they take 1 damage and are Entangled.</li> </ul> <p>Obey Me</p> <ul> <li>Mechanic: House. For 2 PP, enthrall an enemy. On starting turn, target(s) make a DR 2 CON Save. On fail, target(s) must move up to 4 spaces and/or take one Major Action at your direction on each turn. On success, target(s) end effect.</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#combat", "title": "Combat", "text": "<p>Staggering Blow</p> <ul> <li>Description: Getting something to stay still is just a matter of applying pressure in the right spot. Or hitting that spot really hard.</li> <li>Mechanic: Major. For 1 PP, Make a Weapon Attack against a creature. On a successful hit,, target(s) make a VIT Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) Stunned.</li> <li>XP: 2</li> <li>Range: 1</li> <li>Prereq Role: Defender</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Brute &gt; 1</li> <li>Prereq Power: Attack, Weapon or Aura of Defensive Damage</li> <li>Tags: Crusader</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#aura", "title": "Aura", "text": "<p>Aura of Defensive Damage</p> <ul> <li>Description: Protecting others from harm can be challenging when you can't be multiple places at once. Radiating an Aura helps.</li> <li>Mechanic: Minor. For 1 PP, Allied creatures within range gain the effects of your Aura. For one minute, when a creature is hit by a melee attack, the attacker takes 1 damage.</li> <li>XP: 2</li> <li>AOE: Aura 6</li> <li>Prereq Role: Defender</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Brute &gt; 0</li> <li>Tags: Crusader</li> </ul> <p>Aura of Regeneration</p> <ul> <li>Description: It is often said that working together means supporting each other's weaknesses and strengths. In some cases amplifying others is the best strength of all.</li> <li>Mechanic: Minor. For 2 PP, Allied creatures within range gain the effects of your Aura. For one minute, when they draw a Suited Hit or a Suited Miss, they regain 1 PP, limited to 1 per round.</li> <li>XP: 2</li> <li>AOE: Aura 6</li> <li>Prereq Role: Defender</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Brute &gt; 1</li> <li>Tags: Crusader</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#control", "title": "Control", "text": "<p>Battlecharged</p> <ul> <li>Description: You're always ready for something to go down.</li> <li>Mechanic: Passive. When drawing initiative, Draw with Upper Hand.</li> <li>XP: 1</li> </ul> <p>Momentum</p> <ul> <li>Description: By brute strength, force others to move around the battlefield.</li> <li>Mechanic: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> <li>XP: 1</li> <li>Prereq Role: Defender</li> <li>Prereq Skill: Brute &gt; 0</li> </ul> <p>Momentum Aura</p> <ul> <li>Description: Your strength is supernatural, bending the gravity around you.</li> <li>Mechanic: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> <li>XP: 1</li> <li>Targets: 6</li> <li>Prereq Role: Defender</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Brute &gt; 1</li> <li>Prereq Power: Momentum</li> <li>Tags: Multi-target</li> </ul> <p>Pack Tactics</p> <ul> <li>Description: When an enemy is outnumbered, you know just how to take advantage.</li> <li>Mechanic: Passive. When an enemy is next to one or more of your allies, you have Upper Hand (+1) on your attack for each ally within 1 space of them.</li> <li>XP: 2</li> <li>Prereq Level: 2</li> </ul> <p>Quick Draw</p> <ul> <li>Description: Reflexes so quick, you're always at the ready.</li> <li>Mechanic: Passive. When drawing a TC for combat, you may draw with Upper Hand.</li> <li>Prereq Skill: AGL &gt; 2</li> <li>Tags: Combat</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#mystic-attacks", "title": "Mystic Attacks", "text": "<p>Mystic Attack</p> <ul> <li>Description: You've been trained in some form of Magic to Technology and can produce the most basic form with ease. This could be an electrified touch or a blast of energy at range.</li> <li>Mechanic: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>XP: 1</li> <li>Range: 12</li> <li>Prereq Skill: Knowledge &gt; 0 or Craft &gt; 0</li> </ul> <p>Mystic Attack</p> <ul> <li>Mechanic: Major. Your Mystic Attacks now deal +1 damage.</li> <li>XP: 2</li> <li>Range: 12</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Knowledge &gt; 1 or Craft &gt; 1</li> </ul> <p>Attack, Mystic Aura</p> <ul> <li>Description: You deploy resources to channel your magic all around you.</li> <li>Mechanic: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>XP: 2</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Power: Attack, Mystic</li> <li>Tags: Multi-target</li> </ul> <p>Mystic Amplification</p> <ul> <li>Description: You channel your talents into a physical weapon, melding the physical and supernatural.</li> <li>Mechanic: Major. For 1 PP, Designate a weapon you are wielding. You may make a Weapon Attack with this weapon using your Primary Skill modifier. This property is lost when you use another Power.</li> <li>XP: 2</li> <li>Prereq Power: Attack, Mystic</li> </ul> <p>Mystic Amplification</p> <ul> <li>Description: You channel your talents into a physical weapon, melding the physical and supernatural.</li> <li>Mechanic: Major. For 1 PP, Designate a weapon you are wielding. You may make a Weapon Attack with this weapon using your Primary Skill modifier. The weapon's damage increases by +1. This property is lost when you use another Power.</li> <li>XP: 2</li> <li>Prereq Power: Attack, Mystic or Attack, Mystic Amplification</li> </ul> <p>Attack, Mystic Cone</p> <ul> <li>Description: You deploy resources to channel your magic in a wide blast in front of you.</li> <li>Mechanic: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>XP: 2</li> <li>AOE: Cone 3</li> <li>Prereq Role: Caster</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Knowledge &gt; 1 or Craft &gt; 1</li> <li>Prereq Power: Attack, Mystic</li> <li>Tags: Multi-target</li> </ul> <p>Attack, Mystic Confusion</p> <ul> <li>Description: You channel your abilities to target the psyche of your enemy to leave them incapacitated.</li> <li>Mechanic: Major. For 1 or 2 PP, You force 1 to 2 creatures to make a GUT Save. On a failure, those creatures are Stunned. Once, target(s) make a DR 3 GUT Save. On fail, target(s) Stunned.</li> <li>XP: 2</li> <li>Range: 12</li> <li>Targets: 1 or 2</li> <li>Prereq Role: Support or Caster</li> <li>Prereq Power: Attack, Mystic</li> <li>Tags: Multi-target</li> </ul> <p>Attack, Mystic Entangle</p> <ul> <li>Description: You channel your abilities to tie your target in place.</li> <li>Mechanic: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>XP: 2</li> <li>Targets: 1 or 3</li> <li>Prereq Role: Support or Caster</li> <li>Prereq Power: Attack, Mystic</li> <li>Tags: Multi-target</li> </ul> <p>Attack, Mystic Deprivation</p> <ul> <li>Description: You channel your abilities deprive a target of their senses.</li> <li>Mechanic: Major. For 1 or 2 PP, Select the Blinded or Deafened effect. Once, target(s) make a DR 3 GUT Save. On fail, target(s) Blinded or Deafened unless immune.</li> <li>XP: 2</li> <li>Targets: 1 or 3</li> <li>Prereq Role: Support or Caster</li> <li>Prereq Power: Attack, Mystic</li> <li>Tags: Multi-target</li> </ul> <p>Attack, Mystic Dual-Shot</p> <ul> <li>Description: You are so adept mystic arts you can start another cast before even finishing the first.</li> <li>Mechanic: Minor. On your turn, you may take a second Mystic Attack with Lower Hand.</li> <li>XP: 3</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Finesse &gt; 0 or Knowledge &gt; 0 or Craft &gt; 0</li> <li>Prereq Power: Attack, Mystic</li> </ul> <p>Attack, Mystic Dual-Shot Master</p> <ul> <li>Description: You are a master of wielding the mystic arts in combat.</li> <li>Mechanic: Minor. On your turn, you may take a second Mystic Attack as a Minor Action.</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Finesse &gt; 1 or Knowledge &gt; 1 or Craft &gt; 1</li> <li>Prereq Power: Attack, Mystic Dual-Wield</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#support", "title": "Support", "text": "<p>Heal</p> <ul> <li>Description: Can channel magical energy or medical training to heal others</li> <li>Mechanic: Major. For 1 or 2 PP, Heal yourself or another you can see for 1 or 2 Health Points</li> <li>XP: 2</li> <li>Prereq Role: Support</li> </ul> <p>Heal</p> <ul> <li>Description: Can channel magical energy or medical training to heal others</li> <li>Mechanic: Major. For 1 or 2 PP, Heal yourself or another you can see for 2 or 3 Health Points</li> <li>XP: 2</li> <li>Prereq Role: Support</li> <li>Prereq Level: 3</li> <li>Prereq Power: Heal</li> </ul> <p>Lend Aid</p> <ul> <li>Description: Just a little help from a friend</li> <li>Mechanic: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> <li>XP: 1</li> <li>Range: 12</li> <li>Prereq Role: Support</li> </ul> <p>Lend Vigor</p> <ul> <li>Description: Channel energy to do more than help: inspire!</li> <li>Mechanic: Major. For 2 PP, Target creature can take an additional Major Action and move 2 additional spaces during their movement on their next turn.</li> <li>XP: 3</li> <li>Prereq Role: Support or Caster</li> <li>Prereq Level: 2</li> </ul> <p>Slow</p> <ul> <li>Description: You selectively bend time.</li> <li>Mechanic: Major. For 2 PP, Pick a point in space you can see within range. All creatures within Aura 2 must make a STR Save. On a failure, their speed is halved and they are limited to one Action on their next turn.</li> <li>XP: 2</li> <li>Range: 12</li> <li>AOE: Aura 2</li> <li>Prereq Role: Support or Caster</li> </ul> <p>Shield</p> <ul> <li>Description: Fortify others by summoning magical armor.</li> <li>Mechanic: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>XP: 2</li> <li>Prereq Role: Defender or Support</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#distract", "title": "Distract", "text": "<p>Lend Distraction</p> <ul> <li>Description: Just an annoyance in the distance</li> <li>Mechanic: Minor. For 1 PP, Draw a card, hold it in reserve, and designate one creature within 12 spaces. On the creature's next Draw, they use your card as if they had Lower Hand.</li> <li>XP: 1</li> <li>Range: 12</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#weapon-attacks", "title": "Weapon Attacks", "text": "<p>Weapon Attack</p> <ul> <li>Description: You've been trained with basic weaponry, and maybe even taken a liking to a favorite (e.g., hammer or bow). This is your go-to tool on the battlefield.</li> <li>Mechanic: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>XP: 1</li> </ul> <p>Weapon Attack</p> <ul> <li>Description: Your skills are sharpening, just like your weapon.</li> <li>Mechanic: Major. Your Weapon Attack now deals an additional +1 damage.</li> <li>XP: 2</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Finesse &gt; 0 or Brute &gt; 0</li> <li>Prereq Power: Attack, Weapon</li> </ul> <p>Attack, Charge</p> <ul> <li>Description: Your weapon training allows you to throw your weight into an enemy, heightening your damage.</li> <li>Mechanic: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>XP: 2</li> <li>Prereq Role: Defender or Martial</li> <li>Prereq Power: Attack, Weapon</li> </ul> <p>Attack, Sweep</p> <ul> <li>Description: Your weapon training allows you throw your weight around, potentially knocking targets off balance. Sweep the legs!</li> <li>Mechanic: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> <li>XP: 2</li> <li>Prereq Role: Martial or Defender</li> <li>Prereq Power: Attack, Weapon</li> <li>Tags: Multi-target</li> </ul> <p>Attack, Vengeance</p> <ul> <li>Description: Ever the protector on the field, you leap at the chance to avenge an ally.</li> <li>Mechanic: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>XP: 1</li> <li>Prereq Role: Defender</li> <li>Prereq Power: Attack, Weapon</li> </ul> <p>Attack, Dual-Wield</p> <ul> <li>Description: You are adept at wielding two weapons in combat.</li> <li>Mechanic: Minor. On your turn, you may make a second Weapon Attack as a Minor Action with Lower Hand.</li> <li>XP: 3</li> <li>Prereq Skill: Finesse &gt; 0 or Brute &gt; 0</li> <li>Prereq Power: Attack, Weapon</li> </ul> <p>Attack, Dual-Wield Master</p> <ul> <li>Description: You are a master at wielding two weapons in combat.</li> <li>Mechanic: Minor. On your turn, you may make a second Weapon Attack as a Minor Action.</li> <li>XP: 2</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Finesse &gt; 1 or Brute &gt; 1</li> <li>Prereq Power: Attack, Dual-Wield</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#companion", "title": "Companion", "text": "<p>Creature Link</p> <ul> <li>Description: You are able to bond to a Companion who follows you and obeys your commands.</li> <li>Mechanic: Passive. At the end of a Full Rest, you connect with a creature, physical or ephemeral, and take them as a Companion. You can command them as a Minor Action, or inhabit their senses using their Skills and Attributes.</li> <li>XP: 3</li> <li>Tags: Companion</li> </ul> <p>Creature Mastery</p> <ul> <li>Description: Your connection with your chosen creature has deepened, allowing you to increase the creature's power.</li> <li>Mechanic: Passive. Your Companion gains 1 Health Point and +1 to their Primary Skill modifier. They now draw their own TC in combat and act independently on their own turn.</li> <li>XP: 3</li> <li>Prereq Level: 3</li> <li>Prereq Power: Creature Link</li> <li>Tags: Companion</li> </ul> <p>Summon Creature</p> <ul> <li>Description: It's good to have a friend, even when you have to summon them from somewhere else. Who ever said no to a little extra help?</li> <li>Mechanic: Major. For 2 PP, Summon a creature to assist you for 1 hour. This creature uses the 'Summoned Creature' stat block and is treated as a Companion for the duration. You choose the creature's form.</li> <li>XP: 2</li> <li>Prereq Role: Caster</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Knowledge &gt; 0</li> <li>Tags: Summoner</li> </ul> <p>Life Link</p> <ul> <li>Description: Channeling energy between friends can sometimes be mutually beneficial. Other times, it's simply beneficial.</li> <li>Mechanic: Passive. While you have at least one summoned creature active, when you take damage you can choose to apply that damage to your summoned creature instead.</li> <li>XP: 2</li> <li>Prereq Role: Caster</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Knowledge &gt; 1</li> <li>Prereq Power: Summon Creature</li> <li>Tags: Summoner</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#consumable", "title": "Consumable", "text": "<p>Create Potion</p> <ul> <li>Description: It's always good to have some spare healing on hand.</li> <li>Mechanic: Major. For 1 PP, Create a Potion of Healing. After successfully completing a Quick Rest, you can exchange one Rest Card to create a Potion of Healing without expending Power Points. All Potions created last until the end of your next Full Rest.</li> <li>XP: 2</li> <li>Prereq Role: Support</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Craft &gt; 0</li> <li>Tags: Alchemist</li> </ul> <p>Create Poison</p> <ul> <li>Description: It's not wise to get on someone's bad side, especially when they have friends.</li> <li>Mechanic: Major. For 1 PP, Create a Poison Bottle. Poison Bottle can be applied to a weapon. For 1 minute, all Weapon Attacks force a DR 2 VIT Save, on a failure they take 1 damage bypassing AP. All Poison Bottles created last until the end of your next Full Rest.</li> <li>XP: 2</li> <li>Prereq Role: Support</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Craft &gt; 1</li> <li>Prereq Power: Create Potion</li> <li>Tags: Alchemist</li> </ul> <p>Potent Brew</p> <ul> <li>Description: Sometimes its a matter of skill, other times its a matter of the right ingredients, but often making a potent brew requires both.</li> <li>Mechanic: Passive. When using a Power that creates a consumable, increase the damage healed or dealt by 1.</li> <li>XP: 2</li> <li>Prereq Role: Support</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Craft &gt; 1</li> <li>Prereq Power: Create Potion</li> <li>Tags: Alchemist</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#discard-limit-one-per-character", "title": "Discard (limit one per character)", "text": "<p>Aggro</p> <ul> <li>Description: Protecting your friends means taking the big hits.</li> <li>Mechanic: Minor. Discard N cards to force all creatures within 2 spaces to make their next Check to attack targets besides the triggering Dealer at Lower Hand (N/2)</li> <li>Prereq Level: 2</li> </ul> <p>Help</p> <ul> <li>Description: You're there just when your friends need you.</li> <li>Mechanic: Minor. In Combat, discard N cards to grant an ally within 6 spaces Upper Hand (N/2) on all Checks for their next turn</li> <li>Prereq Level: 2</li> </ul> <p>Thwart</p> <ul> <li>Description: You have a few tricks up your sleeve for drawing the enemy's attention.</li> <li>Mechanic: Minor. Discard N cards and cause an enemy within 6 spaces to make all Checks at Lower Hand (N/2) until the start of the triggering Dealer's next turn</li> <li>Prereq Level: 2</li> </ul> <p>Infuse</p> <ul> <li>Description: You pour yourself into helping others.</li> <li>Mechanic: Minor. Discard N cards to add +(N/2) HP or AP to the next Power you use that already grants HP or AP.</li> <li>Prereq Level: 2</li> </ul> <p>Amplify</p> <ul> <li>Description: You pour yourself into destruction.</li> <li>Mechanic: Minor. Discard N cards to add +(N/2) damage to the next Power you use that causes damage. This effect expires on a Miss.</li> <li>Prereq Level: 2</li> </ul> <p>Intensify</p> <ul> <li>Description: An explosive attack might mean running out of gas.</li> <li>Mechanic: Minor. On your next Attack, discard cards until you reach a Major Success. Standard Successes are treated as Misses. You can choose to end this effect early.</li> <li>Prereq Level: 2</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#game-mechanics", "title": "Game Mechanics", "text": ""}, {"location": "1_Mechanics/04_Powers/#adjust-odds", "title": "Adjust Odds", "text": "<p>Fated Draw</p> <ul> <li>Description: Your connection to the Fates is heightened and you feel you can shift the odds in your favor.</li> <li>Mechanic: Minor. For 1 PP, You can view the top card of your deck. You can choose to discard it, or return it to the top of your deck.</li> <li>XP: 2</li> <li>Prereq Level: 2</li> </ul> <p>Lucky</p> <ul> <li>Description: Not everything goes your way, but for one reason or another, you seem to avoid the worst.</li> <li>Mechanic: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> <li>XP: 1</li> <li>Tags: Suited Miss</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#magic", "title": "Magic", "text": "<p>Barrier</p> <ul> <li>Description: Your skills allow you to deploy temporary impromptu walls</li> <li>Mechanic: Major. For 1 or 2 PP, You create an opaque wall 3 or 5 spaces wide and 3 spaces tall. You may dismiss this wall at any time as a Free Action. This wall has 6 Hit Points.</li> <li>XP: 2</li> <li>Prereq Role: Support or Caster</li> </ul> <p>Illusion</p> <ul> <li>Description: Your skills let you conjure illusory effects.</li> <li>Mechanic: Major. For 1 or 2 PP, You make an illusory intangible visual (no larger than 1 space) or auditory effect that you've heard before. To determine if it's real, a character makes a Contested Detection Check. For 2 PP, you can generate both visual and auditory effects, and the check to verify draws with the Lower Hand</li> <li>XP: 2</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Knowledge &gt; 0 or Craft &gt; 0</li> </ul> <p>Craft Light</p> <ul> <li>Description: Your skills let you conjure illusory radiance.</li> <li>Mechanic: Minor. For 0 or 1 PP, For 0 PP, you can create or infuse a temporary illusory object with light in an Aura 6 radiance. If the light is more than 100 spaces away from you, it disappears. You may end this effect as a free action. For 1 PP, you can force a target within 6 spaces to make a DR 2 GUT Save or become Blinded for 1 round. Once, target(s) make a DR 2 GUT Save. On fail, target(s) Blinded.</li> <li>XP: 1</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Craft &gt; 0</li> </ul> <p>Minor Levitation</p> <ul> <li>Description: Your skills allow you to momentarily suspend the laws of gravity.</li> <li>Mechanic: Minor. For 0 or 1 PP, For 0 PP, you can infuse an object of less than 100 lbs with levitation, reducing its effective weight to 0 lbs and allowing it to float in the air. For 1 PP, you can force a target within 6 spaces to make a DR 2 STR Save or reduce their speed to 0 and float 1 space off the ground for 1 round. Once, target(s) make a DR 2 STR Save. On fail, target(s) Speed reduced to 0 and floating 1 space off the ground for 1 round.</li> <li>XP: 1</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Craft &gt; 0 or Knowledge &gt; 0</li> </ul> <p>Produce Sound</p> <ul> <li>Description: Your skills let you create illusory sounds.</li> <li>Mechanic: Minor. For 0 or 1 PP, For 0 PP, you can create a harmless sound or auditory effect emanating from a point you can see such as music, wind, rustling leaves, etc. for 1 minute. For 1 PP, you can feign the voice or noise of someone not there. A nearby creature must make a DR 2 Detection check to determine if the sound is illusory.</li> <li>XP: 1</li> <li>Range: 12</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Craft &gt; 0 or Knowledge &gt; 0</li> </ul> <p>Mystic Cleanse</p> <ul> <li>Description: Your skills let you cleanse objects and creatures.</li> <li>Mechanic: Minor. For 0 or 1 PP, For 0 PP, you can clean objects within 1 space, removing any dirt or grime. Damaged objects are not repaired, but dirt and debris around the damage is cleaned. For 1 PP, you can target a creature within 6 spaces and remove one of the following Status Conditions from them; Burned, Frozen, Poisoned, Blinded, Deafened, Charmed, Enthralled.</li> <li>XP: 1</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Craft &gt; 0 or Knowledge &gt; 0</li> </ul> <p>Illusory Appearance</p> <ul> <li>Description: Your skills let you conjure illusory effects on your person.</li> <li>Mechanic: Minor. For 0 or 1 PP, For 0 PP, you can alter the appearance of your eye or hair color for 1 hour. For 1 PP, you can alter your appearance entirely, changing some or all physical characteristics. Occupying additional space (e.g., gaining height) produces illusions that may be readily detected if dramatically different from your original form. For the next hour, you gain the Upper Hand on Conviction Checks made to convince others of your new appearance.</li> <li>XP: 1</li> <li>Prereq Role: Caster or Support</li> <li>Prereq Skill: Craft &gt; 0 or Knowledge &gt; 0</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#movement", "title": "Movement", "text": "<p>Phase Swap</p> <ul> <li>Description: It can often be better to change places with a friendly creature. You'd prefer to be there, or they'd prefer to be here.</li> <li>Mechanic: Minor. For 1 PP, Use half your speed to swap spaces with a Summoned Creature</li> <li>XP: 2</li> <li>Range: 10</li> <li>Prereq Role: Caster</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Knowledge &gt; 1</li> <li>Prereq Power: Summon Creature</li> <li>Tags: Summoner</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#speed", "title": "Speed", "text": "<p>Speedy</p> <ul> <li>Description: You're quicker than the rest.</li> <li>Mechanic: Passive. When you take this Power, your speed increases by 2.</li> <li>XP: 1</li> </ul> <p>Favored Terrain</p> <ul> <li>Description: Home feels more familiar, granting a speed boost.</li> <li>Mechanic: Passive. Work with your GM to decide a favored terrain (e.g., mountains). Gain +2 speed on this terrain.</li> <li>XP: 1</li> </ul> <p>Terrain Blink</p> <ul> <li>Description: So at home that you can get anywhere.</li> <li>Mechanic: Minor. Work with your GM to decide a favored terrain (e.g., mountains). When navigating continuous spaces of this terrain, you can use half your movement to immediately move to a point you can see within Range.</li> <li>XP: 3</li> <li>Range: 10</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#stealth", "title": "Stealth", "text": "<p>Stealth in the Shadows</p> <ul> <li>Description: A creature of the dark, you're especially adept at going unseen.</li> <li>Mechanic: Passive. When you make a Stealth check in dim light or darkness, you draw with the Upper Hand.</li> <li>XP: 1</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Stealth &gt; 0</li> <li>Tags: Stealth or Assassin</li> </ul> <p>Vanishing Step</p> <ul> <li>Description: Sometimes, moving in the shadows is easiest when no one knows where you're going.</li> <li>Mechanic: Major. For 2 PP, Choose a point you can see within 10 spaces. If the space is unoccupied, you appear there Hidden. You cannot attempt to occupy a space that is occupied by another creature.</li> <li>XP: 2</li> <li>Range: 10</li> <li>Prereq Role: Martial</li> <li>Prereq Level: 3</li> <li>Prereq Skill: Stealth &gt; 1</li> <li>Prereq Power: Hidden Strike</li> <li>Tags: Assassin</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#power-points", "title": "Power Points", "text": "<p>Small Power Gain</p> <ul> <li>Description: Harnessing more stored power allows for greater achievements.</li> <li>Mechanic: Passive. You gain 2 additional Power Points. Add 2 to PP</li> <li>XP: 1</li> </ul> <p>Large Power Gain</p> <ul> <li>Description: Gathering power is one of the paths to true mastery of the self.</li> <li>Mechanic: Passive. You gain 4 additional Power Points. Add 4 to PP</li> <li>XP: 2</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#resilience", "title": "Resilience", "text": "<p>Condition Resilience</p> <ul> <li>Description: Through training or sheer will, you brace your body for trials ahead.</li> <li>Mechanic: Passive. Select one of the following conditions when taking this power: Blinded, Deafened, Burned, Poisoned, Frozen, or Suffocating. If you make a check to avoid being subjected to this effect, you do so at Upper Hand.</li> <li>XP: 1</li> <li>Prereq Level: 2</li> <li>Prereq Skill: VIT &gt; 1</li> </ul> <p>Condition Immunity</p> <ul> <li>Description: Through training or sheer will, your body is impervious.</li> <li>Mechanic: Passive. Select on of the following conditions when taking this power: Blinded, Deafened, Burned, Poisoned, Frozen, or Suffocating. You are now immune to this condition.</li> <li>XP: 3</li> <li>Prereq Level: 3</li> <li>Prereq Skill: VIT &gt; 2</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#roleplay", "title": "Roleplay", "text": "<p>Focused</p> <ul> <li>Description: There's some domain that completely captivates you. When you're invested, you know exactly how to proceed and there's no distracting you. You barely see the outside world.</li> <li>Mechanic: Passive. Choose one Skill. When engaged in a non-instantaneous task that involves this skill, you draw with the Upper Hand. During this time, you also have the Inattentive Vulnerability and are also unable to perceive the world outside this task. Draw with the Lower Hand for any Skill check made that is not directly related to your current task.</li> <li>XP: 1</li> </ul> <p>Keen Eye</p> <ul> <li>Description: You're especially adept at taking in the world around you.</li> <li>Mechanic: Passive. When you make a Detection check to observe the world around you (visual, auditory, etc.), draw with the Upper Hand.</li> <li>XP: 1</li> </ul> <p>Cunning</p> <ul> <li>Description: You're sharper than the rest when you take your time.</li> <li>Mechanic: Passive. Choose one Skill other than your Primary Skill. On turns when you only make 1 non-attack action using this Skill, draw with Upper Hand. This power may be taken multiple times for additional Skills.</li> <li>XP: 1</li> </ul> <p>Handy</p> <ul> <li>Description: You know how to work with your hands (e.g., machining, lock picking, tailoring).</li> <li>Mechanic: Passive. Work with your GM to decide a trade with which your character is familiar. When making a check to to perform this craft, draw with the Upper Hand.</li> <li>XP: 1</li> <li>Prereq Skill: Craft &gt; 1 or Knowledge &gt; 1</li> </ul>"}, {"location": "1_Mechanics/04_Powers/#stealth_1", "title": "Stealth", "text": ""}, {"location": "1_Mechanics/04_Powers/#combat_1", "title": "Combat", "text": "<p>Hidden Strike</p> <ul> <li>Description: You move silently in the shadows, and are especially deadly when unseen.</li> <li>Mechanic: Passive. When attacking an enemy that is unaware of your presence or engaged with an ally within 1 space, you draw with Upper Hand. Any attacks that are successful deal +1 damage</li> <li>XP: 2</li> <li>Prereq Role: Martial</li> <li>Prereq Level: 2</li> <li>Prereq Skill: Stealth &gt; 0</li> <li>Tags: Assassin</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/", "title": "Vulnerabilities", "text": ""}, {"location": "1_Mechanics/05_Vulnerabilities/#combat", "title": "Combat", "text": "<p>Bloodthirsty</p> <ul> <li>Description: Your character is driven by a need for violence.</li> <li>Mechanic: Vulny. Given the choice between a peaceful or violent solution, you must choose combat.</li> <li>XP: -1</li> </ul> <p>Cowardly Ally</p> <ul> <li>Description: Allies are great for many things, including blocking attacks.</li> <li>Mechanic: Vulny. If you have movement remaining after attacking, you must try to position yourself so that an ally is between you and an enemy.</li> <li>XP: -2</li> </ul> <p>No Mercy</p> <ul> <li>Description: An attacker has made their choice; that choice is to die.</li> <li>Mechanic: Vulny. If you are attacked in combat, you must only use offensive Power attacks until your attacker is Knocked Out.</li> <li>XP: -2</li> </ul> <p>Pacifist</p> <ul> <li>Description: You've taken an oath of nonviolence. To break this oath would have severe consequences.</li> <li>Mechanic: Vulny. You may not knowingly inflict harm.</li> <li>XP: -2</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#party", "title": "Party", "text": "<p>Chaotic Companion</p> <ul> <li>Description: You and your companion do not always get along, sometimes they do not do exactly what you ask.</li> <li>Mechanic: Vulny. When you draw a Suited Miss to command your companion, the DM gains control of the companion temporarily, with the duration at the DM's discretion (Minor/Major).</li> <li>XP: -1 or -2</li> <li>Prereq Power: Creature Connection</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#roleplay", "title": "Roleplay", "text": "<p>Oath</p> <ul> <li>Description: a.k.a Vow, Code of Honor. You swore an oath to abide by a particular set of rules.</li> <li>Mechanic: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>XP: -1 or -2</li> </ul> <p>Conceited</p> <ul> <li>Description: You mistakenly believe everything is about you, and even fail to understand any conversation topic that doesn't pertain to you.</li> <li>Mechanic: Vulny. If you make a check to understand a topic or observe another creature, you must justify why your character thinks it's about themselves, or draw with the Lower Hand.</li> <li>XP: -2</li> <li>Prereq Skill: Intelligence and Intuition &lt; +1</li> </ul> <p>Eye for an Eye</p> <ul> <li>Description: You are spiteful and cannot let an attacker get away.</li> <li>Mechanic: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> <li>XP: -2</li> </ul> <p>Frail Form</p> <ul> <li>Description: Through age, birth, or accident, your body is different from others' and you find it hard to keep up.</li> <li>Mechanic: Vulny. When you take this Vulnerability, your combat speed is reduced by two spaces. When making a check to traverse terrain, draw with the Lower Hand.</li> <li>XP: -2</li> </ul> <p>Illiterate</p> <ul> <li>Description: Never having been trained, the printed word is a mystery to you. You can recognize the general shape, and return to the same street sign, but couldn't pronounce the word.</li> <li>Mechanic: Vulny. You're unable to complete an action that requires understanding text.  The skill prerequisite only applies at the time the Vulnerability is taken.</li> <li>XP: -1</li> <li>Prereq Skill: Intelligence &lt; 1</li> </ul> <p>Inattentive</p> <ul> <li>Description: You can really only do one thing at a time. The rest of the world seems to fade away.</li> <li>Mechanic: Vulny. Whenever you Draw to observe or react to something you weren't already aware of (e.g., Detection checks or Agility reactions), you draw with the Lower Hand.</li> <li>XP: -1</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#backstory", "title": "Backstory", "text": "<p>Savior</p> <ul> <li>Description: a.k.a Chosen One. Your people look to you as their salvation.</li> <li>Mechanic: Vulny. Work with your GM to decide a group or organization that believes you are the key to their salvation. You may encounter a member of this group that requires your help.</li> <li>XP: -1 or -2</li> </ul> <p>Vendetta</p> <ul> <li>Description: You have sworn to track down an enemy. Business or pleasure?</li> <li>Mechanic: Vulny. Work with your GM to decide an NPC that has wronged you in the past.</li> <li>XP: -1 or -2</li> </ul> <p>Wanted</p> <ul> <li>Description: Your past will come back to haunt you.</li> <li>Mechanic: Vulny. Work with your GM to decide an NPC or organization that thinks you are responsible for a crime. You may encounter a member of this group who wants you in jail, or stand trial, or outright dead.</li> <li>XP: -1 or -2</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#knives", "title": "Knives", "text": "<p>Phobia</p> <ul> <li>Description: You can't shake it, there's just the terrifying fear that burdens you.</li> <li>Mechanic: Vulny. Work with your GM to decide a fear you hold and the reason for that fear. This may be a fear of something concrete (e.g., spiders, fire) or something less tangible (e.g., being alone, going hungry).</li> <li>XP: -1 or -2</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#society", "title": "Society", "text": "<p>Inorganic</p> <ul> <li>Description: You were not born, but instead created. You are not a slave to the bodily needs of the rest, but may instead be called to a prescribed purpose.</li> <li>Mechanic: Vulny. You do not need to breathe, eat or sleep (but still rest to recover Health/Power Points). Choose one of the following when you take this Vulnerability<ul> <li>Your creator or society at large consider you to have a function that you do not wish to pursue, such as a dangerous and laborious profession.</li> <li>You require a rare form of fuel that is difficult to obtain and are rendered catatonic without regular access. Work with your GM to see what makes sense for your character in the setting.</li> </ul> </li> <li>XP: -2</li> </ul> <p>Outsider</p> <ul> <li>Description: You're a stranger in a strange land. You may be unfamiliar with customs, somehow ostracized by the community, or even hunted based on group membership.</li> <li>Mechanic: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>XP: -1 or -2</li> </ul>"}, {"location": "1_Mechanics/05_Vulnerabilities/#stats", "title": "Stats", "text": "<p>Clumsy, Minor</p> <ul> <li>Description: You're clumsier than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 AGL. Add -1 to AGL</li> <li>XP: -1</li> </ul> <p>Clumsy, Major</p> <ul> <li>Description: You're clumsier than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 AGL. Add -2 to AGL</li> <li>XP: -2</li> </ul> <p>Dumb, Minor</p> <ul> <li>Description: You're dumber than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 INT. Add -1 to INT</li> <li>XP: -1</li> </ul> <p>Dumb, Major</p> <ul> <li>Description: You're dumber than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 INT. Add -2 to INT</li> <li>XP: -2</li> </ul> <p>Counterintuitive, Minor</p> <ul> <li>Description: You're less intuitive than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 GUT. Add -1 to GUT</li> <li>XP: -1</li> </ul> <p>Counterintuitive, Major</p> <ul> <li>Description: You're less intuitive than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 GUT. Add -2 to GUT</li> <li>XP: -2</li> </ul> <p>Frail, Minor</p> <ul> <li>Description: You're frailer than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 VIT. Add -1 to VIT</li> <li>XP: -1</li> </ul> <p>Frail, Major</p> <ul> <li>Description: You're frailer than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 VIT. Add -2 to VIT</li> <li>XP: -2</li> </ul> <p>Uncertain, Minor</p> <ul> <li>Description: You're less certain than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 CON. Add -1 to CON</li> <li>XP: -1</li> </ul> <p>Uncertain, Major</p> <ul> <li>Description: You're less certain than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 CON. Add -2 to CON</li> <li>XP: -2</li> </ul> <p>Weak, Minor</p> <ul> <li>Description: You're weaker than most.</li> <li>Mechanic: Vulny. On character creation, you start with -1 STR. Add -1 to STR</li> <li>XP: -1</li> </ul> <p>Weak, Major</p> <ul> <li>Description: You're weaker than most.</li> <li>Mechanic: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> <li>XP: -2</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/", "title": "Bestiary", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#boss", "title": "Boss", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#necromancer-aspect", "title": "Necromancer Aspect", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#boss-level-1", "title": "Boss: Level 1", "text": "HP AP AR PP SPD 5 0 2 4 6 AGL CON GUT INT STR VIT -1 2 2 2 -1 1 <p>Skills: Finesse -1, Stealth -1, Bluffing 2, Performance 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Stunning Glare: Major. Force one target within range to make a DR 2 CON Save. On a failure, they take 2 damage and are Stunned. On a success, they take half damage and are not Stunned.</li> <li>Drain Life: Major. Force all targets within Aura 2 to make a DR 2 VIT Save. On a failure, they take 1 damage and the Boss is healed for the total amount of damage dealt.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#adversary", "title": "Adversary", "text": "<ul> <li>Phase Shift: Adversary. Choose a space within 10 spaces and move there instantly.</li> <li>Ally Swap: Adversary. Choose a friendly creature within 10 spaces and swap places with them. That creature can then make one Attack, Weapon to a creature within 1 space after the swap is complete.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#house", "title": "House", "text": "<ul> <li>Summon Ally: House. Select N creatures from the Bestiary and summon them to the battlefield. The GM determines how many creatures are summoned.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#necromancer", "title": "Necromancer", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#boss-level-1_1", "title": "Boss: Level 1", "text": "HP AP AR PP SPD 8 0 2 6 6 AGL CON GUT INT STR VIT -1 2 2 2 -1 1 <p>Skills: Finesse -1, Stealth -1, Bluffing 2, Performance 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_1", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive", "title": "Passive", "text": "<ul> <li>Undying: Passive. This creature cannot be killed by traditional weapons. On reaching 0 HP, this creature goes into a stasis. The following day, they return to 1 HP. A GM determines the corresponding Vulnerability that counteracts this effect.</li> <li>Life Link: Passive. While you have at least one summoned creature active, when you take damage you can choose to apply that damage to your summoned creature instead.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#vulny", "title": "Vulny", "text": "<ul> <li>Undying Vulnerability: Vulny. When the creature is exposed to this Vulnerability, they take 1 damage. While the creature is at 0 HP, when they are exposed to this Vulnerability they are instead killed. A GM determines the nature of Vulnerability that a creature possesses to trigger this effect, such as exposure to sunlight.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_1", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Stunning Glare: Major. Force one target within range to make a DR 2 CON Save. On a failure, they take 2 damage and are Stunned. On a success, they take half damage and are not Stunned.</li> <li>Drain Life: Major. Force all targets within Aura 2 to make a DR 2 VIT Save. On a failure, they take 1 damage and the Boss is healed for the total amount of damage dealt.</li> <li>Summon Creature: Major. For 2 PP, Summon a creature to assist you for 1 hour. This creature uses the 'Summoned Creature' stat block and is treated as a Companion for the duration. You choose the creature's form.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#adversary_1", "title": "Adversary", "text": "<ul> <li>Shake Enemy: Adversary. Choose a creature within 10 spaces. They make a DR 2 CON Save. On a failure, their next check will be made at Lower Hand.</li> <li>Phase Shift: Adversary. Choose a space within 10 spaces and move there instantly.</li> <li>Adversary Major Action: Adversary. Once per round, you make take an additional Major Action after a Dealer's turn.</li> <li>Drain Stamina: Adversary. All creatures within 2 spaces make a DR 2 GUT Save. On a failure, discard 2 cards.</li> <li>Ally Swap: Adversary. Choose a friendly creature within 10 spaces and swap places with them. That creature can then make one Attack, Weapon to a creature within 1 space after the swap is complete.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#house_1", "title": "House", "text": "<ul> <li>Summon Ally: House. Select N creatures from the Bestiary and summon them to the battlefield. The GM determines how many creatures are summoned.</li> <li>Wall Grab: House. All creatures within 2 spaces of a wall must make a DR 2 AGL Save. On a failure, they take 1 damage and are Entangled.</li> <li>Amplify Ally: House. Select one ally. They can immediately move up to 4 spaces and take one Action.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#spider-queen", "title": "Spider Queen", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#boss-level-1_2", "title": "Boss: Level 1", "text": "HP AP AR PP SPD 11 1 2 6 6 AGL CON GUT INT STR VIT -1 2 2 2 -1 1 <p>Skills: Finesse -1, Stealth -1, Bluffing 2, Performance 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_2", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive_1", "title": "Passive", "text": "<ul> <li>Favored Terrain: Passive. Work with your GM to decide a favored terrain (e.g., mountains). Gain +2 speed on this terrain.</li> <li>Condition Immunity: Passive. Poisoned. You are now immune to this condition.</li> <li>Condition Resilience: Passive. Blinded. If you make a check to avoid being subjected to this effect, you do so at Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_2", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Manifest Terrain: Major. For 1 PP, you change the area around you to an ensnaring landscape. On starting turn, target(s) make a DR 2 AGL Save. On fail, target(s) Entangled.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#minor", "title": "Minor", "text": "<ul> <li>Terrain Blink: Minor. Work with your GM to decide a favored terrain (e.g., mountains). When navigating continuous spaces of this terrain, you can use half your movement to immediately move to a point you can see within Range.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#adversary_2", "title": "Adversary", "text": "<ul> <li>Shake Enemy: Adversary. Choose a creature within 10 spaces. They make a DR 2 CON Save. On a failure, their next check will be made at Lower Hand.</li> <li>Adversary Major Action: Adversary. Once per round, you make take an additional Major Action after a Dealer's turn.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#house_2", "title": "House", "text": "<ul> <li>Summon Ally: House. Select N creatures from the Bestiary and summon them to the battlefield. The GM determines how many creatures are summoned.</li> <li>Amplify Ally: House. Select one ally. They can immediately move up to 4 spaces and take one Action.</li> <li>Wall Grab: House. All creatures within 2 spaces of a wall must make a DR 2 AGL Save. On a failure, they take 1 damage and are Entangled.</li> <li>Obey Me: House. For 2 PP, enthrall an enemy. On starting turn, target(s) make a DR 2 CON Save. On fail, target(s) must move up to 4 spaces and/or take one Major Action at your direction on each turn. On success, target(s) end effect.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#scorpion-beast", "title": "Scorpion Beast", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#boss-level-1_3", "title": "Boss: Level 1", "text": "HP AP AR PP SPD 8 2 2 4 6 AGL CON GUT INT STR VIT 1 0 1 -1 2 2 <p>Skills: Finesse 1, Stealth 1, Knowledge 1, Investigation 1, Detection -1, Craft -1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_3", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_3", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> <li>Momentum Aura: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> <li>Staggering Blow: Major. For 1 PP, Make a Weapon Attack against a creature. On a successful hit,, target(s) make a VIT Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) Stunned.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#minor_1", "title": "Minor", "text": "<ul> <li>Attack, Dual-Wield Master: Minor. On your turn, you may make a second Weapon Attack as a Minor Action.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#companion", "title": "Companion", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#falcon", "title": "Falcon", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#companion-level-1", "title": "Companion: Level 1", "text": "HP AP AR PP SPD 1 1 3 0 6 AGL CON GUT INT STR VIT 1 0 0 1 -1 -1 <p>Skills: Finesse 1, Stealth 1, Detection 1, Craft 1, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_4", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_4", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#bear", "title": "Bear", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#companion-level-1_1", "title": "Companion: Level 1", "text": "HP AP AR PP SPD 3 1 2 0 6 AGL CON GUT INT STR VIT -1 0 0 -1 1 1 <p>Skills: Finesse -1, Stealth -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_5", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_5", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#wolf", "title": "Wolf", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#companion-level-1_2", "title": "Companion: Level 1", "text": "HP AP AR PP SPD 2 1 3 0 6 AGL CON GUT INT STR VIT 1 0 1 -1 1 0 <p>Skills: Finesse 1, Stealth 1, Knowledge 1, Investigation 1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_6", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive_2", "title": "Passive", "text": "<ul> <li>Pack Tactics: Passive. When an enemy is next to one or more of your allies, you have Upper Hand (+1) on your attack for each ally within 1 space of them.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_6", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#summoned-creature", "title": "Summoned Creature", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#companion-level-1_3", "title": "Companion: Level 1", "text": "HP AP AR PP SPD 4 1 3 0 6 AGL CON GUT INT STR VIT 1 -1 0 -1 1 0 <p>Skills: Finesse 1, Stealth 1, Bluffing -1, Performance -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_7", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_7", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#horse", "title": "Horse", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#companion-level-1_4", "title": "Companion: Level 1", "text": "HP AP AR PP SPD 2 1 3 0 6 AGL CON GUT INT STR VIT 1 0 -1 -1 1 0 <p>Skills: Finesse 1, Stealth 1, Knowledge -1, Investigation -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_8", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive_3", "title": "Passive", "text": "<ul> <li>Pack Tactics: Passive. When an enemy is next to one or more of your allies, you have Upper Hand (+1) on your attack for each ally within 1 space of them.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_8", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#dealer", "title": "Dealer", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#huge-golem", "title": "Huge Golem", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#dealer-level-2", "title": "Dealer: Level 2", "text": "HP AP AR PP SPD 7 2 3 4 6 AGL CON GUT INT STR VIT -1 0 0 -1 2 2 <p>Skills: Finesse -1, Stealth -1, Detection -1, Craft -1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_9", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_9", "title": "Major", "text": "<ul> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Momentum Aura: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#captain-defender", "title": "Captain, Defender", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#dealer-level-2_1", "title": "Dealer: Level 2", "text": "HP AP AR PP SPD 5 2 2 4 6 AGL CON GUT INT STR VIT 1 0 1 -1 1 1 <p>Skills: Finesse 1, Stealth 1, Knowledge 1, Investigation 1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_10", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_10", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Momentum Aura: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#mystic-caster", "title": "Mystic, Caster", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#dealer-level-2_2", "title": "Dealer: Level 2", "text": "HP AP AR PP SPD 5 1 3 2 6 AGL CON GUT INT STR VIT -1 1 0 1 -1 0 <p>Skills: Finesse -1, Stealth -1, Bluffing 1, Performance 1, Detection 1, Craft 1, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_11", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_11", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Confusion: Major. For 1 or 2 PP, You force 1 to 2 creatures to make a GUT Save. On a failure, those creatures are Stunned. Once, target(s) make a DR 3 GUT Save. On fail, target(s) Stunned.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#sentinel-martial", "title": "Sentinel, Martial", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#dealer-level-2_3", "title": "Dealer: Level 2", "text": "HP AP AR PP SPD 6 0 2 3 6 AGL CON GUT INT STR VIT 0 0 1 1 -1 0 <p>Skills: Knowledge 1, Investigation 1, Detection 1, Craft 1, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_12", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_12", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#ritualist-support", "title": "Ritualist, Support", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#dealer-level-1", "title": "Dealer: Level 1", "text": "HP AP AR PP SPD 4 1 3 6 6 AGL CON GUT INT STR VIT -1 1 1 1 -1 -1 <p>Skills: Finesse -1, Stealth -1, Bluffing 1, Performance 1, Knowledge 1, Investigation 1, Detection 1, Craft 1, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_13", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_13", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Heal: Major. For 1 or 2 PP, Heal yourself or another you can see for 1 or 2 Health Points</li> <li>Lend Vigor: Major. For 2 PP, Target creature can take an additional Major Action and move 2 additional spaces during their movement on their next turn.</li> <li>Slow: Major. For 2 PP, Pick a point in space you can see within range. All creatures within Aura 2 must make a STR Save. On a failure, their speed is halved and they are limited to one Action on their next turn.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#minor_2", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> <li>Lend Distraction: Minor. For 1 PP, Draw a card, hold it in reserve, and designate one creature within 12 spaces. On the creature's next Draw, they use your card as if they had Lower Hand.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#npc", "title": "NPC", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#commoner", "title": "Commoner", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 3 1 3 0 6 AGL CON GUT INT STR VIT 0 0 0 0 0 0"}, {"location": "1_Mechanics/06_Bestiary/#powers_14", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_14", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#gray-wolf", "title": "Gray Wolf", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_1", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 3 0 6 AGL CON GUT INT STR VIT 1 -1 0 -1 1 0 <p>Skills: Finesse 1, Stealth 1, Bluffing -1, Performance -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_15", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive_4", "title": "Passive", "text": "<ul> <li>Pack Tactics: Passive. When an enemy is next to one or more of your allies, you have Upper Hand (+1) on your attack for each ally within 1 space of them.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_15", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#dire-wolf", "title": "Dire Wolf", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_2", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 3 1 2 0 6 AGL CON GUT INT STR VIT 2 -1 0 -1 2 0 <p>Skills: Finesse 2, Stealth 2, Bluffing -1, Performance -1, Detection -1, Craft -1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_16", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#passive_5", "title": "Passive", "text": "<ul> <li>Pack Tactics: Passive. When an enemy is next to one or more of your allies, you have Upper Hand (+1) on your attack for each ally within 1 space of them.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#major_16", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#small-golem", "title": "Small Golem", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_3", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 4 0 6 AGL CON GUT INT STR VIT -1 0 0 -1 1 0 <p>Skills: Finesse -1, Stealth -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_17", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_17", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#medium-golem", "title": "Medium Golem", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_4", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 4 0 6 AGL CON GUT INT STR VIT -1 0 0 -1 1 0 <p>Skills: Finesse -1, Stealth -1, Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_18", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_18", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#minor_3", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#mystic-golem", "title": "Mystic Golem", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_5", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 4 1 6 AGL CON GUT INT STR VIT -1 0 0 0 0 1 <p>Skills: Finesse -1, Stealth -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_19", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_19", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#grunt", "title": "Grunt", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_6", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 3 0 6 AGL CON GUT INT STR VIT 1 0 0 -1 0 0 <p>Skills: Finesse 1, Stealth 1, Detection -1, Craft -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_20", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_20", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#grunt-shielded", "title": "Grunt, Shielded", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_7", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 2 1 2 0 6 AGL CON GUT INT STR VIT 0 0 0 -1 1 0 <p>Skills: Detection -1, Craft -1, Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_21", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_21", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#guard", "title": "Guard", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-2", "title": "NPC: Level 2", "text": "HP AP AR PP SPD 3 1 2 1 6 AGL CON GUT INT STR VIT 0 0 0 0 1 1 <p>Skills: Athletics 1, Brute 1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_22", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_22", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#minor_4", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/06_Bestiary/#specter", "title": "Specter", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#npc-level-1_8", "title": "NPC: Level 1", "text": "HP AP AR PP SPD 3 0 2 2 6 AGL CON GUT INT STR VIT 0 0 1 1 -1 0 <p>Skills: Knowledge 1, Investigation 1, Detection 1, Craft 1, Athletics -1, Brute -1</p>"}, {"location": "1_Mechanics/06_Bestiary/#powers_23", "title": "Powers", "text": ""}, {"location": "1_Mechanics/06_Bestiary/#major_23", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Aura: Major. For 1 or 2 PP, You perform your Mystic Attack on all characters within 1 or 2 space(s) of you.</li> <li>Slow: Major. For 2 PP, Pick a point in space you can see within range. All creatures within Aura 2 must make a STR Save. On a failure, their speed is halved and they are limited to one Action on their next turn.</li> </ul>"}, {"location": "1_Mechanics/07_Items/", "title": "Items", "text": ""}, {"location": "1_Mechanics/07_Items/#armor", "title": "Armor", "text": "<p>Light Armor</p> <ul> <li>Cost: 5 gp</li> <li>Description: Replace AR with 3.</li> </ul> <p>Medium Armor</p> <ul> <li>Cost: 25 gp</li> <li>Description: Replace AR with 2.</li> <li>Prereq Skill: STR &gt; 0</li> </ul> <p>Fortified Armor</p> <ul> <li>Cost: 100 gp</li> <li>Description: Replace AR with 2. Add 1 to AP.</li> <li>Prereq Skill: STR &gt; 1</li> </ul>"}, {"location": "1_Mechanics/07_Items/#consumable", "title": "Consumable", "text": "<p>Potion of Strength</p> <ul> <li>Cost: 15 gp</li> <li>Rarity: Uncommon</li> <li>Use: Take minor action to activate. Gain +1 to all Strength-based Checks. Lasts 1 min.</li> </ul> <p>Charm of Efficiency</p> <ul> <li>Cost: 65 gp</li> <li>Rarity: Rare</li> <li>Use: Take minor action to activate. You cannot draw with Upper or Lower Hand. Lasts 1 hour.</li> </ul> <p>Fortifying Feast</p> <ul> <li>Cost: 100 gp</li> <li>Rarity: Rare</li> <li>Use: Take 1 minute to activate. Gain +3 AP immediately. For the duration, if you end you turn with 0 AP, return to 1 AP. Lasts 8 hours.</li> </ul>"}, {"location": "1_Mechanics/07_Items/#general", "title": "General", "text": "<p>Hammer</p> <ul> <li>Cost: 5 sp</li> <li>Description: A common hammer, useful for many types of crafts.</li> </ul> <p>Tent</p> <ul> <li>Cost: 1 gp</li> <li>Description: A canvas tent, useful for staying warm and dry when camping in the wilderness.</li> </ul> <p>Lantern</p> <ul> <li>Cost: 2 gp</li> <li>Description: An oil lantern that can help illuminate the darkness.</li> </ul>"}, {"location": "1_Mechanics/07_Items/#tool", "title": "Tool", "text": "<p>Blacksmith Tools</p> <ul> <li>Cost: 5 gp</li> <li>Description: A set of tools that consists of a hammer, tongs, and various metalworking items.</li> </ul> <p>Sailor Tools</p> <ul> <li>Cost: 2 gp</li> <li>Description: A set of tools that includes lengths of rope, patch kit for canvas sails, and assorted ship carpentry items.</li> </ul>"}, {"location": "1_Mechanics/07_Items/#weapon", "title": "Weapon", "text": "<p>Standard Weapon</p> <ul> <li>Cost: 5 gp</li> <li>Damage: 1</li> </ul> <p>Shortsword</p> <ul> <li>Cost: 5 gp</li> <li>Range: 1</li> <li>Damage: 1</li> </ul> <p>Shortbow</p> <ul> <li>Cost: 5 gp</li> <li>Damage: 1</li> <li>Tags: Ranged, 2-handed</li> </ul> <p>Staff</p> <ul> <li>Cost: 5 gp</li> <li>Damage: 1</li> <li>Tags: 2-handed</li> </ul> <p>Improved Weapon</p> <ul> <li>Cost: 500 gp</li> <li>Rarity: Uncommon</li> <li>Damage: 2</li> </ul> <p>Heroic Weapon</p> <ul> <li>Cost: 2,500 gp</li> <li>Rarity: Rare</li> <li>Damage: 3</li> </ul> <p>Legendary Weapon</p> <ul> <li>Cost: 5,000 gp</li> <li>Rarity: Legendary</li> <li>Damage: 4</li> </ul>"}, {"location": "1_Mechanics/08_PCs/", "title": "08 PCs", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc", "title": "PC", "text": ""}, {"location": "1_Mechanics/08_PCs/#clubs1", "title": "Clubs1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1", "title": "PC: Level 1", "text": "HP AP AR PP SPD 6 2 2 1 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Bloodthirsty: Vulny. Given the choice between a peaceful or violent solution, you must choose combat.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#clubs2", "title": "Clubs2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 2 2 2 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_1", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_1", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Bloodthirsty: Vulny. Given the choice between a peaceful or violent solution, you must choose combat.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_1", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Momentum Aura: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_1", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#clubs3", "title": "Clubs3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3", "title": "PC: Level 3", "text": "HP AP AR PP SPD 8 2 2 4 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_2", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_2", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Bloodthirsty: Vulny. Given the choice between a peaceful or violent solution, you must choose combat.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_2", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Momentum Aura: Major. For 1 PP, Your Momentum ability extends to 2 spaces. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) be moved to 1 space of attacker's end position.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_2", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#diamonds1", "title": "Diamonds1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_1", "title": "PC: Level 1", "text": "HP AP AR PP SPD 6 0 3 4 4 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_3", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive", "title": "Passive", "text": "<ul> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_3", "title": "Vulny", "text": "<ul> <li>Frail Form: Vulny. When you take this Vulnerability, your combat speed is reduced by two spaces. When making a check to traverse terrain, draw with the Lower Hand.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_3", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#diamonds2", "title": "Diamonds2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_1", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 0 3 4 4 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_4", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_1", "title": "Passive", "text": "<ul> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_4", "title": "Vulny", "text": "<ul> <li>Frail Form: Vulny. When you take this Vulnerability, your combat speed is reduced by two spaces. When making a check to traverse terrain, draw with the Lower Hand.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_4", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#diamonds3", "title": "Diamonds3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_1", "title": "PC: Level 3", "text": "HP AP AR PP SPD 8 0 3 6 4 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_5", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_2", "title": "Passive", "text": "<ul> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_5", "title": "Vulny", "text": "<ul> <li>Frail Form: Vulny. When you take this Vulnerability, your combat speed is reduced by two spaces. When making a check to traverse terrain, draw with the Lower Hand.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_5", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Illusion: Major. For 1 or 2 PP, You make an illusory intangible visual (no larger than 1 space) or auditory effect that you've heard before. To determine if it's real, a character makes a Contested Detection Check. For 2 PP, you can generate both visual and auditory effects, and the check to verify draws with the Lower Hand</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#hearts1", "title": "Hearts1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_2", "title": "PC: Level 1", "text": "HP AP AR PP SPD 4 0 3 5 6 AGL CON GUT INT STR VIT -2 0 2 0 0 -2 <p>Skills: Finesse -1, Stealth -1, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_6", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_6", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Frail, Minor: Vulny. On character creation, you start with -1 VIT. Add -1 to VIT</li> <li>Clumsy, Minor: Vulny. On character creation, you start with -1 AGL. Add -1 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_6", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Heal: Major. For 1 or 2 PP, Heal yourself or another you can see for 1 or 2 Health Points</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_3", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#hearts2", "title": "Hearts2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_2", "title": "PC: Level 2", "text": "HP AP AR PP SPD 6 0 3 5 6 AGL CON GUT INT STR VIT -2 0 2 0 0 0 <p>Skills: Finesse -1, Stealth -1, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_7", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_7", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Clumsy, Minor: Vulny. On character creation, you start with -1 AGL. Add -1 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_7", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Heal: Major. For 1 or 2 PP, Heal yourself or another you can see for 1 or 2 Health Points</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_4", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#hearts3", "title": "Hearts3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_2", "title": "PC: Level 3", "text": "HP AP AR PP SPD 7 0 3 7 6 AGL CON GUT INT STR VIT -2 0 2 0 0 0 <p>Skills: Finesse -1, Stealth -1, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_8", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_8", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Clumsy, Minor: Vulny. On character creation, you start with -1 AGL. Add -1 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_8", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Heal: Major. For 1 or 2 PP, Heal yourself or another you can see for 1 or 2 Health Points</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Lend Vigor: Major. For 2 PP, Target creature can take an additional Major Action and move 2 additional spaces during their movement on their next turn.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_5", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#spades1", "title": "Spades1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_3", "title": "PC: Level 1", "text": "HP AP AR PP SPD 5 0 2 4 6 AGL CON GUT INT STR VIT 2 0 1 0 0 0 <p>Skills: Finesse 2, Stealth 2, Knowledge 1, Investigation 1, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_9", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_9", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_9", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#spades2", "title": "Spades2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_3", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 0 2 4 6 AGL CON GUT INT STR VIT 2 0 1 0 0 1 <p>Skills: Finesse 2, Stealth 2, Knowledge 1, Investigation 1, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_10", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_3", "title": "Passive", "text": "<ul> <li>Stealth in the Shadows: Passive. When you make a Stealth check in dim light or darkness, you draw with the Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_10", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_10", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#spades3", "title": "Spades3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_3", "title": "PC: Level 3", "text": "HP AP AR PP SPD 8 0 2 4 6 AGL CON GUT INT STR VIT 2 0 1 0 0 1 <p>Skills: Finesse 2, Stealth 2, Bluffing 1, Knowledge 1, Investigation 1, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_11", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_4", "title": "Passive", "text": "<ul> <li>Stealth in the Shadows: Passive. When you make a Stealth check in dim light or darkness, you draw with the Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_11", "title": "Vulny", "text": "<ul> <li>Outsider: Vulny. For any Conviction check to interact with the dominant society, you draw with the Lower Hand. If chosen as Major, work with the GM to decide some feature of your background that makes you unwelcome in most public places.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_11", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Attack, Sweep: Major. For 2 PP, You perform you Weapon Attack on multiple contiguous characters within 1 space. For 2 PP, on a hit, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#crusader1", "title": "Crusader1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_4", "title": "PC: Level 1", "text": "HP AP AR PP SPD 6 2 2 1 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_12", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_12", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Savior: Vulny. Work with your GM to decide a group or organization that believes you are the key to their salvation. You may encounter a member of this group that requires your help.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_12", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_6", "title": "Minor", "text": "<ul> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#crusader2", "title": "Crusader2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_4", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 2 2 2 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_13", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_5", "title": "Passive", "text": "<ul> <li>Battlecharged: Passive. When drawing initiative, Draw with Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_13", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Savior: Vulny. Work with your GM to decide a group or organization that believes you are the key to their salvation. You may encounter a member of this group that requires your help.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_13", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_7", "title": "Minor", "text": "<ul> <li>Aura of Defensive Damage: Minor. For 1 PP, Allied creatures within range gain the effects of your Aura. For one minute, when a creature is hit by a melee attack, the attacker takes 1 damage.</li> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#crusader3", "title": "Crusader3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_4", "title": "PC: Level 3", "text": "HP AP AR PP SPD 8 2 2 5 6 AGL CON GUT INT STR VIT 1 0 0 0 2 1 <p>Skills: Finesse 1, Stealth 1, Athletics 2, Brute 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_14", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_14", "title": "Vulny", "text": "<ul> <li>Oath: Vulny. Work with your GM to define the code you live by. This may be pacifism or always helping those in need.</li> <li>Savior: Vulny. Work with your GM to decide a group or organization that believes you are the key to their salvation. You may encounter a member of this group that requires your help.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_14", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Vengeance: Major. When an ally takes damage in combat, you may take a Weapon Attack against the attacker on your next turn with the Upper Hand.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Staggering Blow: Major. For 1 PP, Make a Weapon Attack against a creature. On a successful hit,, target(s) make a VIT Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) Stunned.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_8", "title": "Minor", "text": "<ul> <li>Aura of Defensive Damage: Minor. For 1 PP, Allied creatures within range gain the effects of your Aura. For one minute, when a creature is hit by a melee attack, the attacker takes 1 damage.</li> <li>Aura of Regeneration: Minor. For 2 PP, Allied creatures within range gain the effects of your Aura. For one minute, when they draw a Suited Hit or a Suited Miss, they regain 1 PP, limited to 1 per round.</li> <li>Momentum: Minor. As part of your movement, you attempt to move a creature who is within 1 space of you. If unwilling, target(s) make a STR or AGL Save with a DR of 3 minus half the Primary Skill of the Attacker. On fail, target(s) are moved to 1 space of attacker's end position.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#summoner1", "title": "Summoner1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_5", "title": "PC: Level 1", "text": "HP AP AR PP SPD 6 0 3 4 6 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_15", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_6", "title": "Passive", "text": "<ul> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_15", "title": "Vulny", "text": "<ul> <li>Wanted: Vulny. Work with your GM to decide an NPC or organization that thinks you are responsible for a crime. You may encounter a member of this group who wants you in jail, or stand trial, or outright dead.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_15", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#summoner2", "title": "Summoner2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_5", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 0 3 6 6 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 2, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_16", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_7", "title": "Passive", "text": "<ul> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_16", "title": "Vulny", "text": "<ul> <li>Wanted: Vulny. Work with your GM to decide an NPC or organization that thinks you are responsible for a crime. You may encounter a member of this group who wants you in jail, or stand trial, or outright dead.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_16", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Summon Creature: Major. For 2 PP, Summon a creature to assist you for 1 hour. This creature uses the 'Summoned Creature' stat block and is treated as a Companion for the duration. You choose the creature's form.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#summoner3", "title": "Summoner3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_5", "title": "PC: Level 3", "text": "HP AP AR PP SPD 8 0 3 7 6 AGL CON GUT INT STR VIT 0 0 0 2 -4 1 <p>Skills: Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2, Athletics -2, Brute -2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_17", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_8", "title": "Passive", "text": "<ul> <li>Life Link: Passive. While you have at least one summoned creature active, when you take damage you can choose to apply that damage to your summoned creature instead.</li> <li>Lucky: Passive. On a Suited Miss, you may redraw once. This Power cannot be used multiple times on the same check.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_17", "title": "Vulny", "text": "<ul> <li>Wanted: Vulny. Work with your GM to decide an NPC or organization that thinks you are responsible for a crime. You may encounter a member of this group who wants you in jail, or stand trial, or outright dead.</li> <li>Weak, Major: Vulny. On character creation, you start with -2 STR. Add -2 to STR</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_17", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Mystic Cone: Major. Mystic Attack or DR 3 CON Save to avoid being Knocked Down. For 2 PP, All characters in a Cone 3 are subjected to this effect. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Knocked Down, take 2 damage. On success, target(s) Take half damage.</li> <li>Attack, Mystic Entangle: Major. For 1 or 2 PP, Choose a point you can see within 12 spaces. All creatures within Aura 3 make a Save. Once, target(s) make a DR 3 AGL Save. On fail, target(s) Entangled.</li> <li>Summon Creature: Major. For 2 PP, Summon a creature to assist you for 1 hour. This creature uses the 'Summoned Creature' stat block and is treated as a Companion for the duration. You choose the creature's form.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_9", "title": "Minor", "text": "<ul> <li>Phase Swap: Minor. For 1 PP, Use half your speed to swap spaces with a Summoned Creature</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#alchemist1", "title": "Alchemist1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_6", "title": "PC: Level 1", "text": "HP AP AR PP SPD 5 0 3 1 6 AGL CON GUT INT STR VIT -4 0 2 0 0 0 <p>Skills: Finesse -2, Stealth -2, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_18", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_18", "title": "Vulny", "text": "<ul> <li>Cowardly Ally: Vulny. If you have movement remaining after attacking, you must try to position yourself so that an ally is between you and an enemy.</li> <li>Clumsy, Major: Vulny. On character creation, you start with -2 AGL. Add -2 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_18", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_10", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#alchemist2", "title": "Alchemist2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_6", "title": "PC: Level 2", "text": "HP AP AR PP SPD 6 0 3 2 6 AGL CON GUT INT STR VIT -4 0 2 0 0 0 <p>Skills: Finesse -2, Stealth -1, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_19", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_19", "title": "Vulny", "text": "<ul> <li>Cowardly Ally: Vulny. If you have movement remaining after attacking, you must try to position yourself so that an ally is between you and an enemy.</li> <li>Clumsy, Major: Vulny. On character creation, you start with -2 AGL. Add -2 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_19", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Create Potion: Major. For 1 PP, Create a Potion of Healing. After successfully completing a Quick Rest, you can exchange one Rest Card to create a Potion of Healing without expending Power Points. All Potions created last until the end of your next Full Rest.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_11", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#alchemist3", "title": "Alchemist3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_7", "title": "PC: Level 2", "text": "HP AP AR PP SPD 7 0 3 3 6 AGL CON GUT INT STR VIT -4 0 2 0 0 0 <p>Skills: Finesse -2, Stealth -2, Bluffing 1, Knowledge 2, Investigation 2, Detection 2, Craft 2</p>"}, {"location": "1_Mechanics/08_PCs/#powers_20", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_9", "title": "Passive", "text": "<ul> <li>Potent Brew: Passive. When using a Power that creates a consumable, increase the damage healed or dealt by 1.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_20", "title": "Vulny", "text": "<ul> <li>Cowardly Ally: Vulny. If you have movement remaining after attacking, you must try to position yourself so that an ally is between you and an enemy.</li> <li>Clumsy, Major: Vulny. On character creation, you start with -2 AGL. Add -2 to AGL</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_20", "title": "Major", "text": "<ul> <li>Mystic Attack: Major. You can make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Shield: Major. For 1 PP, Add 1 AP to a creature you can see, including yourself. This effect does not stack with other Powers that grant AP.</li> <li>Create Potion: Major. For 1 PP, Create a Potion of Healing. After successfully completing a Quick Rest, you can exchange one Rest Card to create a Potion of Healing without expending Power Points. All Potions created last until the end of your next Full Rest.</li> <li>Create Poison: Major. For 1 PP, Create a Poison Bottle. Poison Bottle can be applied to a weapon. For 1 minute, all Weapon Attacks force a DR 2 VIT Save, on a failure they take 1 damage bypassing AP. All Poison Bottles created last until the end of your next Full Rest.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#minor_12", "title": "Minor", "text": "<ul> <li>Lend Aid: Minor. Draw a card, hold it in reserve, and designate one creature within 12 spaces. At any time within the next 1 minute, the creature may use your card as if they had Upper Hand. If you use this Power again before the card is used, the effect transfers to the new target.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#assassin1", "title": "Assassin1", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-1_7", "title": "PC: Level 1", "text": "HP AP AR PP SPD 5 0 2 2 6 AGL CON GUT INT STR VIT 2 0 1 1 0 0 <p>Skills: Finesse 2, Stealth 2, Knowledge 1, Investigation 2, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_21", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#vulny_21", "title": "Vulny", "text": "<ul> <li>Vendetta: Vulny. Work with your GM to decide an NPC that has wronged you in the past.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_21", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#assassin2", "title": "Assassin2", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-2_8", "title": "PC: Level 2", "text": "HP AP AR PP SPD 6 0 2 2 6 AGL CON GUT INT STR VIT 2 0 1 1 0 0 <p>Skills: Finesse 2, Stealth 2, Knowledge 1, Investigation 2, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_22", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_10", "title": "Passive", "text": "<ul> <li>Hidden Strike: Passive. When attacking an enemy that is unaware of your presence or engaged with an ally within 1 space, you draw with Upper Hand. Any attacks that are successful deal +1 damage</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_22", "title": "Vulny", "text": "<ul> <li>Vendetta: Vulny. Work with your GM to decide an NPC that has wronged you in the past.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_22", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#assassin3", "title": "Assassin3", "text": ""}, {"location": "1_Mechanics/08_PCs/#pc-level-3_6", "title": "PC: Level 3", "text": "HP AP AR PP SPD 7 0 2 4 6 AGL CON GUT INT STR VIT 2 0 1 1 0 0 <p>Skills: Finesse 2, Stealth 2, Knowledge 1, Investigation 2, Detection 1, Craft 1</p>"}, {"location": "1_Mechanics/08_PCs/#powers_23", "title": "Powers", "text": ""}, {"location": "1_Mechanics/08_PCs/#passive_11", "title": "Passive", "text": "<ul> <li>Hidden Strike: Passive. When attacking an enemy that is unaware of your presence or engaged with an ally within 1 space, you draw with Upper Hand. Any attacks that are successful deal +1 damage</li> <li>Keen Eye: Passive. When you make a Detection check to observe the world around you (visual, auditory, etc.), draw with the Upper Hand.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#vulny_23", "title": "Vulny", "text": "<ul> <li>Vendetta: Vulny. Work with your GM to decide an NPC that has wronged you in the past.</li> <li>Eye for an Eye: Vulny. If you attack in combat, you must target the enemy who hit you most recently.</li> </ul>"}, {"location": "1_Mechanics/08_PCs/#major_23", "title": "Major", "text": "<ul> <li>Weapon Attack: Major. You make a check to attack an Enemy. This may be performed while under the effects of another Power.</li> <li>Attack, Charge: Major. For 1 or 2 PP, You must move 3 spaces before using this Power. You add +1 or +2 to the damage on a successful Weapon Attack. Power Points are still expended on a miss</li> <li>Vanishing Step: Major. For 2 PP, Choose a point you can see within 10 spaces. If the space is unoccupied, you appear there Hidden. You cannot attempt to occupy a space that is occupied by another creature.</li> </ul>"}, {"location": "1_Mechanics/99_Glossary/", "title": "Glossary", "text": "<ul> <li>AR, Armor Range: How difficult is it to   wound this thing during a combat Check?</li> <li>Action Deck: a pool of cards to be drawn    from when making in-game decisions.</li> <li>AP, Armor Points: a pool of points that   reduce when taking a damage. All damage except psychic and poisoning is applied to AP   before HP.</li> <li>Discard Pile: a separate pile of cards that   have already been used. The discard pile is only shuffled back into the Action Deck   during a Rest.</li> <li>Power: Boons or special abilities granted   to a Dealer.</li> <li>Role: General descriptor of a character role   (e.g., Caster, Defender). Some Powers have Role prerequisites.</li> <li>Attribute: Major skill   domain, each with associated modifier adding to related Skills.</li> <li>Bystander: Less powerful   non-player character.</li> <li>Check: A card-draw to determine an unknown   outcome, defined by a Target Card and Difficulty Range window around that card.</li> <li>Check, Contested: A Check wherein two   character Skills are in conflict. The initiating character draws a TC and sets a DR of   4 minus the relevant modifier.</li> <li>Companions: Side-kick or   pet for a Dealer.</li> <li>DC, Difficulty Range: How hard is it to do   this thing during a check? Defined by window around the Target Card you draw to   succeed on a check.</li> <li>Dealer: Player character   or powerful non-player character</li> <li>Epic Event: Draw multiple cards to pass a series   of checks usually resulting in collective success or failure.</li> <li>Fate Cards: King/Aces cards held for redraws.</li> <li>PP, Power Points: Limited resource used   when</li> <li>GM, Game Master: Narrator   and curator of the story.</li> <li>Hand, Upper/Lower: Draw N cards and report   the result closest (Upper), or furthest (Lower) from the TC. If unspecified, draw 2.</li> <li>HP, Health Points: pool of health from   which damage can subtract, before getting Knocked Out.</li> <li>KO, Knocked Out: Effect applied to a Dealer with no   HP. Unconscious and on the brink of death.</li> <li>Modifier: The number a   player may add or subtract from a draw before reporting the value on a check.</li> <li>Passive: A descriptor for Powers that are   always in effect.</li> <li>Player: Active participant   in the story.</li> <li>Rest: Break for the character during which the Player   shuffles cards and replenishes resources. Quick Rests last 30 minutes; Full Rests last   8 hours.</li> <li>Rest Cards: A limited pool of cards used to recover   Health or Power Points during Quick Rests.</li> <li>Skill: A skill within an   Attribute, each with associated Modifier.</li> <li>TC, Target Card: The card that sets the   mid-point of the range for a Check.</li> <li>The House: Audience observing the game, neither player nor GM.</li> <li>Vulnerability: Weaknesses that   inhibit a Dealer in some way, either combat- or roleplay-based.</li> <li>XP, Experience Points: Resource for   building a character awarded on leveling up.</li> <li>Hidden: A property of a creature that is   unseen or undetected.</li> </ul>"}, {"location": "1_Mechanics/PremadeCharacters/", "title": "Premade Characters", "text": "<p>We provide premade character sheets in this directory for each of the four Roles with levels 1 - 3.</p> <ol> <li> <p>Caster Surrey is a learn'ed mage. She's getting on in years and uses magic to navigate the world, be it illusion or explosion. Vain to a fault, but some of her narcissism may be justified.</p> <ul> <li>Level 1</li> <li>Level 2</li> <li>Level 3</li> </ul> </li> <li> <p>Defender Thadius is a strength-based brute. He controls the battlefield and has such a commanding presence that he can drag an enemy through sheer force of will. His drive for violence could become an issue.</p> <ul> <li>Level 1</li> <li>Level 2</li> <li>Level 3</li> </ul> </li> <li> <p>Martial Sparrow leads with his gut, in an instinctual connection to nature. Their wolf companion is always by their side, an extension of their senses, and a manifestation of their commitment to protect the natural world at all costs.</p> <ul> <li>Level 1</li> <li>Level 2</li> <li>Level 3</li> </ul> </li> <li> <p>Support Jude is a kind, intuitive soul who would prefer to heal wounds rather than cause them. Their connection to an otherworldly deity brings magic to aid allies. Living among humans as an android has cultivated her drive for pacifism.</p> <ul> <li>Level 1</li> <li>Level 2</li> <li>Level 3</li> </ul> </li> </ol>"}, {"location": "1_Mechanics/Visual_Tools/", "title": "Visual Tools", "text": ""}, {"location": "1_Mechanics/Visual_Tools/#tcdr-lookup-tool", "title": "TC/DR Lookup Tool", "text": "<p>By printing the 'Circular' images the in this directory , you can make your own DR lookup tool. Simply cut around the circles of both the back   and inner images and poke a pin through the center. By spinning the inner plate to   position the TC at 0, you'll have the upper and lower limits for any DR.</p> <p></p> <p>For a spreadsheet version of the same tool, see this link.</p>"}, {"location": "1_Mechanics/Visual_Tools/#range-references", "title": "Range References", "text": "<p>Some powers will refer to an area of effect as either a line, aura, or cone. This is sometimes followed by a number to indicate the size. These are fully defined in the GM Guide. 'Range' images in this directory show what this would look like on either a grid or hex map. These show Line 6, Aura 1, Aura 2, and Cone 3.</p>"}, {"location": "2_Development/01_Community/", "title": "Community", "text": "<p>Deck of Adventures developers are deeply appreciative of our active community. We welcome proposed contributions from all, but reserve the right to integrate changes as they align with our design principles.</p> <p>Join our Discord server!</p> <p>Note: if the above link is expired, please submit an issue.</p>"}, {"location": "2_Development/01_Community/#members", "title": "Members", "text": "<ul> <li>Admin:<ul> <li>Lock (he/him)</li> <li>Broz (he/him)</li> </ul> </li> <li>Moderators:</li> <li>Community leaders:</li> <li>Contributors: See your name here by contributing!</li> </ul>"}, {"location": "2_Development/01_Community/#roles", "title": "Roles", "text": "<ul> <li>Admins mange (a) permissions and versioning decisions, (b) merge major pull requests.</li> <li>Moderators integrate proposed changes by drafting major pull requests from issues, and    may merge minor pull requests.</li> <li>Community leaders triage major and minor edits via GitHub issue labeling and pull   request comments.</li> <li>Contributors have drafted major pull requests.</li> </ul> <p>Major pull requests include substantial additions to this repository or revisions of   multiple existing sessions. An edit is considered major if it has the potential to   introduce conflicts with existing material.</p> <p>Minor pull requests include short clarification phrases or corrections to existing   work. In the event of confusion, admin decide the scope of the change, and reserve   the right to revert changes.</p>"}, {"location": "2_Development/02_Design_Document/", "title": "Design Document", "text": ""}, {"location": "2_Development/02_Design_Document/#drafting-specifics", "title": "Drafting specifics", "text": "<ul> <li>The following are not permitted in filenames: <code>() {} [] !@#$%^&amp;* ' `</code> and spaces.</li> <li>Flavor text that is included in under mechanics always be separable for future   versions that will apply to different settings. To identify flavor text, use quotes   within the parent formatting scheme. For example:</li> <li>The Defender Archetype is ...</li> <li> <p>Defenders of the Realm are renowned for their mighty shields ...</p> </li> <li>Specialized terms are listed in the Glossary and will   be capitalized across all documents.</li> <li>Terms that are for flavor, not mechanics, are Italicized</li> </ul>"}, {"location": "2_Development/02_Design_Document/#core-design-principles", "title": "Core Design Principles", "text": "<p>Deck of Adventures is, first and foremost, designed for accessibility, both in ease of on-boarding and ease of access. Not everyone has specialty dice or the time to study complex interconnected rules released over a long history. While becoming a Game Master (GM) may take some time and dedication, a player completely new to tabletop roleplaying should be able to pick up Deck of Adventures and start playing within an hour. This means mechanics should be easy to learn, and easy to explain during a first session. One only needs a standard deck of playing cards.</p> <p>Second, Deck of Adventures is designed to be flexible, across the many types of stories GMs want to tell. While our mechanics have been workshopped with lore from the World of Erdania, all core mechanics should be portable to another setting. In other words, Deck of Adventures is setting-agnostic. No core mechanic should imply a specific setting (e.g., magical fantasy) and all settings should be playable by ignoring or reflavoring a subset of optional mechanics (e.g., the Mystic Aura is EMP tech).</p> <p>Third, participants should be able to quickly and easily engage in rich storytelling with only a standard deck of playing cards. Any component that doesn't contribute to this end should be revisited. Accessible and flexible doesn't, however, mean sparse. A first-time player can pick up a pre-made character in minutes, but then optionally spend much longer planning out how to make a bespoke character that speaks to them, with creativity fueled by the wide array of choices.</p>"}, {"location": "2_Development/02_Design_Document/#design-axioms", "title": "Design Axioms", "text": "<p>Though iterative design, developers have landed on the following as touchstones.</p> <ol> <li> <p>Pip value is contextual. The number on the card has no inherent value. There's nothing good or bad about a <code>2</code> or a <code>King</code>, a <code>Spade</code> or a <code>Club</code>. The randomized context determines how good the outcome is.</p> </li> <li> <p>PP = HP = AP. During rests, players decide which of these resources to replenish. Characters may have different maximum, but expending one should feel roughly equivalent to the others.</p> </li> <li> <p>Target Cards remain on a character at all times. Each character is always represented by a Target Card. Between combats, the TC remains active on a character for any other Checks. A new TC is drawn at the start of the next combat to shuffle the turn order around for each combat.</p> </li> <li> <p>Target Cards changing often is important. When Player Dealers are drawing cards constantly aiming at a specific TC, the likelihood of a success decreases as more cards that hit are drawn from the deck. Changing TCs to represent each enemy or challenge keeps the odds of drawing a success balanced over the course of an Adventure.</p> </li> </ol>"}, {"location": "2_Development/03_Development_Timeline/", "title": "Development Timeline", "text": ""}, {"location": "2_Development/03_Development_Timeline/#initial-development", "title": "Initial Development", "text": "<p>Ideation Phase</p> <p>Idea for Deck of Adventures and initial decision to use playing cards.</p> <p>Core Development</p> <p>Started GitHub Repo and initial foundation of the core ruleset.</p> <p>Pre-Alpha</p> <p>Developed the First Target Card System, developed a series of intro Adventures to test.</p> <p>Alpha Development Feedback - HERE AS OF JUNE 2022</p> <p>Building the core ruleset and refining ahead of Beta using Alpha Test Feedback.</p>"}, {"location": "2_Development/03_Development_Timeline/#beta-testing-feedback", "title": "Beta Testing &amp; Feedback", "text": "<p>Closed Beta</p> <p>Testing the core ruleset across a variety of pre-defined Adventures, without Custom Character Creation.</p> <p>Open Beta</p> <p>Any GM can run the core game, and the beginning of testing Custom Character Creation Mechanics.</p> <p>Beta Development Feedback</p> <p>Implementing the Beta Test Feedback ahead of the launch.</p>"}, {"location": "2_Development/03_Development_Timeline/#public-launch", "title": "Public Launch", "text": "<p>Pre-Launch</p> <p>Preparing Website and Community to launch and ongoing support for players.</p> <p>Launch</p> <p>Public-facing launch of Website, Game, and initial set of Adventures.</p>"}, {"location": "2_Development/03_Development_Timeline/#post-launch", "title": "Post-Launch", "text": "<p>Ongoing Development</p> <p>Continue supporting players and refining the core mechanics, plus develop new Adventure Modules.</p>"}, {"location": "api/automation/main/", "title": "Main", "text": ""}, {"location": "api/automation/version/", "title": "Version", "text": ""}, {"location": "api/automation/pdf/split_premades/", "title": "Split premades", "text": ""}, {"location": "api/automation/pdf/split_premades/#automation.pdf.split_premades.split_pdf", "title": "<code>split_pdf(dry_run=True, roles=['Defender', 'Caster', 'Support', 'Martial'], level_max=3, pdf_path=Path(glob('./automation/_input/*PremadeSheet*pdf')[0]), out_folder=Path('../docs/src/1_Mechanics/PremadeCharacters/'), return_paths=False)</code>", "text": "<p>Splits PDF for premades into individual png files: Premade_{Role}_Level{#}.png</p> <p>Parameters:</p> Name Type Description Default <code>dry_run</code> <code>bool</code> <p>If true (default), just logs filename as info.</p> <code>True</code> <code>roles</code> <code>list</code> <p>Roles in order as they appear in pdf. Defaults to [\"Defender\", \"Caster\", \"Support\", \"Martial\"].</p> <code>['Defender', 'Caster', 'Support', 'Martial']</code> <code>level_max</code> <code>int</code> <p>Max levels being split in file. Defaults to 3.</p> <code>3</code> <code>pdf_path</code> <code>Path</code> <p>Input pdf path. Defaults to Path(glob(\"../_input/temp_CharSheet*pdf\")[0]).</p> <code>Path(glob('./automation/_input/*PremadeSheet*pdf')[0])</code> <code>out_folder</code> <code>Path</code> <p>Output png folder. Defaults to Path(\"../docs/src/1_Mechanics/PremadeCharacters/\").</p> <code>Path('../docs/src/1_Mechanics/PremadeCharacters/')</code> <code>return_paths</code> <code>bool</code> <p>If True, function returns list of output Pathlib objects. Defaults False.</p> <code>False</code> Source code in <code>automation/pdf/split_premades.py</code> <pre><code>def split_pdf(\n    dry_run: bool = True,\n    roles: list = [\"Defender\", \"Caster\", \"Support\", \"Martial\"],\n    level_max: int = 3,\n    pdf_path: Path = Path(glob(\"./automation/_input/*PremadeSheet*pdf\")[0]),\n    out_folder: Path = Path(\"../docs/src/1_Mechanics/PremadeCharacters/\"),\n    return_paths: bool = False,\n):\n\"\"\"Splits PDF for premades into individual png files: Premade_{Role}_Level{#}.png\n\n    Args:\n        dry_run (bool, optional): If true (default), just logs filename as info.\n        roles (list, optional): Roles in order as they appear in pdf.\n            Defaults to [\"Defender\", \"Caster\", \"Support\", \"Martial\"].\n        level_max (int, optional): Max levels being split in file. Defaults to 3.\n        pdf_path (Path, optional): Input pdf path.\n            Defaults to Path(glob(\"../_input/temp_CharSheet*pdf\")[0]).\n        out_folder (Path, optional): Output png folder.\n            Defaults to Path(\"../docs/src/1_Mechanics/PremadeCharacters/\").\n        return_paths (bool): If True, function returns list of output Pathlib objects.\n            Defaults False.\n    \"\"\"\n    role_idx = 0  # Initialize which role\n    level = 0  # Initialize which level for role\n    pages = convert_from_path(pdf_path, 500)\n    output_paths = []\n    for num, page in enumerate(pages):\n        level = num % 3 + 1\n        file_name = \"Premade_\" + roles[role_idx] + \"_Level\" + str(level) + \".png\"\n\n        logger.info(file_name)\n\n        fp = out_folder / file_name\n        output_paths.append(fp)\n\n        if not dry_run:\n            page.save(fp, \"PNG\")\n        if level == level_max:\n            role_idx += 1\n\n    if return_paths:\n        return output_paths\n</code></pre>"}, {"location": "api/automation/simulator/deck/", "title": "Deck", "text": ""}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card", "title": "<code>Card</code>", "text": "<p>             Bases: <code>object</code></p> <p>Card class</p> Example use <pre><code>from automation.simulation.deck import Card\nCard(\"SA\") == Card(\"S\",\"A\")\n&gt; True\n</code></pre> <p>Attributes:</p> Name Type Description <code>suit</code> <code>str</code> <p>one of [D,C,H,S,R,B] for Diamond, Club, Heart, Spade, Red, Black</p> <code>val</code> <code>str</code> <p>one of [A, K, Q, J, T] for Ace to Ten. Or 2 to 9.</p> <code>val_number</code> <code>int</code> <p>integer corresponding to above value</p> <code>color</code> <code>str</code> <p>either R or B for red or black</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>class Card(object):\n\"\"\"Card class\n\n    Example use:\n        ```python\n        from automation.simulation.deck import Card\n        Card(\"SA\") == Card(\"S\",\"A\")\n        &gt; True\n        ```\n\n    Attributes:\n        suit (str): one of [D,C,H,S,R,B] for Diamond, Club, Heart, Spade, Red, Black\n        val (str): one of [A, K, Q, J, T] for Ace to Ten. Or 2 to 9.\n        val_number (int): integer corresponding to above value\n        color (str): either R or B for red or black\n    \"\"\"\n\n    def __init__(self, suit, val=\" \"):\n        if len(suit) == 2:\n            self.suit = suit[0].upper()\n            self.val = suit[1].upper()\n        elif val.lower() == \"joker\":\n            self.suit = suit[0].upper()\n            self.val = \"Joker\"\n        else:\n            self.suit = suit[0].upper()\n            self.val = val[0].upper()\n\n        if self.val != \"Joker\" and (\n            self.suit not in all_suits or self.val not in all_vals\n        ):\n            if suit.lower() != \"random\":\n                logger.warning(f\"Couldn't make card value from input: {suit}, {val}\")\n            self.suit = random.choice(all_suits)\n            self.val = random.choice(all_vals)\n\n        self._val_to_num = {  # A:1, 2:2, ... T:10\n            \"A\": 1,\n            \"2\": 2,\n            \"3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n            \"T\": 10,\n            \"J\": 11,\n            \"Q\": 12,\n            \"K\": 0,\n            \"Joker\": \"Joker\",\n        }\n        self._num_to_val = {v: k for k, v in self._val_to_num.items()}\n\n    @property\n    def suit_symbol(self):\n\"\"\"Symbol for each suit, including red and black for jokers\"\"\"\n        return {\n            \"D\": \"\u2666\ufe0f\",\n            \"C\": \"\u2660\ufe0f\",\n            \"H\": \"\u2665\ufe0f\",\n            \"S\": \"\u2660\ufe0f\",\n            \"R\": \"\ud83d\udfe5\",  # Red joker\n            \"B\": \"\u2b1b\",  # Black joker\n        }[self.suit]\n\n    @property\n    def val_number(self):\n\"\"\"Integer value for number, to permit calculations\"\"\"\n        return self._val_to_num[self.val]\n\n    @property\n    def color(self):\n\"\"\"R or B\"\"\"\n        return \"B\" if self.suit in [\"C\", \"S\", \"B\"] else \"R\"\n\n    def __repr__(self):\n\"\"\"Result of print(card)\"\"\"\n        return f\"{self.suit_symbol} {self.val}\"\n\n    def __add__(self, x: int):\n\"\"\"Result of card + integer. Loops around\"\"\"\n        assert self.val != \"Joker\", \"Cannot add/subtract Joker\"\n        return self._num_to_val[(self.val_number + x) % 13]\n\n    def __sub__(self, x: int):\n\"\"\"Result of card - integer. Loops around\"\"\"\n        assert self.val != \"Joker\", \"Cannot add/subtract Joker\"\n        return self._num_to_val[(self.val_number - x) % 13]\n\n    def __eq__(self, x):\n\"\"\"Returns true if two cards are the same\"\"\"\n        return (self.suit == x.suit) &amp; (self.val == x.val)\n\n    def __hash__(self):\n\"\"\"Returns unique value to represent card\"\"\"\n        return hash((self.suit, self.val))\n\n    def range(self, DR: int):\n\"\"\"Returns list of cards in a DR\"\"\"\n        DR = abs(DR)\n        return [self + diff for diff in range(-DR, DR + 1)]\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.suit_symbol", "title": "<code>suit_symbol</code>  <code>property</code>", "text": "<p>Symbol for each suit, including red and black for jokers</p>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.val_number", "title": "<code>val_number</code>  <code>property</code>", "text": "<p>Integer value for number, to permit calculations</p>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.color", "title": "<code>color</code>  <code>property</code>", "text": "<p>R or B</p>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Result of print(card)</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __repr__(self):\n\"\"\"Result of print(card)\"\"\"\n    return f\"{self.suit_symbol} {self.val}\"\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.__add__", "title": "<code>__add__(x)</code>", "text": "<p>Result of card + integer. Loops around</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __add__(self, x: int):\n\"\"\"Result of card + integer. Loops around\"\"\"\n    assert self.val != \"Joker\", \"Cannot add/subtract Joker\"\n    return self._num_to_val[(self.val_number + x) % 13]\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.__sub__", "title": "<code>__sub__(x)</code>", "text": "<p>Result of card - integer. Loops around</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __sub__(self, x: int):\n\"\"\"Result of card - integer. Loops around\"\"\"\n    assert self.val != \"Joker\", \"Cannot add/subtract Joker\"\n    return self._num_to_val[(self.val_number - x) % 13]\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.__eq__", "title": "<code>__eq__(x)</code>", "text": "<p>Returns true if two cards are the same</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __eq__(self, x):\n\"\"\"Returns true if two cards are the same\"\"\"\n    return (self.suit == x.suit) &amp; (self.val == x.val)\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.__hash__", "title": "<code>__hash__()</code>", "text": "<p>Returns unique value to represent card</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __hash__(self):\n\"\"\"Returns unique value to represent card\"\"\"\n    return hash((self.suit, self.val))\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Card.range", "title": "<code>range(DR)</code>", "text": "<p>Returns list of cards in a DR</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def range(self, DR: int):\n\"\"\"Returns list of cards in a DR\"\"\"\n    DR = abs(DR)\n    return [self + diff for diff in range(-DR, DR + 1)]\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck", "title": "<code>Deck</code>", "text": "<p>             Bases: <code>object</code></p> <p>Full deck of cards</p> Example use <pre><code>from automation.simulation.deck import Deck\nd=Deck()\nd.draw()\n&gt; \u2666\ufe0f A\nd.check(TC=Card(\"S\",\"A\"),DR=3)\n&gt; [INFO]: Drew \u2666\ufe0f 8 vs \u2660\ufe0f A with DR 3: Miss\n</code></pre> <p>Attributes:</p> Name Type Description <code>suits</code> <code>tuple</code> <p>all suits in deck</p> <code>vals</code> <code>tuple</code> <p>all values in deck</p> <code>cards</code> <code>list</code> <p>source deck</p> <code>discards</code> <code>list</code> <p>discard pile</p> <code>hand</code> <code>list</code> <p>jokers and fate cards in hand</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>class Deck(object):\n\"\"\"Full deck of cards\n\n    Example use:\n        ```python\n        from automation.simulation.deck import Deck\n        d=Deck()\n        d.draw()\n        &gt; \u2666\ufe0f A\n        d.check(TC=Card(\"S\",\"A\"),DR=3)\n        &gt; [INFO]: Drew \u2666\ufe0f 8 vs \u2660\ufe0f A with DR 3: Miss\n        ```\n\n    Attributes:\n        suits (tuple): all suits in deck\n        vals (tuple): all values in deck\n        cards (list): source deck\n        discards (list): discard pile\n        hand (list): jokers and fate cards in hand\n    \"\"\"\n\n    def __init__(self, use_TC=True):\n        self.cards, self.hand, self.discards = [], [], []\n        self._jokers = [Card(\"B\", \"Joker\"), Card(\"R\", \"Joker\")]\n        # \"Start\" with all discarded. Shuffle assumes only shuffle from discard to cards\n        self.discards.extend([Card(s, v) for s in all_suits for v in all_vals])\n        self.hand.extend(self._jokers)\n        self._use_TC = use_TC\n        self.Name = \"GM\" if not self._use_TC else \"Deck\"\n        self._TC = None\n        self.shuffle()\n        self.result_types = {\n            \"Critical Success\": 5,\n            \"Major Success\": 4,\n            \"Suited Hit\": 3,\n            \"Color Hit\": 2,\n            \"Hit\": 1,\n            \"No result\": 0,\n            \"Suited Miss\": -1,\n            \"Color Miss\": -2,\n            \"Miss\": -3,\n        }\n        self.result_types.update(dict([reversed(i) for i in self.result_types.items()]))\n\n    def __repr__(self):\n\"\"\"Result of print(Deck)\"\"\"\n        output = \"\"\n        output += f\"TC      : {self.TC}\\n\"\n        output += f\"Hand    :  {len(self.hand):02d}\\n\"\n        output += f\"Deck    :  {len(self.cards):02d}\\n\"\n        output += f\"Discards:  {len(self.discards):02d}\\n\"\n        return output\n\n    def shuffle(self, limit: int = None):\n\"\"\"Shuffle N from discard to deck\n\n        If limit provided, only shuffle those from discard. If no limit, reshuffle all\n        discarded. Add jokers back to hand.\n\n        Args:\n            limit (int, optional): Number of cards to shuffle back into deck. Defaults\n                to None.\n        \"\"\"\n        random.shuffle(self.discards)\n        if not limit:\n            limit = len(self.discards)\n            self.hand = [*set((*self.hand, *self._jokers))]  # Set removes duplicates\n        self.cards.extend(self.discards[:limit])\n        self.discards = self.discards[limit:]\n        random.shuffle(self.cards)\n        if self._use_TC:\n            self.draw_TC()\n\n    @property\n    def TC(self) -&gt; Card:\n\"\"\"Target card\n\n        Returns:\n            Card: Current Target Card from deck. Not applicable to GM decks.\n        \"\"\"\n        if not self._TC and self._use_TC:\n            self.draw_TC\n        return self._TC\n\n    def draw_TC(self):\n\"\"\"Draw a new target card\"\"\"\n        self._TC = self.draw()\n\n    def draw(self) -&gt; Card | None:\n\"\"\"Draw a card, if available. Otherwise returns None.\n\n        Returns:\n            Card: _description_\n        \"\"\"\n\"\"\"Draw a card. If any available, return card\"\"\"\n        if len(self.cards) == 0 and self._use_TC:\n            logger.warning(\"No cards available in deck.\")\n            return None\n        elif len(self.cards) == 0 and not self._use_TC:\n            self.shuffle()  # for GMs, just shuffle\n        card = self.cards.pop()\n        if card.val == \"A\":\n            self.hand.append(card)\n        else:\n            self.discards.append(card)\n        return card\n\n    def check_by_skill(self, **kwargs):\n        if self._use_TC:\n            raise TypeError(\"check_by_skill method invoked on a non-GM deck\")\n        kwargs.pop(\"skill\", None)\n        return self.check(**kwargs)\n\n    def discard(self, n: int, return_string=False, **_) -&gt; str | None:\n\"\"\"Draw n cards, return none. Discard/hand as normal\n\n        Args:\n            n (int): Number of cards to discard. If \"all\", uses discards all remaining.\n            return_string (bool, optional): Return a string reflecting result. Defaults\n                to False.\n\n        Returns:\n            str | None: If return_string, report \"Drew X\"\n        \"\"\" \"\"\"\"\"\"\n        if n == \"all\":\n            n = len(self.cards)\n\n        draws = []\n        for _ in range(n):\n            draws.append(self.draw())\n\n        if return_string:\n            return f\"Drew {draws}\"\n\n    def exchange_fate(self, return_string=False) -&gt; str | None:\n\"\"\"Move fate card from hand. If Ace, add to discard\n\n        Args:\n            return_string (bool, optional): Default to False\"\"\"\n        if len(self.hand) == 0:\n            result = \"No cards available to exchange\"\n        else:\n            card = self.hand.pop()\n            if card.val == \"A\":\n                self.discards.append(card)\n            result = f\"Exchanged Fate Card: {card}\"\n\n        if return_string:\n            return result\n\n        logger.info(result)\n\n    def _basic_check(self, TC: Card, DR: int) -&gt; None | int:\n\"\"\"Return string corresponding to check 'Hit/Miss/Color/Suit' etc\n\n        Args:\n            TC (Card): Target card\n            DR: (int): Difficulty Range\n            mod (int): DR modifier\n        \"\"\"\n        DR = abs(DR)\n        draw = self.draw()\n        result = \"\"\n        if draw is None:\n            result += \"No result\"\n        elif draw == TC:\n            result += \"Critical Success\"\n        elif draw.val == TC.val:\n            result += \"Major Success\"\n        else:\n            if draw.suit == TC.suit:\n                result += \"Suited \"\n            elif draw.color == TC.color:\n                result += \"Color \"\n            result += \"Hit\" if draw.val in TC.range(DR) else \"Miss\"\n        return (draw, self.result_types[result])  # Return (draw, int)\n\n    def check(\n        self,\n        TC: Card,\n        DR: int,\n        mod: int = 0,\n        upper_lower: str = \"none\",\n        draw_n: int = 1,\n        upper_lower_int: int = 0,\n        draw_all: bool = False,\n        return_val: bool = False,\n        return_string: bool = False,\n        verbose=True,\n    ) -&gt; tuple[int, str] | str:\n\"\"\"Log string corresponding to check 'Hit/Miss/Color/Suit' etc\n\n        Args:\n            TC (Card): Target card\n            DR: (int): Difficulty Range\n            mod (int): DR modifier\n            upper_lower (str): 'upper' or 'lower' Hand ('u' or 'l'). Default neither.\n            draw_n (int): How many to draw. If upper/lower, default 2. Otherwise 1.\n            upper_lower_int (int): Instead of passing upper_lower and draw_n, use\n                positive/negative for upper/lower with int of draw_n -1.\n                for example, -1 for draw 2 lower\n            draw_all (bool): If upper hand, draw all before stopping. Default false.\n            return_val (bool): Return the integer of the result. Default False.\n            return_string (bool): Return the string describing what happened. Default\n                False.\n            verbose (bool): Log the result string as a debug item\n\n        Returns:\n            tuple | str: If return_string, returns a tuple containing the result as a\n                string, followed by the result value. If return_val, only integer result.\n        \"\"\"\n\n        DR = max(0, abs(DR) + mod)  # Apply mod to non-negative TR\n        if upper_lower_int:\n            upper_lower = (\n                \"U\" if upper_lower_int &gt; 0 else \"L\" if upper_lower_int &lt; 0 else \"N\"\n            )\n            draw_n = 1 if upper_lower == \"N\" else abs(upper_lower_int) + 1\n        else:\n            upper_lower = upper_lower[0].upper()\n            draw_n = 1 if upper_lower == \"N\" else 2 if abs(draw_n) == 1 else abs(draw_n)\n\n        results = []\n        draws = []\n\n        for _ in range(draw_n):\n            draw, this_result = self._basic_check(TC, DR)\n            draws.append(draw)\n            results.append(this_result)\n            if results[-1] &gt; 0 and not draw_all and upper_lower == \"U\":\n                break  # If success (&gt;0) and not draw-all with upper, stop drawing\n\n        ul_str = \"\"\n        if upper_lower == \"U\":\n            ul_str = f\" at Upper Hand {draw_n}\"\n        elif upper_lower == \"L\":\n            ul_str = f\" at Lower Hand {draw_n}\"\n\n        result = max(results) if upper_lower == \"U\" else min(results)\n        result_string = (\n            f\"Drew {draws} vs {TC} with DR {DR}{ul_str}: {self.result_types[result]}\"\n        )\n\n        if verbose:\n            logger.debug(result_string)\n\n        if return_string:\n            return result_string, result\n        elif return_val:\n            return result\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Result of print(Deck)</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def __repr__(self):\n\"\"\"Result of print(Deck)\"\"\"\n    output = \"\"\n    output += f\"TC      : {self.TC}\\n\"\n    output += f\"Hand    :  {len(self.hand):02d}\\n\"\n    output += f\"Deck    :  {len(self.cards):02d}\\n\"\n    output += f\"Discards:  {len(self.discards):02d}\\n\"\n    return output\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.shuffle", "title": "<code>shuffle(limit=None)</code>", "text": "<p>Shuffle N from discard to deck</p> <p>If limit provided, only shuffle those from discard. If no limit, reshuffle all discarded. Add jokers back to hand.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>Number of cards to shuffle back into deck. Defaults to None.</p> <code>None</code> Source code in <code>automation/simulator/deck.py</code> <pre><code>def shuffle(self, limit: int = None):\n\"\"\"Shuffle N from discard to deck\n\n    If limit provided, only shuffle those from discard. If no limit, reshuffle all\n    discarded. Add jokers back to hand.\n\n    Args:\n        limit (int, optional): Number of cards to shuffle back into deck. Defaults\n            to None.\n    \"\"\"\n    random.shuffle(self.discards)\n    if not limit:\n        limit = len(self.discards)\n        self.hand = [*set((*self.hand, *self._jokers))]  # Set removes duplicates\n    self.cards.extend(self.discards[:limit])\n    self.discards = self.discards[limit:]\n    random.shuffle(self.cards)\n    if self._use_TC:\n        self.draw_TC()\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.TC", "title": "<code>TC: Card</code>  <code>property</code>", "text": "<p>Target card</p> <p>Returns:</p> Name Type Description <code>Card</code> <code>Card</code> <p>Current Target Card from deck. Not applicable to GM decks.</p>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.draw_TC", "title": "<code>draw_TC()</code>", "text": "<p>Draw a new target card</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def draw_TC(self):\n\"\"\"Draw a new target card\"\"\"\n    self._TC = self.draw()\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.draw", "title": "<code>draw()</code>", "text": "<p>Draw a card, if available. Otherwise returns None.</p> <p>Returns:</p> Name Type Description <code>Card</code> <code>Card | None</code> <p>description</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def draw(self) -&gt; Card | None:\n\"\"\"Draw a card, if available. Otherwise returns None.\n\n    Returns:\n        Card: _description_\n    \"\"\"\n\"\"\"Draw a card. If any available, return card\"\"\"\n    if len(self.cards) == 0 and self._use_TC:\n        logger.warning(\"No cards available in deck.\")\n        return None\n    elif len(self.cards) == 0 and not self._use_TC:\n        self.shuffle()  # for GMs, just shuffle\n    card = self.cards.pop()\n    if card.val == \"A\":\n        self.hand.append(card)\n    else:\n        self.discards.append(card)\n    return card\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.discard", "title": "<code>discard(n, return_string=False, **_)</code>", "text": "<p>Draw n cards, return none. Discard/hand as normal</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of cards to discard. If \"all\", uses discards all remaining.</p> required <code>return_string</code> <code>bool</code> <p>Return a string reflecting result. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: If return_string, report \"Drew X\"</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def discard(self, n: int, return_string=False, **_) -&gt; str | None:\n\"\"\"Draw n cards, return none. Discard/hand as normal\n\n    Args:\n        n (int): Number of cards to discard. If \"all\", uses discards all remaining.\n        return_string (bool, optional): Return a string reflecting result. Defaults\n            to False.\n\n    Returns:\n        str | None: If return_string, report \"Drew X\"\n    \"\"\" \"\"\"\"\"\"\n    if n == \"all\":\n        n = len(self.cards)\n\n    draws = []\n    for _ in range(n):\n        draws.append(self.draw())\n\n    if return_string:\n        return f\"Drew {draws}\"\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.exchange_fate", "title": "<code>exchange_fate(return_string=False)</code>", "text": "<p>Move fate card from hand. If Ace, add to discard</p> <p>Parameters:</p> Name Type Description Default <code>return_string</code> <code>bool</code> <p>Default to False</p> <code>False</code> Source code in <code>automation/simulator/deck.py</code> <pre><code>def exchange_fate(self, return_string=False) -&gt; str | None:\n\"\"\"Move fate card from hand. If Ace, add to discard\n\n    Args:\n        return_string (bool, optional): Default to False\"\"\"\n    if len(self.hand) == 0:\n        result = \"No cards available to exchange\"\n    else:\n        card = self.hand.pop()\n        if card.val == \"A\":\n            self.discards.append(card)\n        result = f\"Exchanged Fate Card: {card}\"\n\n    if return_string:\n        return result\n\n    logger.info(result)\n</code></pre>"}, {"location": "api/automation/simulator/deck/#automation.simulator.deck.Deck.check", "title": "<code>check(TC, DR, mod=0, upper_lower='none', draw_n=1, upper_lower_int=0, draw_all=False, return_val=False, return_string=False, verbose=True)</code>", "text": "<p>Log string corresponding to check 'Hit/Miss/Color/Suit' etc</p> <p>Parameters:</p> Name Type Description Default <code>TC</code> <code>Card</code> <p>Target card</p> required <code>DR</code> <code>int</code> <p>(int): Difficulty Range</p> required <code>mod</code> <code>int</code> <p>DR modifier</p> <code>0</code> <code>upper_lower</code> <code>str</code> <p>'upper' or 'lower' Hand ('u' or 'l'). Default neither.</p> <code>'none'</code> <code>draw_n</code> <code>int</code> <p>How many to draw. If upper/lower, default 2. Otherwise 1.</p> <code>1</code> <code>upper_lower_int</code> <code>int</code> <p>Instead of passing upper_lower and draw_n, use positive/negative for upper/lower with int of draw_n -1. for example, -1 for draw 2 lower</p> <code>0</code> <code>draw_all</code> <code>bool</code> <p>If upper hand, draw all before stopping. Default false.</p> <code>False</code> <code>return_val</code> <code>bool</code> <p>Return the integer of the result. Default False.</p> <code>False</code> <code>return_string</code> <code>bool</code> <p>Return the string describing what happened. Default False.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>Log the result string as a debug item</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[int, str] | str</code> <p>tuple | str: If return_string, returns a tuple containing the result as a string, followed by the result value. If return_val, only integer result.</p> Source code in <code>automation/simulator/deck.py</code> <pre><code>def check(\n    self,\n    TC: Card,\n    DR: int,\n    mod: int = 0,\n    upper_lower: str = \"none\",\n    draw_n: int = 1,\n    upper_lower_int: int = 0,\n    draw_all: bool = False,\n    return_val: bool = False,\n    return_string: bool = False,\n    verbose=True,\n) -&gt; tuple[int, str] | str:\n\"\"\"Log string corresponding to check 'Hit/Miss/Color/Suit' etc\n\n    Args:\n        TC (Card): Target card\n        DR: (int): Difficulty Range\n        mod (int): DR modifier\n        upper_lower (str): 'upper' or 'lower' Hand ('u' or 'l'). Default neither.\n        draw_n (int): How many to draw. If upper/lower, default 2. Otherwise 1.\n        upper_lower_int (int): Instead of passing upper_lower and draw_n, use\n            positive/negative for upper/lower with int of draw_n -1.\n            for example, -1 for draw 2 lower\n        draw_all (bool): If upper hand, draw all before stopping. Default false.\n        return_val (bool): Return the integer of the result. Default False.\n        return_string (bool): Return the string describing what happened. Default\n            False.\n        verbose (bool): Log the result string as a debug item\n\n    Returns:\n        tuple | str: If return_string, returns a tuple containing the result as a\n            string, followed by the result value. If return_val, only integer result.\n    \"\"\"\n\n    DR = max(0, abs(DR) + mod)  # Apply mod to non-negative TR\n    if upper_lower_int:\n        upper_lower = (\n            \"U\" if upper_lower_int &gt; 0 else \"L\" if upper_lower_int &lt; 0 else \"N\"\n        )\n        draw_n = 1 if upper_lower == \"N\" else abs(upper_lower_int) + 1\n    else:\n        upper_lower = upper_lower[0].upper()\n        draw_n = 1 if upper_lower == \"N\" else 2 if abs(draw_n) == 1 else abs(draw_n)\n\n    results = []\n    draws = []\n\n    for _ in range(draw_n):\n        draw, this_result = self._basic_check(TC, DR)\n        draws.append(draw)\n        results.append(this_result)\n        if results[-1] &gt; 0 and not draw_all and upper_lower == \"U\":\n            break  # If success (&gt;0) and not draw-all with upper, stop drawing\n\n    ul_str = \"\"\n    if upper_lower == \"U\":\n        ul_str = f\" at Upper Hand {draw_n}\"\n    elif upper_lower == \"L\":\n        ul_str = f\" at Lower Hand {draw_n}\"\n\n    result = max(results) if upper_lower == \"U\" else min(results)\n    result_string = (\n        f\"Drew {draws} vs {TC} with DR {DR}{ul_str}: {self.result_types[result]}\"\n    )\n\n    if verbose:\n        logger.debug(result_string)\n\n    if return_string:\n        return result_string, result\n    elif return_val:\n        return result\n</code></pre>"}, {"location": "api/automation/simulator/encounter/", "title": "Encounter", "text": ""}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter", "title": "<code>Encounter</code>", "text": "<p>             Bases: <code>object</code></p> <p>A Deck of Adventures encounter.</p> <p>A series of methods for simulating an encounter in Deck of Adventures.</p> <p>Attributes:</p> Name Type Description <code>gm_deck</code> <code>Deck</code> <p>Single deck for GM in encounter</p> <code>PCs</code> <code>list[Player]</code> <p>List of Players. If initialized with Beast type, will be converted to Players</p> <code>Enemies</code> <code>list[Player]</code> <p>List of Enemies. If initialized with Beast type, will be converted to Players</p> <code>turn_order</code> <code>list[Player]</code> <p>Concatenated list of PCs and Enemies in randomized order</p> <code>status_list</code> <code>list[Str]</code> <p>List of statuses that are simulated.</p> Source code in <code>automation/simulator/encounter.py</code> <pre><code>class Encounter(object):\n\"\"\"A Deck of Adventures encounter.\n\n    A series of methods for simulating an encounter in Deck of Adventures.\n\n    Attributes:\n        gm_deck (Deck): Single deck for GM in encounter\n        PCs (list[Player]): List of Players. If initialized with Beast type, will be\n            converted to Players\n        Enemies (list[Player]): List of Enemies. If initialized with Beast type, will be\n            converted to Players\n        turn_order (list[Player]): Concatenated list of PCs and Enemies in randomized\n            order\n        status_list (list[Str]): List of statuses that are simulated.\n\n    \"\"\"\n\n    def __init__(self, PCs: list[Player | Beast], Enemies: list[Player | Beast]):\n        self.gm_deck = Deck(use_TC=False)\n        self.PCs = [p if isinstance(p, Player) else Player(**p) for p in PCs]\n        self.enemies = [p if isinstance(p, Player) else Player(**p) for p in Enemies]\n        self.turn_order = [*self.PCs, *self.enemies]\n        random.shuffle(self.turn_order)\n        self.status_list = [\n            \"Stunned\",\n            \"Entangled\",\n            \"Knocked\",\n            \"Blinded\",\n            \"Deafened\",\n            \"Knocked Out\",\n            \"Knocked Down\",\n            \"Burned\",\n            \"Poisoned\",\n            \"Frozen\",\n            \"Suffocating\",\n            \"Charmed\",\n            \"Enthralled\",\n        ]\n        self._not_simulated = [\"Blinded\", \"Deafened\", \"Enthralled\", \"Charmed\"]\n\n    def set_csv_logging(self, setting: bool):\n\"\"\"Turn on CSV logging for all Players in turn_order\"\"\"\n        for char in self.turn_order:\n            char._CSV_LOGGING = setting\n\n    def add_creature(self, creature: Player, side: str = \"Enemies\"):\n\"\"\"Add a creature of type Player to the Encounter.\n\n        Args:\n            creature (Player): creature to be added\n            side (str, optional): Enemies or PCs. Defaults to \"Enemies\".\n        \"\"\"\n        if not isinstance(creature, Player):\n            creature = Player(**creature)  # Assume dict if not Player class\n        if side.lower() == \"enemies\":\n            self.enemies.append(creature)\n        else:\n            self.PCs.append(creature)\n        self.turn_order = [*self.PCs, *self.enemies]\n\n    def _apply_power(\n        self,\n        attacker: Player,\n        targets: list[Player],\n        power: Power = None,\n        return_string: bool = False,\n        force_result: int = None,  # Force outcome\n    ) -&gt; str | None:\n\"\"\"Perform a Power, attack a target.\n\n        Args:\n            attacker (Player): creature performing Power\n            targets (list[Player]): List of possible targets\n            power (Power, optional): Power to be used. Defaults to None, where nothing\n                happens.\n            return_string (bool, optional): Return a string describing what happened.\n                Defaults to False.\n            force_result (int, optional): Override card draw. Defaults to None, where\n                attacker/targets draw according to Power for random result.\n\n        Returns:\n            str | None: If return_string, returns a string describing results.\n        \"\"\"\n        targets = ensure_list(targets)\n        if not power:\n            return\n\n        result_strings = [f\"{attacker.Name} used {power.Name}\"]\n\n        for _ in range(ensure_list(power.Targets)[0]):\n            target = random.choice(targets)\n            if power.Save:\n                DR = power.Save.DR or 3 - floor(attacker.Primary_Skill_Mod / 2)\n                result = target.save(DR=DR, attrib=power.Save.Type, return_val=True)\n                if force_result:\n                    result = force_result\n                if result &lt; 0:\n                    if power.Save.Fail in self.status_list:\n                        target._statuses[power.Save.Fail] = (\n                            target._statuses.get(power.Save.Fail, 0) + 1\n                        )\n                        result_strings.append(\n                            f\"{target.Name} is {power.Save.Fail}: \"\n                            + f\"{target._statuses.get(power.Save.Fail, 0)}\"\n                        )\n                        if power.Save.Fail in self._not_simulated:\n                            logger.warning(\n                                f\"{target.Name} {power.Save.Fail} not simulated\"\n                            )\n                    else:\n                        result_strings.append(f\"{target.Name} {power.Save.Fail}\")\n                elif result &gt; 0:\n                    result_strings.append(f\"{target.Name} resisted {power.Save.Fail}\")\n                    if power.Save.Succeed:\n                        result_strings.append(\n                            target.Name + \" \" + power.Save.Succeed + \". Not simulated\"\n                        )\n            if power.Damage:\n                damage = ensure_list(power.Damage)[0]\n                result = attacker.check_by_skill(\n                    TC=target.TC,\n                    DR=target.AR,\n                    skill=attacker.Primary_Skill,\n                    upper_lower_int=power.upper_lower_int,\n                    return_val=True,\n                )\n                if result &gt; 0:\n                    wound = damage + 1 if result &gt; 3 else damage\n                    target.wound(wound)\n                    if result &gt; 3:\n                        target._statuses[\"Stunned\"] = 1\n                    result_strings.append(\n                        f\"{attacker.Name} wounded {target.Name} by \"\n                        + f\"{wound}: AP {target.AP}/{target.AP_Max}, HP \"\n                        + f\"{target.HP}/{target.HP_Max}\"\n                    )\n            if not return_string:\n                logger.info(result_strings)\n                result_strings = []\n\n        if return_string:\n            return \"\\n\".join(result_strings)\n\n    def _take_turn(self, attacker: Player, targets: list[Player]):\n\"\"\"Runs the attackers turn on list of possible targets.\n\n        Randomizes if Major or Minor action is taken first before executing all\n        components of attacker's turn.\n\n        Args:\n            attacker (Player): Player taking the turn.\n            targets (list[Player]): List of possible targets.\n        \"\"\"\n        actions = [\"Major\", \"Minor\"]\n        random.shuffle(actions)  # Randomize major vs minor first\n\n        attacker.start_turn()\n        for action in actions:\n            self._apply_power(attacker, targets, attacker.take_action(action))\n        attacker.end_turn()\n\n    def _sim_single_round(self):\n\"\"\"Simulate a single round in turn order.\"\"\"\n        for char in self.turn_order:\n            if char.HP &lt;= 0:\n                logger.info(f\"{char.Name} is Knocked Out, no turn\")\n            else:\n                self._take_turn(char, self.enemies if char in self.PCs else self.PCs)\n\n    def sim_round(self, n: int = 1):\n\"\"\"Run n number of rounds of combat in turn order.\n\n        Args:\n            n (int, optional): Number of rounds to simulate. Defaults to 1.\n        \"\"\"\n        for _ in range(n):\n            self._sim_single_round()\n\n    def sim_full_rest(self, participants: list[Player] = None):\n\"\"\"Simulate a full rest for all participants provided. Default to all.\n\n        Args:\n            participants (list[Player], optional): Creatures who should take a full rest.\n                Defaults to all in turn order.\n        \"\"\"\n        if not participants:\n            participants = self.turn_order\n        for char in participants:\n            char.full_rest()\n\n    def sim_quick_rest(self, participants: list[Player] = None, **kwargs):\n\"\"\"Simulate a quick rest for all participants provided. Default to all.\n\n        Args:\n            participants (list[Player], optional): Creatures who should take a quick rest.\n                Defaults to all in turn order.\n        \"\"\"\n        if not participants:\n            participants = self.turn_order\n        for char in self.turn_order:\n            char.quick_rest(**kwargs)\n\n    def sim_epic_event(\n        self,\n        TC: Card = None,\n        DR=3,\n        participants: list[Player] = None,\n        skills: list[str] | str = None,\n        successes_needed: int = 1,\n        return_string: bool = False,\n    ) -&gt; str | None:\n\"\"\"Simulate an epic event. Players go first, them GM.\n\n        Args:\n            TC (Card): target card. Default draw from gm_deck\n            DR (int): Difficulty range.\n            participants (list[Player]): list of those involved on a TC. Default all PCs\n            skills (list[str] | str): Type of check for each participant in participant\n                order. Default 0 mod. If same for all, provide as single string.\n                e.g., participants=[PC1, PC2], skill=['STR','Finesse'].\n            successes_needed (int): N suited hits before end. Default 1\n            return_string (bool): return a string describing the result.\n        \"\"\"\n        if not TC:\n            TC = self.gm_deck.draw()\n        if not participants:\n            participants = copy.copy(self.PCs)\n        else:\n            participants = ensure_list(participants)\n        if not isinstance(skills, list):\n            skills = [skills] * len(participants)\n\n        participants.append(self.gm_deck)\n        skills.append(None)\n\n        player_successes = 0\n        gm_successes = 0\n        draw_count = 0\n\n        while player_successes &lt; successes_needed and gm_successes &lt; successes_needed:\n            for participant, skill in zip(participants, skills):\n                draw_count += 1\n                result = participant.check_by_skill(\n                    TC=TC, DR=DR, skill=skill, return_val=True\n                )\n                success = True if result &gt; 2 else False\n                if success and participant.Name == \"GM\":\n                    gm_successes += 1\n                elif success:\n                    player_successes += 1\n\n                if success:\n                    logger.info(\n                        f\"Party {player_successes}, GM {gm_successes} | \"\n                        + f\"{participant.Name} {participant.result_types[result]}\"\n                    )\n        victor = \"GM\" if gm_successes &gt; player_successes else \"Party\"\n        result_string = f\"{victor} wins after {draw_count} total cards drawn\"\n\n        if return_string:\n            return result_string\n\n        logger.info(result_string)\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.set_csv_logging", "title": "<code>set_csv_logging(setting)</code>", "text": "<p>Turn on CSV logging for all Players in turn_order</p> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def set_csv_logging(self, setting: bool):\n\"\"\"Turn on CSV logging for all Players in turn_order\"\"\"\n    for char in self.turn_order:\n        char._CSV_LOGGING = setting\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.add_creature", "title": "<code>add_creature(creature, side='Enemies')</code>", "text": "<p>Add a creature of type Player to the Encounter.</p> <p>Parameters:</p> Name Type Description Default <code>creature</code> <code>Player</code> <p>creature to be added</p> required <code>side</code> <code>str</code> <p>Enemies or PCs. Defaults to \"Enemies\".</p> <code>'Enemies'</code> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def add_creature(self, creature: Player, side: str = \"Enemies\"):\n\"\"\"Add a creature of type Player to the Encounter.\n\n    Args:\n        creature (Player): creature to be added\n        side (str, optional): Enemies or PCs. Defaults to \"Enemies\".\n    \"\"\"\n    if not isinstance(creature, Player):\n        creature = Player(**creature)  # Assume dict if not Player class\n    if side.lower() == \"enemies\":\n        self.enemies.append(creature)\n    else:\n        self.PCs.append(creature)\n    self.turn_order = [*self.PCs, *self.enemies]\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.sim_round", "title": "<code>sim_round(n=1)</code>", "text": "<p>Run n number of rounds of combat in turn order.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of rounds to simulate. Defaults to 1.</p> <code>1</code> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def sim_round(self, n: int = 1):\n\"\"\"Run n number of rounds of combat in turn order.\n\n    Args:\n        n (int, optional): Number of rounds to simulate. Defaults to 1.\n    \"\"\"\n    for _ in range(n):\n        self._sim_single_round()\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.sim_full_rest", "title": "<code>sim_full_rest(participants=None)</code>", "text": "<p>Simulate a full rest for all participants provided. Default to all.</p> <p>Parameters:</p> Name Type Description Default <code>participants</code> <code>list[Player]</code> <p>Creatures who should take a full rest. Defaults to all in turn order.</p> <code>None</code> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def sim_full_rest(self, participants: list[Player] = None):\n\"\"\"Simulate a full rest for all participants provided. Default to all.\n\n    Args:\n        participants (list[Player], optional): Creatures who should take a full rest.\n            Defaults to all in turn order.\n    \"\"\"\n    if not participants:\n        participants = self.turn_order\n    for char in participants:\n        char.full_rest()\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.sim_quick_rest", "title": "<code>sim_quick_rest(participants=None, **kwargs)</code>", "text": "<p>Simulate a quick rest for all participants provided. Default to all.</p> <p>Parameters:</p> Name Type Description Default <code>participants</code> <code>list[Player]</code> <p>Creatures who should take a quick rest. Defaults to all in turn order.</p> <code>None</code> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def sim_quick_rest(self, participants: list[Player] = None, **kwargs):\n\"\"\"Simulate a quick rest for all participants provided. Default to all.\n\n    Args:\n        participants (list[Player], optional): Creatures who should take a quick rest.\n            Defaults to all in turn order.\n    \"\"\"\n    if not participants:\n        participants = self.turn_order\n    for char in self.turn_order:\n        char.quick_rest(**kwargs)\n</code></pre>"}, {"location": "api/automation/simulator/encounter/#automation.simulator.encounter.Encounter.sim_epic_event", "title": "<code>sim_epic_event(TC=None, DR=3, participants=None, skills=None, successes_needed=1, return_string=False)</code>", "text": "<p>Simulate an epic event. Players go first, them GM.</p> <p>Parameters:</p> Name Type Description Default <code>TC</code> <code>Card</code> <p>target card. Default draw from gm_deck</p> <code>None</code> <code>DR</code> <code>int</code> <p>Difficulty range.</p> <code>3</code> <code>participants</code> <code>list[Player]</code> <p>list of those involved on a TC. Default all PCs</p> <code>None</code> <code>skills</code> <code>list[str] | str</code> <p>Type of check for each participant in participant order. Default 0 mod. If same for all, provide as single string. e.g., participants=[PC1, PC2], skill=['STR','Finesse'].</p> <code>None</code> <code>successes_needed</code> <code>int</code> <p>N suited hits before end. Default 1</p> <code>1</code> <code>return_string</code> <code>bool</code> <p>return a string describing the result.</p> <code>False</code> Source code in <code>automation/simulator/encounter.py</code> <pre><code>def sim_epic_event(\n    self,\n    TC: Card = None,\n    DR=3,\n    participants: list[Player] = None,\n    skills: list[str] | str = None,\n    successes_needed: int = 1,\n    return_string: bool = False,\n) -&gt; str | None:\n\"\"\"Simulate an epic event. Players go first, them GM.\n\n    Args:\n        TC (Card): target card. Default draw from gm_deck\n        DR (int): Difficulty range.\n        participants (list[Player]): list of those involved on a TC. Default all PCs\n        skills (list[str] | str): Type of check for each participant in participant\n            order. Default 0 mod. If same for all, provide as single string.\n            e.g., participants=[PC1, PC2], skill=['STR','Finesse'].\n        successes_needed (int): N suited hits before end. Default 1\n        return_string (bool): return a string describing the result.\n    \"\"\"\n    if not TC:\n        TC = self.gm_deck.draw()\n    if not participants:\n        participants = copy.copy(self.PCs)\n    else:\n        participants = ensure_list(participants)\n    if not isinstance(skills, list):\n        skills = [skills] * len(participants)\n\n    participants.append(self.gm_deck)\n    skills.append(None)\n\n    player_successes = 0\n    gm_successes = 0\n    draw_count = 0\n\n    while player_successes &lt; successes_needed and gm_successes &lt; successes_needed:\n        for participant, skill in zip(participants, skills):\n            draw_count += 1\n            result = participant.check_by_skill(\n                TC=TC, DR=DR, skill=skill, return_val=True\n            )\n            success = True if result &gt; 2 else False\n            if success and participant.Name == \"GM\":\n                gm_successes += 1\n            elif success:\n                player_successes += 1\n\n            if success:\n                logger.info(\n                    f\"Party {player_successes}, GM {gm_successes} | \"\n                    + f\"{participant.Name} {participant.result_types[result]}\"\n                )\n    victor = \"GM\" if gm_successes &gt; player_successes else \"Party\"\n    result_string = f\"{victor} wins after {draw_count} total cards drawn\"\n\n    if return_string:\n        return result_string\n\n    logger.info(result_string)\n</code></pre>"}, {"location": "api/automation/simulator/player/", "title": "Player", "text": ""}, {"location": "api/automation/simulator/player/#automation.simulator.player.Player", "title": "<code>Player</code>", "text": "<p>             Bases: <code>Deck</code>, <code>Beast</code></p> Source code in <code>automation/simulator/player.py</code> <pre><code>class Player(Deck, Beast):\n    def __init__(self, use_TC=True, **kwargs):\n        Deck.__init__(self, use_TC)\n        Beast.__init__(self, **kwargs)\n        self._valid_attribs = [f.name for f in fields(self.Attribs)] + [\"None\"]\n        self._valid_skills = [f.name for f in fields(self.Skills)] + [\"None\"]\n        self._valid_mods = self._valid_attribs + [f.name for f in fields(self.Skills)]\n        self._fatigue = 0\n        self._PP_mult = 1\n        self._statuses = {\n            \"upper_lower_save\": 0,\n            \"upper_lower_check\": 0,\n            \"upper_lower_next_save\": 0,\n            \"upper_lower_next_check\": 0,\n            \"Entangled\": 0,\n            \"Knocked Down\": 0,\n            \"Knocked Out\": 0,\n        }\n        self._not_simulated = [\"Blinded\", \"Deafened\", \"Enthralled\", \"Charmed\"]\n        self._CSV_LOGGING = False  # Toggled at Encounter level\n\n    def __repr__(self):\n\"\"\"Result of print(Player)\"\"\"\n        output = self.Name + \"\\n\"\n        output += \"TC       :%02s | pc.HP : %d/%d\\n\" % (\n            self.TC,\n            self.HP,\n            self.HP_Max,\n        )\n        output += \"Hand     :  %02d | pc.PP : %d/%d\\n\" % (\n            len(self.hand),\n            self.PP,\n            self.PP_Max,\n        )\n        output += \"Deck     :  %02d | pc.AP : %d/%d\\n\" % (\n            len(self.cards),\n            self.AP,\n            self.AP_Max,\n        )\n        output += \"Discards :  %02d | RestC : %d/%d\\n\" % (\n            len(self.discards),\n            self.RestCards,\n            self.RestCards_Max,\n        )\n        return output\n\n    def _apply_upper_lower(self, save_check: str, kwarg_dict: dict, skill=\"\") -&gt; dict:\n        # TODO: change save_check to enum: save, check\n        all_type = \"upper_lower_\" + save_check\n        next_type = \"upper_lower_next_\" + save_check\n        extra = 0\n        if self._statuses.get(\"Entangled\", False) and skill == \"AGL\":\n            extra -= 1\n        if self._statuses.get(\"Knocked Down\", False) and skill in [\"AGL\", \"STR\"]:\n            extra -= 1\n        if self._statuses.get(\"Frozen\", False) and save_check == \"check\":\n            extra -= 1\n        if self._fatigue &gt; 0 and save_check == \"save\":\n            extra -= 1\n        elif self._fatigue &gt; 1:\n            extra -= 1\n        kwarg_dict[\"upper_lower_int\"] = (\n            0 + kwarg_dict.get(\"upper_lower_int\", 0)\n            if kwarg_dict.get(\"upper_lower_int\", False)\n            else 0\n            + self._statuses.get(all_type, 0)\n            + self._statuses.get(next_type, 0)\n            + extra\n        )\n        self._statuses[next_type] = 0\n        return kwarg_dict\n\n    def modify_fatigue(self, change=1, shuffle=True):\n        self._fatigue += change\n        if shuffle:\n            self.shuffle()\n        if self._fatigue &gt;= 3 and not self._statuses.get(\"_fatigue3\"):\n            self._statuses[\"_fatigue3\"] = True\n            self.Speed = self.Speed / 2\n        if self._fatigue &gt;= 4 and not self._statuses.get(\"_fatigue4\"):\n            self._statuses[\"_fatigue4\"] = True\n            self._PP_mult = 2\n        if self._fatigue &gt;= 5 and not self._statuses.get(\"_fatigue5\"):\n            self._statuses[\"_fatigue5\"] = True\n            self._statuses[\"Knocked Out\"] = self._statuses.get(\"Knocked Out\", 0) + 1\n\n    def _find_highest_stat(self, options: list) -&gt; int:\n        if not isinstance(options, list):\n            return options, getattr(self.Attribs, options, 0) or getattr(\n                self.Skills, options, 0\n            )\n        vals = {}\n        for option in options:\n            vals.update(\n                {\n                    option: getattr(self.Attribs, option, 0)\n                    or getattr(self.Skills, option, 0)\n                }\n            )\n        skill = max(vals, key=vals.get)\n        return skill, vals[skill]\n\n    def check_by_skill(self, TC: Card = None, DR: int = 3, skill: str = None, **kwargs):\n\"\"\"Accepts any Skill or Attrib. Accepts any valid args of Deck.check\"\"\"\n        if not TC:\n            TC = Card(\"random\")\n\n        if not skill:\n            skill = \"None\"\n        if self._CSV_LOGGING:\n            kwargs[\"return_val\"] = True\n\n        skill, mod = self._find_highest_stat(skill)\n        new_kwargs = self._apply_upper_lower(\"check\", kwargs, skill=skill)\n\n        n_deck = len(self.cards)\n        if abs(new_kwargs.get(\"upper_lower_int\", 1)) &gt; n_deck or n_deck == 0:\n            # does not offer option to use fate cards to avoid fatigue\n            self.modify_fatigue()\n            logger.debug(\"Fatigue modified from check_by_skill\")\n\n        # Need to account for return_string for bot and result for checking result\n        if new_kwargs.get(\"return_string\"):\n            result_string, result = self.check(TC, DR, mod=mod, **new_kwargs)\n        else:\n            result = self.check(TC, DR, mod=mod, **new_kwargs)\n\n        # NOTE: draw_log doesn't know if had options\n        draw_log.info(\n            [\n                self.id,\n                \"check\",\n                result,\n                self.result_types.get(result, None),\n                DR,\n                skill,\n                mod,\n                kwargs.get(\"upper_lower\", \"n\"),\n                kwargs.get(\"draw_n\", 1),\n            ]\n        )\n        if new_kwargs.get(\"return_string\"):\n            return result_string\n        return result\n\n    def save(self, DR: int = 3, attrib=\"None\", **kwargs):\n\"\"\"Accepts any Attrib. Accepts any valid args of Deck.check\"\"\"\n        if self._CSV_LOGGING:\n            kwargs[\"return_val\"] = True\n\n        attrib, mod = self._find_highest_stat(attrib)\n\n        assert (\n            attrib in self._valid_attribs\n        ), f\"Could not find {attrib} in {self._valid_attribs}\"\n        new_kwargs = self._apply_upper_lower(\"save\", kwargs, skill=attrib)\n\n        n_deck = len(self.cards)\n        if abs(new_kwargs.get(\"upper_lower_int\", 1)) &gt; n_deck or n_deck == 0:\n            # does not offer option to use fate cards to avoid fatigue\n            self.modify_fatigue(1)\n            logger.debug(\"Modified fatigue from Player.save\")\n\n        # Need to account for return_string for bot and result for checking result\n        if new_kwargs.get(\"return_string\"):\n            result_string, result = self.check(\n                TC=self.TC, DR=DR, mod=getattr(self.Attribs, attrib, 0), **new_kwargs\n            )\n        else:\n            result = self.check(\n                TC=self.TC, DR=DR, mod=getattr(self.Attribs, attrib, 0), **new_kwargs\n            )\n\n        # NOTE: draw_log doesn't know if had options\n        draw_log.info(\n            [\n                self.id,\n                \"save\",\n                result,\n                self.result_types.get(result),\n                DR,\n                attrib,\n                mod,\n                kwargs.get(\"upper_lower\", \"n\"),\n                kwargs.get(\"draw_n\", 1),\n            ]\n        )\n\n        if new_kwargs.get(\"return_string\"):\n            return result_string\n        if new_kwargs.get(\"return_val\"):\n            return result\n\n    def full_rest(self, return_string=False, **_):\n        rest_log.info(\n            [\n                self.id,\n                \"before\",\n                \"full\",\n                len(self.discards),\n                len(self.hand),\n                self.HP,\n                self.AP,\n                self.PP,\n                self.RestCards,\n            ]\n        )\n        self.shuffle()\n        for i in [\"HP\", \"PP\", \"AP\", \"RestCards\", \"Speed\"]:\n            setattr(self, i, getattr(self, i + \"_Max\"))\n        self._statuses = {}\n        self._fatigue = 0  # TODO: Check rules. Fatigue 0 on full rest?\n        rest_log.info(\n            [\n                self.id,\n                \"after\",\n                \"full\",\n                len(self.discards),\n                len(self.hand),\n                self.HP,\n                self.AP,\n                self.PP,\n                self.RestCards,\n            ]\n        )\n        if return_string:\n            return f\"{self.Name} fully rested.\"\n\n    def quick_rest(self, return_string=False, **kwargs):\n        # Never uses Fate cards here\n        rest_log.info(\n            [\n                self.id,\n                \"before\",\n                \"quick\",\n                len(self.discards),\n                len(self.hand),\n                self.HP,\n                self.AP,\n                self.PP,\n                self.RestCards,\n            ]\n        )\n        point_total = 0  # Recover HP/PP\n        while self.RestCards &gt; 0 and (\n            (self.HP &lt; self.HP_Max) or (self.PP &lt; self.PP_Max)\n        ):  # Will always fully recover with available rest cards\n            draw = self.save(return_val=True, **kwargs)\n            if not draw:\n                break\n            points = 2 if draw &gt; 0 else 1\n            point_total += points\n            logger.debug(f\"Recovering {points} with cards\")\n            for _ in range(points):  # Prioritizes 'where am I missing more?'\n                attr_diffs = {\n                    \"HP\": abs(self.HP - self.HP_Max),\n                    \"PP\": abs(self.PP - self.PP_Max),\n                }\n                increment_this = max(attr_diffs, key=attr_diffs.get)\n                setattr(self, increment_this, getattr(self, increment_this) + 1)\n                logger.debug(\n                    f\"   1 {increment_this} to {getattr(self,increment_this,'?')}\"\n                )\n            self.RestCards -= 1\n        rest_log.info(\n            [\n                self.id,\n                \"after\",\n                \"quick\",\n                len(self.discards),\n                len(self.hand),\n                self.HP,\n                self.AP,\n                self.PP,\n                self.RestCards,\n            ]\n        )\n\n        AP_check_mod = max([self.Skills.Knowledge, self.Skills.Craft])\n        down_AP = self.AP_Max - self.AP\n        while down_AP &gt; 0:\n            draw = self.check(\n                TC=self.TC,\n                DR=max(0, 7 - down_AP),  # of below 7, 0\n                mod=AP_check_mod,\n                return_val=True,\n                **kwargs,\n            )\n            if not draw:\n                break\n            elif draw &lt; 0:\n                down_AP -= 1  # Try again with recovering one less\n            else:\n                self.AP += down_AP\n                logger.debug(f\"Recovering {down_AP} AP to {self.AP}\")\n                point_total += down_AP\n                break\n\n        result = f\"{self.Name} recovered {point_total} HP/PP/AP during Quick Rest\"\n        self.shuffle(limit=(10 + self.Attribs.VIT * 2))\n        if return_string:\n            return result\n        logger.info(result)\n\n    def wound(self, wound_val, bypass_HP=False):\n        for _ in range(wound_val):\n            if self.AP &gt; 0 and not bypass_HP:\n                self.AP -= 1\n            else:\n                self.HP -= 1\n        if self.HP &lt;= 0:\n            if self._statuses.get(\"Knocked Out\"):\n                logger.info(\n                    f\"{self.Name} attacked again while KO. \"\n                    + \"Epic Event not simulated.\"\n                )\n            else:\n                self._statuses[\"Knocked Out\"] = 1\n        self._shake_status([\"Charmed\", \"Enthralled\"])\n\n    def take_action(self, type=\"Major\") -&gt; Power:\n        if self.HP &lt;= 0:\n            return\n        if self._statuses.get(\"Stunned\") and type == \"Minor\":\n            logger.info(f\"{self.Name} stunned, skipping Minor Action.\")\n            return\n        if self._statuses.get(\"Burned\") and type == \"Minor\":\n            self._shake_status([\"Burned\"])\n            return\n        if self._statuses.get(\"Entangled\") and type == \"Major\":\n            self._shake_status([\"Entangled\"])\n            return\n        options = [\n            p\n            for p in self.Powers.values()\n            if p is not None\n            and p.Type == type\n            and ensure_list(p.PP)[0] &lt;= self.PP * self._PP_mult\n        ]\n        choice = random.choice(options) if options else None\n        if choice:\n            logger.info(\n                f\"{self.Name} used {ensure_list(choice.PP)[0]}/{self.PP} PP \"\n                + f\"with {choice.Name}\"\n            )\n        else:\n            logger.info(f\"{self.Name} no {type} choices\")\n        self.PP -= ensure_list(getattr(choice, \"PP\", 0))[0] * self._PP_mult\n        return choice\n\n    def start_turn(self):\n        if self._statuses.get(\"Knocked Down\"):\n            logger.info(f\"{self.Name} gets up\")\n            self._statuses[\"Knocked Down\"] = 0\n        self._shake_status([\"Stunned\", \"Poisoned\"])\n\n    def end_turn(self):\n        self._shake_status([\"Frozen\", \"Suffocating\"])\n\n    def _pass(self, *args, **kwargs):\n        pass  # Intentionally empty for statuses with no consequence\n\n    def _shake_status(self, statuses: list):\n        status_dict = {\n            \"Stunned\": {\"attrib\": \"CON\", \"fail\": self._pass, \"succeed\": self._pass},\n            \"Poisoned\": {\"attrib\": \"VIT\", \"fail\": self.discard, \"succeed\": self._pass},\n            \"Frozen\": {\"attrib\": \"STR\", \"fail\": self._pass, \"succeed\": self._pass},\n            \"Suffocating\": {\"attrib\": \"VIT\", \"fail\": self.wound, \"succeed\": self.wound},\n            \"Burned\": {\"attrib\": \"GUT\", \"fail\": self.wound, \"succeed\": self._pass},\n            \"Entangled\": {\"attrib\": \"STR\", \"fail\": self._pass, \"succeed\": self._pass},\n        }\n        for status in statuses:\n            if self._statuses.get(status):\n                if self.save(attrib=status_dict[status][\"attrib\"], return_val=True) &gt; 0:\n                    logger.info(f\"{self.Name} shakes off {status}\")\n                    self._statuses[status] = 0\n                    status_dict[status][\"succeed\"](\n                        self._statuses[status], bypass_HP=True\n                    )\n                else:\n                    logger.info(f\"{self.Name} remains {status}\")\n                    status_dict[status][\"fail\"](\n                        self._statuses[status] + 1, bypass_HP=True\n                    )\n</code></pre>"}, {"location": "api/automation/simulator/player/#automation.simulator.player.Player.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Result of print(Player)</p> Source code in <code>automation/simulator/player.py</code> <pre><code>def __repr__(self):\n\"\"\"Result of print(Player)\"\"\"\n    output = self.Name + \"\\n\"\n    output += \"TC       :%02s | pc.HP : %d/%d\\n\" % (\n        self.TC,\n        self.HP,\n        self.HP_Max,\n    )\n    output += \"Hand     :  %02d | pc.PP : %d/%d\\n\" % (\n        len(self.hand),\n        self.PP,\n        self.PP_Max,\n    )\n    output += \"Deck     :  %02d | pc.AP : %d/%d\\n\" % (\n        len(self.cards),\n        self.AP,\n        self.AP_Max,\n    )\n    output += \"Discards :  %02d | RestC : %d/%d\\n\" % (\n        len(self.discards),\n        self.RestCards,\n        self.RestCards_Max,\n    )\n    return output\n</code></pre>"}, {"location": "api/automation/simulator/player/#automation.simulator.player.Player.check_by_skill", "title": "<code>check_by_skill(TC=None, DR=3, skill=None, **kwargs)</code>", "text": "<p>Accepts any Skill or Attrib. Accepts any valid args of Deck.check</p> Source code in <code>automation/simulator/player.py</code> <pre><code>def check_by_skill(self, TC: Card = None, DR: int = 3, skill: str = None, **kwargs):\n\"\"\"Accepts any Skill or Attrib. Accepts any valid args of Deck.check\"\"\"\n    if not TC:\n        TC = Card(\"random\")\n\n    if not skill:\n        skill = \"None\"\n    if self._CSV_LOGGING:\n        kwargs[\"return_val\"] = True\n\n    skill, mod = self._find_highest_stat(skill)\n    new_kwargs = self._apply_upper_lower(\"check\", kwargs, skill=skill)\n\n    n_deck = len(self.cards)\n    if abs(new_kwargs.get(\"upper_lower_int\", 1)) &gt; n_deck or n_deck == 0:\n        # does not offer option to use fate cards to avoid fatigue\n        self.modify_fatigue()\n        logger.debug(\"Fatigue modified from check_by_skill\")\n\n    # Need to account for return_string for bot and result for checking result\n    if new_kwargs.get(\"return_string\"):\n        result_string, result = self.check(TC, DR, mod=mod, **new_kwargs)\n    else:\n        result = self.check(TC, DR, mod=mod, **new_kwargs)\n\n    # NOTE: draw_log doesn't know if had options\n    draw_log.info(\n        [\n            self.id,\n            \"check\",\n            result,\n            self.result_types.get(result, None),\n            DR,\n            skill,\n            mod,\n            kwargs.get(\"upper_lower\", \"n\"),\n            kwargs.get(\"draw_n\", 1),\n        ]\n    )\n    if new_kwargs.get(\"return_string\"):\n        return result_string\n    return result\n</code></pre>"}, {"location": "api/automation/simulator/player/#automation.simulator.player.Player.save", "title": "<code>save(DR=3, attrib='None', **kwargs)</code>", "text": "<p>Accepts any Attrib. Accepts any valid args of Deck.check</p> Source code in <code>automation/simulator/player.py</code> <pre><code>def save(self, DR: int = 3, attrib=\"None\", **kwargs):\n\"\"\"Accepts any Attrib. Accepts any valid args of Deck.check\"\"\"\n    if self._CSV_LOGGING:\n        kwargs[\"return_val\"] = True\n\n    attrib, mod = self._find_highest_stat(attrib)\n\n    assert (\n        attrib in self._valid_attribs\n    ), f\"Could not find {attrib} in {self._valid_attribs}\"\n    new_kwargs = self._apply_upper_lower(\"save\", kwargs, skill=attrib)\n\n    n_deck = len(self.cards)\n    if abs(new_kwargs.get(\"upper_lower_int\", 1)) &gt; n_deck or n_deck == 0:\n        # does not offer option to use fate cards to avoid fatigue\n        self.modify_fatigue(1)\n        logger.debug(\"Modified fatigue from Player.save\")\n\n    # Need to account for return_string for bot and result for checking result\n    if new_kwargs.get(\"return_string\"):\n        result_string, result = self.check(\n            TC=self.TC, DR=DR, mod=getattr(self.Attribs, attrib, 0), **new_kwargs\n        )\n    else:\n        result = self.check(\n            TC=self.TC, DR=DR, mod=getattr(self.Attribs, attrib, 0), **new_kwargs\n        )\n\n    # NOTE: draw_log doesn't know if had options\n    draw_log.info(\n        [\n            self.id,\n            \"save\",\n            result,\n            self.result_types.get(result),\n            DR,\n            attrib,\n            mod,\n            kwargs.get(\"upper_lower\", \"n\"),\n            kwargs.get(\"draw_n\", 1),\n        ]\n    )\n\n    if new_kwargs.get(\"return_string\"):\n        return result_string\n    if new_kwargs.get(\"return_val\"):\n        return result\n</code></pre>"}, {"location": "api/automation/templates/bestiary/", "title": "Bestiary", "text": ""}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Bestiary", "title": "<code>Bestiary</code>", "text": "<p>             Bases: <code>YamlSpec</code></p> <p>Bestiary class - load all or a specific type from YAMLs</p> Example <p>from automation.templates.bestiary import Bestiary, Beast Bestiary().as_dict['MyPC'] # Returns Beast object</p> <p>Attributes:</p> Name Type Description <code>as_dict</code> <code>dict</code> <p>dictionary of all beasts loaded</p> <code>categories</code> <code>OrderedDict</code> <p>tuple of type as key, with list values of individuals</p> <code>csv_fields</code> <code>list</code> <p>list of fields to be included in csv</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>class Bestiary(YamlSpec):\n\"\"\"Bestiary class - load all or a specific type from YAMLs\n\n    Example:\n        from automation.templates.bestiary import Bestiary, Beast\n        Bestiary().as_dict['MyPC'] # Returns Beast object\n\n    Attributes:\n        as_dict (dict): dictionary of all beasts loaded\n        categories (OrderedDict): tuple of type as key, with list values of individuals\n        csv_fields (list): list of fields to be included in csv\n    \"\"\"\n\n    # TODO: check stat overrides before printing\n    def __init__(self, input_files=\"06_Bestiary_SAMPLE.yaml\", limit_types: list = None):\n        input_files = [\n            file\n            for file in ensure_list(input_files)\n            if \"best\" in file.lower() or \"pc\" in file.lower()\n        ]\n        super().__init__(input_files=input_files)\n        self._tried_loading = False\n        self._limit_types = limit_types or list_beast_types\n        self._as_dict = {}\n        self._categories = {}\n        self._categories_set = set()\n        self._csv_fields = set()\n\n    @property\n    def as_dict(self) -&gt; dict:\n\"\"\"Beasts as a dict, callable via string name, value as Beast class\"\"\"\n        if not self._as_dict and not self._tried_loading:\n            self._build_contents(Beast, \"Level\")\n        return self._as_dict\n\n    @property\n    def categories(self) -&gt; OrderedDict:\n\"\"\"Return OrderedDict with {tuple(Type) : [list of beasts]} as key value pairs\"\"\"\n        if not self._categories:\n            self._categories = self._build_categories(build_with=\"Type\")\n        return self._categories\n\n    @property\n    def csv_fields(self) -&gt; list:\n\"\"\"Return a list of fields for the CSV output in the desired order\"\"\"\n        if not self._csv_fields:\n            _ = self.categories\n        move_front = [\n            \"Type\",\n            \"Name\",\n            \"Level\",\n            \"Role\",\n            \"Descriptions\",\n            \"Pronouns\",\n            \"RestCards\",\n            \"Speed\",\n            \"HP\",\n            \"PP\",\n        ]\n        return [\n            *move_front,\n            *[i for i in sorted(list(self._csv_fields)) if i not in move_front],\n        ]\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Bestiary.as_dict", "title": "<code>as_dict: dict</code>  <code>property</code>", "text": "<p>Beasts as a dict, callable via string name, value as Beast class</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Bestiary.categories", "title": "<code>categories: OrderedDict</code>  <code>property</code>", "text": "<p>Return OrderedDict with {tuple(Type) : [list of beasts]} as key value pairs</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Bestiary.csv_fields", "title": "<code>csv_fields: list</code>  <code>property</code>", "text": "<p>Return a list of fields for the CSV output in the desired order</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Attribs", "title": "<code>Attribs</code>  <code>dataclass</code>", "text": "<p>Class to represent a beast's Attributes</p> <p>Attributes:</p> Name Type Description <code>as_tuple</code> <code>tuple[int]</code> <p>set of integers in default order</p> <code>flat</code> <code>dict</code> <p>uses 'Attrib' as a prefix in {Attrib_AGL: value} dict</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>@dataclass(order=True)\nclass Attribs:\n\"\"\"Class to represent a beast's Attributes\n\n    Attributes:\n        as_tuple (tuple[int]): set of integers in default order\n        flat (dict): uses 'Attrib' as a prefix in {Attrib_AGL: value} dict\n    \"\"\"\n\n    AGL: int = 0\n    CON: int = 0\n    GUT: int = 0\n    INT: int = 0\n    STR: int = 0\n    VIT: int = 0\n\n    @property\n    def as_tuple(self):\n\"\"\"Just a set of all items as int (0, 1, 2...)\"\"\"\n        return (self.AGL, self.CON, self.GUT, self.INT, self.STR, self.VIT)\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return flatted dict {'Attrib_example': value} pairs for csv export\"\"\"\n        return flatten_embedded(dict(Attrib=self.__dict__))\n\n    def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n        return my_repr(self, separator=\", \", indent=0)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Attribs.as_tuple", "title": "<code>as_tuple</code>  <code>property</code>", "text": "<p>Just a set of all items as int (0, 1, 2...)</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Attribs.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return flatted dict {'Attrib_example': value} pairs for csv export</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Attribs.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default beast items with repr property and linebreaks</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n    return my_repr(self, separator=\", \", indent=0)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Skills", "title": "<code>Skills</code>  <code>dataclass</code>", "text": "<p>Class to represent a beast's Skills</p> <p>Attributes:</p> Name Type Description <code>as_tuple</code> <code>tuple[int]</code> <p>set of integers in default order</p> <code>non_defaults</code> <code>tuple[int]</code> <p>see above, skip items at 0</p> <code>flat</code> <code>dict</code> <p>uses 'Skill' as a prefix in {Skill_AGL: value} dict</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>@dataclass(order=True)\nclass Skills:\n\"\"\"Class to represent a beast's Skills\n\n    Attributes:\n        as_tuple (tuple[int]): set of integers in default order\n        non_defaults (tuple[int]): see above, skip items at 0\n        flat (dict): uses 'Skill' as a prefix in {Skill_AGL: value} dict\n    \"\"\"\n\n    Finesse: int = None\n    Stealth: int = None\n    Bluffing: int = None\n    Performance: int = None\n    Knowledge: int = None\n    Investigation: int = None\n    Detection: int = None\n    Craft: int = None\n    Athletics: int = None\n    Brute: int = None\n\n    @property\n    def as_tuple(self):\n\"\"\"List of tuples (Skill, value)\"\"\"\n        output = []\n        for f in fields(self):\n            value = attrgetter(f.name)(self)\n            output.append((f.name, value))\n        return output\n\n    @property\n    def non_defaults(self):\n\"\"\"Return as_tuple above, but only non-default items\"\"\"\n        output = []\n        for f in fields(self):\n            value = attrgetter(f.name)(self)\n            if value not in [0, None]:\n                output.append((f.name, value))\n        return output\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return flatted dict {'Skill_example': value} pairs for csv export\"\"\"\n        return flatten_embedded(dict(Skill=self.__dict__))\n\n    def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n        return my_repr(self, separator=\", \", indent=0)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Skills.as_tuple", "title": "<code>as_tuple</code>  <code>property</code>", "text": "<p>List of tuples (Skill, value)</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Skills.non_defaults", "title": "<code>non_defaults</code>  <code>property</code>", "text": "<p>Return as_tuple above, but only non-default items</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Skills.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return flatted dict {'Skill_example': value} pairs for csv export</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Skills.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default beast items with repr property and linebreaks</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n    return my_repr(self, separator=\", \", indent=0)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Phase", "title": "<code>Phase</code>  <code>dataclass</code>", "text": "<p>Class for representing boss phases</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>@dataclass(order=True)\nclass Phase:\n\"\"\"Class for representing boss phases\"\"\"\n\n    # TODO: Should allies be typed as Beast recursively?\n    Name: str\n    Order: int = field(repr=False)\n    HP: int = 1\n    Allies: List[str] = None\n\n    def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n        return my_repr(self, indent=1)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Phase.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default beast items with repr property and linebreaks</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n    return my_repr(self, indent=1)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast", "title": "<code>Beast</code>  <code>dataclass</code>", "text": "<p>Class for representing all creatures (e.g., PCs, bosses, etc.)</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>@dataclass(order=True)\nclass Beast:\n\"\"\"Class for representing all creatures (e.g., PCs, bosses, etc.)\"\"\"\n\n    sort_index: str = field(init=False, repr=False)\n    Type: str\n    id: str = field(repr=False)\n    Name: str = None\n    Pronouns: str = None\n    Role: str = None\n    Level: int = 1\n    HP: int = 1\n    AP: int = 1\n    AR: int = None\n    PP: int = 0\n    Speed: int = 6\n    Primary_Skill: str = None\n    Attribs: dict = None\n    Skills: dict = None\n    Powers: dict = field(default=None, repr=False)\n    Phases: list = None\n    Items: dict = field(default_factory=dict)\n    Description: str = \"\"\n\n    def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n        self.sort_index = self.Type\n        self.Name = self.Name if self.Name else self.id\n        self.Powers, self._pow_PP, self._pow_XP, self._vulny_XP = self.fetch_powers()\n        self.Items = self.fetch_items() if self.Items else None\n        self.Attribs = Attribs(**self.Attribs) if self.Attribs else Attribs()\n        self.Skills = Skills(**self.Skills) if self.Skills else Skills()\n        self.Phases = self.fetch_phases() if self.Phases else None\n        self.AR = self.AR if self.AR else (3 - (self.Attribs.AGL // 2))  # default\n        self.RestCards = self.HP\n        if self.Type in [\"PC\"]:\n            if self.PP != 0:\n                logger.warning(\n                    f\"{self.Name} has unused PP listed in yaml. Now summed from powers\"\n                )\n            self.PP = self._pow_PP\n            self.check_valid()\n        self.adjust_stats()\n        self.RestCards_Max = self.HP\n        self.HP_Max = self.HP  # assume providing max when initializing\n        self.AP_Max = self.AP\n        self.AR_Max = self.AR\n        self.PP_Max = self.PP\n        self.Speed_Max = self.Speed\n        self.Primary_Skill_Mod = (\n            getattr(\n                self.Attribs if self.Primary_Skill in list_attribs else self.Skills,\n                self.Primary_Skill,\n                0,\n            )\n            if self.Primary_Skill\n            else 0\n            # Primary skill mod is zero when no primary skill selected so that save DR\n            # math still works\n        )\n\n    def fetch_powers(self) -&gt; Tuple[dict, int, int, int]:\n\"\"\"Given a list of powers by name, generate a dict {Name: Power class}\n\n        Returns:\n            output_powers (dict): Dictionary of {name: Power class} for this char powers\n            powers_pp (int): number of max power points summed across all powers\n            powers_xp (int): number of across all powers\n            vulny_xp (int): number of xp from vulnerabilities alone\n        \"\"\"\n        # TODO: check prereqs in validation\n        output_powers = {}\n        powers_pp = 0\n        powers_xp = 0\n        vulny_xp = 0\n        self.Powers = ensure_list(self.Powers)\n        for listed_power in self.Powers:\n            if isinstance(listed_power, dict):\n                power_name, choice = next(iter(listed_power.items()))\n            else:\n                power_name, choice = listed_power, None\n\n            power = all_powers.get(power_name, None)\n\n            if not power:\n                logger.warning(f\"{self.Name} has a power not in yaml: {power_name}\")\n                continue\n            if self.Type != \"Boss\" and \"Boss-Only\" in power.Category:\n                logger.warning(f\"Removed {self.Name}'s Boss-Only power:{power_name}\")\n                continue\n\n            output_powers.update({power_name: power.set_choice(choice)})\n            powers_pp += max(ensure_list(power.PP))\n            xp = ensure_list(power.XP)[-1]\n            powers_xp += xp\n            if power.Type == \"Vulny\":\n                vulny_xp += xp\n        return output_powers, powers_pp, powers_xp, vulny_xp\n\n    def fetch_items(self) -&gt; dict:\n\"\"\"Return a dict of {item_name: item class} for all items wielded by this char\n\n        Returns:\n            dict: set of items as a dictionary\n        \"\"\"\n        output_items = {}\n        for listed_item in ensure_list(self.Items):\n            item = all_items.get(listed_item)\n            if not item:\n                logger.warning(f\"{self.Name} has item not in yaml: {listed_item}\")\n                continue\n            output_items.update({listed_item: item})\n        return output_items\n\n    def fetch_phases(self) -&gt; list:\n\"\"\"Turn phase input into list of phase class items\"\"\"\n        output = []\n        for order, (phase, phase_dict) in enumerate(self.Phases.items()):\n            output.append(Phase(Name=phase, Order=order, **phase_dict))\n        return output\n\n    def _adjust_skill_via_attribs(self, attribs: list = None):\n\"\"\"For each attrib passed (if none, all), if skill 0 or None, use attrib value\n\n        Args:\n            attribs (list, optional): Set of attribs for which we should adjust skills.\n                Defaults to None, which assumes all attribs.\n        \"\"\"\n        if not attribs:\n            attribs = list_attribs  # All\n        for attrib in ensure_list(attribs):\n            attrib_val = getattr(self.Attribs, attrib, 0)\n            for skill in list_stats[attrib]:\n                if not getattr(self.Skills, skill, None):\n                    logger.debug(f\"{self.Name}:set {skill} to {attrib_val}\")\n                    setattr(self.Skills, skill, attrib_val)\n\n    def _adjust_stats_powers_items(self):\n\"\"\"For each power and item, check for StatAdjust fields and modify relevant\"\"\"\n        adjusts = []\n        if self.Powers:\n            adjusts.append(\n                getattr(power, \"StatAdjusts\", []) for power in self.Powers.values()\n            )\n        if self.Items:\n            adjusts.append(\n                getattr(item, \"StatAdjusts\", []) for item in self.Items.values()\n            )\n\n        for adjust in flatten_list(adjusts):\n            if adjust.Stat in list_attribs:\n                adjusted_val = self.Attribs\n            elif adjust.Stat in list_skills:\n                adjusted_val = self.Skills\n            else:\n                adjusted_val = self\n            current = getattr(adjusted_val, adjust.Stat, 0) if adjust.add else 0\n            logger.debug(f\"Set {self.Name} {adjust.Stat} to {current} + {adjust.Value}\")\n            setattr(adjusted_val, adjust.Stat, current + adjust.Value)\n\n            if adjust.Stat in list_attribs:\n                self._adjust_skill_via_attribs(adjust.Stat)\n\n    def adjust_stats(self) -&gt; None:\n\"\"\"Check for any StatAdjust powers. Apply overrides, sum with current value\"\"\"\n        self._adjust_skill_via_attribs()\n        self._adjust_stats_powers_items()\n\n    def check_valid(self):\n\"\"\"Check that this beast is a valid PC. If not, log warnings with flaws\"\"\"\n        remaining_XP = 6 + (self.Level * 3) - self._pow_XP\n\n        self._adjust_skill_via_attribs()\n        max_stat = 0\n        for attrib, skills in list_stats.items():\n            attrib_val = getattr(self.Attribs, attrib, 0)\n            attrib_xp = xp_progression[\"attrib\"][attrib_val]\n            max_stat = max(max_stat, attrib_val)\n            remaining_XP -= attrib_xp\n            for skill in skills:\n                skill_val = getattr(self.Skills, skill, 0)\n                remaining_XP -= xp_progression[\"skills\"][skill_val - attrib_val]\n                max_stat = max(max_stat, skill_val)\n\n        if remaining_XP &lt; 0:\n            logger.warning(f\"{self.Name} used {abs(remaining_XP)} excess XP\")\n        if max_stat &gt; stat_cap[self.Level]:\n            logger.warning(\n                f\"{self.Name} has a stat at {max_stat}, above the \"\n                + f\"{stat_cap[self.Level]} cap for level {self.Level}\"\n            )\n        if self._vulny_XP &lt; -4:\n            logger.warning(\n                f\"{self.Name} has {abs(self._vulny_XP)} XP from Vulnys. Limit 4.\"\n                + \"\\nNote: this check assumes more negative XP value from each Vulny.\"\n            )\n\n    def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n        return my_repr(self)\n\n    # ------------------------------- Output functions -------------------------------\n\n    def _md_stats_table(self) -&gt; str:\n\"\"\"Generate string for stats table included in markdown bestiary\"\"\"\n        top_lvl_stats = (self.HP, self.AP, self.AR, self.PP, self.Speed)\n        output = (\n            f\"### {self.Type}: Level {self.Level}\\n\\n\"\n            + \"| HP | AP | AR | PP | SPD |\\n\"\n            + \"| -- | -- | -- | -- | --- |\\n\"\n            + \"| %s  | %s  | %s  | %s  |  %s  |\\n\\n\" % top_lvl_stats\n            + \"| AGL | CON | GUT | INT | STR | VIT |\\n\"\n            + \"| --- | --- | --- | --- | --- | --- |\\n\"\n            + \"|  %s  |  %s  |  %s  |  %s  |  %s  |  %s  |\\n\" % self.Attribs.as_tuple\n        )\n        if self.Skills:\n            if self.Skills.non_defaults:\n                output += (\n                    \"\\n**Skills**: \"\n                    + \", \".join([\"%s %s\" % s for s in self.Skills.non_defaults])\n                    + \"\\n\"\n                )\n        return output\n\n    def _md_actions(self) -&gt; str:\n\"\"\"Generate markdown list of powers separated by type\"\"\"\n        output = make_header(\"Powers\", 2)\n        for power_type in list_power_types:\n            powers_subset = [\n                make_bullet(f\"**{p.Name}**: {p.Mechanic}\")\n                for p in self.Powers.values()\n                if getattr(p, \"Type\", \"None\") == power_type\n            ]\n            if powers_subset:\n                output += make_header(power_type, 3) + \"\\n\" + \"\".join(powers_subset)\n        return output\n\n    def _md_phases(self) -&gt; str:\n\"\"\"Generate markdown string for phases\"\"\"\n        if not self.Phases:\n            return \"\"\n        output = make_header(\"Phases\", 2)\n        for phase in self.Phases:\n            output += make_header(f\"Phase {phase.Name}\", 3) + \"\\n\"\n            output += f\"Set HP to {phase.HP} and add the following all(y/ies):\\n\\n\"\n            output += \"\".join([make_bullet(ally) for ally in phase.Allies])\n        return output\n\n    @property\n    def markdown(self) -&gt; str:\n\"\"\"Concatenate info relevant to markdown export\"\"\"\n        return (\n            make_header(self.Name, 1)\n            + \"\\n\"\n            + self._md_stats_table()\n            + self._md_actions()\n            + self._md_phases()\n        )\n\n    @property\n    def _pc_sheet_stats(self) -&gt; tuple:\n\"\"\"Generate top-level stats for PC sheet\"\"\"\n        # TODO: Modify so it aligns with how markdown takes top_level_stats\n        # Why separate AR for the PC sheet but not the markdown?\n        return [\n            (\"HP\", self.HP, self.HP_Max),\n            (\"AP\", self.AP, self.AP_Max),\n            (\"PP\", self.PP, self.PP_Max),\n            (\"Speed\", self.Speed, self.Speed_Max),\n            (\"Rest Cards\", self.RestCards, self.RestCards_Max),\n        ]\n\n    def _html(self, items=None):\n\"\"\"Generate html from jinja template representing PC\"\"\"\n        import jinja2  # intentional lazy import\n\n        assert self.Type in [\"PC\", \"Dealer\"], \"Can only make html for PCs\"\n\n        default_items = (\n            self.Items\n            if self.Items\n            else [\n                {\"name\": \"Armor\", \"quantity\": \"1\", \"info\": \"Chain Mail. AR 2.\"},\n                {\"name\": \"Shield\", \"quantity\": \"1\", \"info\": \"Heavy Shield. 2 AP.\"},\n                {\"name\": \"Shortsword\", \"quantity\": \"1\", \"info\": \"1 damage. 1 handed.\"},\n                {\"name\": \"Maul\", \"quantity\": \"1\", \"info\": \"2 damage. 2 handed.\"},\n            ]\n        )\n\n        return (\n            jinja2.Environment(loader=jinja2.FileSystemLoader(\"./automation/_input/\"))\n            .get_template(\"PC_template.html\")\n            .render(pc=self, items=items if items else default_items)\n        )\n\n    def _pc_file_info(self, suffix: str) -&gt; Tuple[str, str]:\n\"\"\"Return _output relative file path and name for PC file given suffix\"\"\"\n        return \"./automation/_output/\", f\"PC_{self.Name}_level_{self.Level}.{suffix}\"\n\n    def make_pc_html(self, file_path: str = None, items: list = None):\n\"\"\"Save pc html as html file\n\n        Args:\n            file_path (str, optional): Filename, no extension. Always in _output\n                folder. Defaults to PC_{Name}_level_{Level}.\n            items (list, optional): List of dicts with item name, quantity and info.\n                Defaults a set of items store in the _html function.\n        \"\"\"\n        output_dir, filename = self._pc_file_info(\"html\")\n        output_file = file_path + filename if file_path else output_dir + filename\n        with open(output_file, \"w\") as f:\n            f.write(self._html(items))\n        logger.info(f\"Wrote HTML {output_file}\")\n\n    def make_pc_img(\n        self,\n        file_path: str = None,\n        items: list = None,\n        browser=\"google-chrome\",\n        custom_browser_flags=None,\n        dry_run=False,\n    ):\n\"\"\"Save pc html as png file\n\n        Writing out the image with html2image can be a noisy process with multiple\n        warning log items from chrome. To quiet these, git clone html2image and pip\n        install as editable. Then, add the following as the last line in the command\n        list in the relevant browser: '&gt; /dev/null 2&gt;&amp;1'. For chrome.py, L250\n\n        Args:\n            file_path (str, optional): Filename, no extension. Always in _output\n                folder. Defaults to PC_{Name}_level_{Level}.\n            items (list, optional): List of dicts with item name, quantity and info.\n                Defaults a set of items store in the _html function.\n        \"\"\"\n        from html2image import Html2Image\n\n        hti = Html2Image(\n            browser=browser,\n            custom_flags=custom_browser_flags,\n        )\n        output_path, filename = self._pc_file_info(\"png\")\n        hti.output_path = file_path or output_path\n        hti.size = (950, 1200)\n        if not dry_run:\n            hti.screenshot(\n                html_str=self._html(items),\n                save_as=filename,\n            )\n        logger.info(f\"Wrote HTML as image: {hti.output_path}/{filename}\")\n\n    @property\n    def csv_dict(self) -&gt; dict:\n\"\"\"Set of information to be added as a row in the output csv\"\"\"\n        removed = [\n            \"sort_index\",\n            \"Powers\",\n            \"Attribs\",\n            \"Skills\",\n            \"Phases\",\n            \"_html\",\n        ]\n        output = {k: v for k, v in self.__dict__.items() if k not in removed}\n        for attrib in [self.Attribs, self.Skills]:\n            if attrib:\n                output.update({**attrib.flat})\n        return output\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.__post_init__", "title": "<code>__post_init__()</code>", "text": "<p>Generate values not given on initialization</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n    self.sort_index = self.Type\n    self.Name = self.Name if self.Name else self.id\n    self.Powers, self._pow_PP, self._pow_XP, self._vulny_XP = self.fetch_powers()\n    self.Items = self.fetch_items() if self.Items else None\n    self.Attribs = Attribs(**self.Attribs) if self.Attribs else Attribs()\n    self.Skills = Skills(**self.Skills) if self.Skills else Skills()\n    self.Phases = self.fetch_phases() if self.Phases else None\n    self.AR = self.AR if self.AR else (3 - (self.Attribs.AGL // 2))  # default\n    self.RestCards = self.HP\n    if self.Type in [\"PC\"]:\n        if self.PP != 0:\n            logger.warning(\n                f\"{self.Name} has unused PP listed in yaml. Now summed from powers\"\n            )\n        self.PP = self._pow_PP\n        self.check_valid()\n    self.adjust_stats()\n    self.RestCards_Max = self.HP\n    self.HP_Max = self.HP  # assume providing max when initializing\n    self.AP_Max = self.AP\n    self.AR_Max = self.AR\n    self.PP_Max = self.PP\n    self.Speed_Max = self.Speed\n    self.Primary_Skill_Mod = (\n        getattr(\n            self.Attribs if self.Primary_Skill in list_attribs else self.Skills,\n            self.Primary_Skill,\n            0,\n        )\n        if self.Primary_Skill\n        else 0\n        # Primary skill mod is zero when no primary skill selected so that save DR\n        # math still works\n    )\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.fetch_powers", "title": "<code>fetch_powers()</code>", "text": "<p>Given a list of powers by name, generate a dict {Name: Power class}</p> <p>Returns:</p> Name Type Description <code>output_powers</code> <code>dict</code> <p>Dictionary of {name: Power class} for this char powers</p> <code>powers_pp</code> <code>int</code> <p>number of max power points summed across all powers</p> <code>powers_xp</code> <code>int</code> <p>number of across all powers</p> <code>vulny_xp</code> <code>int</code> <p>number of xp from vulnerabilities alone</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def fetch_powers(self) -&gt; Tuple[dict, int, int, int]:\n\"\"\"Given a list of powers by name, generate a dict {Name: Power class}\n\n    Returns:\n        output_powers (dict): Dictionary of {name: Power class} for this char powers\n        powers_pp (int): number of max power points summed across all powers\n        powers_xp (int): number of across all powers\n        vulny_xp (int): number of xp from vulnerabilities alone\n    \"\"\"\n    # TODO: check prereqs in validation\n    output_powers = {}\n    powers_pp = 0\n    powers_xp = 0\n    vulny_xp = 0\n    self.Powers = ensure_list(self.Powers)\n    for listed_power in self.Powers:\n        if isinstance(listed_power, dict):\n            power_name, choice = next(iter(listed_power.items()))\n        else:\n            power_name, choice = listed_power, None\n\n        power = all_powers.get(power_name, None)\n\n        if not power:\n            logger.warning(f\"{self.Name} has a power not in yaml: {power_name}\")\n            continue\n        if self.Type != \"Boss\" and \"Boss-Only\" in power.Category:\n            logger.warning(f\"Removed {self.Name}'s Boss-Only power:{power_name}\")\n            continue\n\n        output_powers.update({power_name: power.set_choice(choice)})\n        powers_pp += max(ensure_list(power.PP))\n        xp = ensure_list(power.XP)[-1]\n        powers_xp += xp\n        if power.Type == \"Vulny\":\n            vulny_xp += xp\n    return output_powers, powers_pp, powers_xp, vulny_xp\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.fetch_items", "title": "<code>fetch_items()</code>", "text": "<p>Return a dict of {item_name: item class} for all items wielded by this char</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>set of items as a dictionary</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def fetch_items(self) -&gt; dict:\n\"\"\"Return a dict of {item_name: item class} for all items wielded by this char\n\n    Returns:\n        dict: set of items as a dictionary\n    \"\"\"\n    output_items = {}\n    for listed_item in ensure_list(self.Items):\n        item = all_items.get(listed_item)\n        if not item:\n            logger.warning(f\"{self.Name} has item not in yaml: {listed_item}\")\n            continue\n        output_items.update({listed_item: item})\n    return output_items\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.fetch_phases", "title": "<code>fetch_phases()</code>", "text": "<p>Turn phase input into list of phase class items</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def fetch_phases(self) -&gt; list:\n\"\"\"Turn phase input into list of phase class items\"\"\"\n    output = []\n    for order, (phase, phase_dict) in enumerate(self.Phases.items()):\n        output.append(Phase(Name=phase, Order=order, **phase_dict))\n    return output\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.adjust_stats", "title": "<code>adjust_stats()</code>", "text": "<p>Check for any StatAdjust powers. Apply overrides, sum with current value</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def adjust_stats(self) -&gt; None:\n\"\"\"Check for any StatAdjust powers. Apply overrides, sum with current value\"\"\"\n    self._adjust_skill_via_attribs()\n    self._adjust_stats_powers_items()\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.check_valid", "title": "<code>check_valid()</code>", "text": "<p>Check that this beast is a valid PC. If not, log warnings with flaws</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def check_valid(self):\n\"\"\"Check that this beast is a valid PC. If not, log warnings with flaws\"\"\"\n    remaining_XP = 6 + (self.Level * 3) - self._pow_XP\n\n    self._adjust_skill_via_attribs()\n    max_stat = 0\n    for attrib, skills in list_stats.items():\n        attrib_val = getattr(self.Attribs, attrib, 0)\n        attrib_xp = xp_progression[\"attrib\"][attrib_val]\n        max_stat = max(max_stat, attrib_val)\n        remaining_XP -= attrib_xp\n        for skill in skills:\n            skill_val = getattr(self.Skills, skill, 0)\n            remaining_XP -= xp_progression[\"skills\"][skill_val - attrib_val]\n            max_stat = max(max_stat, skill_val)\n\n    if remaining_XP &lt; 0:\n        logger.warning(f\"{self.Name} used {abs(remaining_XP)} excess XP\")\n    if max_stat &gt; stat_cap[self.Level]:\n        logger.warning(\n            f\"{self.Name} has a stat at {max_stat}, above the \"\n            + f\"{stat_cap[self.Level]} cap for level {self.Level}\"\n        )\n    if self._vulny_XP &lt; -4:\n        logger.warning(\n            f\"{self.Name} has {abs(self._vulny_XP)} XP from Vulnys. Limit 4.\"\n            + \"\\nNote: this check assumes more negative XP value from each Vulny.\"\n        )\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default beast items with repr property and linebreaks</p> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default beast items with repr property and linebreaks\"\"\"\n    return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.markdown", "title": "<code>markdown: str</code>  <code>property</code>", "text": "<p>Concatenate info relevant to markdown export</p>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.make_pc_html", "title": "<code>make_pc_html(file_path=None, items=None)</code>", "text": "<p>Save pc html as html file</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename, no extension. Always in output folder. Defaults to PClevel.</p> <code>None</code> <code>items</code> <code>list</code> <p>List of dicts with item name, quantity and info. Defaults a set of items store in the _html function.</p> <code>None</code> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def make_pc_html(self, file_path: str = None, items: list = None):\n\"\"\"Save pc html as html file\n\n    Args:\n        file_path (str, optional): Filename, no extension. Always in _output\n            folder. Defaults to PC_{Name}_level_{Level}.\n        items (list, optional): List of dicts with item name, quantity and info.\n            Defaults a set of items store in the _html function.\n    \"\"\"\n    output_dir, filename = self._pc_file_info(\"html\")\n    output_file = file_path + filename if file_path else output_dir + filename\n    with open(output_file, \"w\") as f:\n        f.write(self._html(items))\n    logger.info(f\"Wrote HTML {output_file}\")\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.make_pc_img", "title": "<code>make_pc_img(file_path=None, items=None, browser='google-chrome', custom_browser_flags=None, dry_run=False)</code>", "text": "<p>Save pc html as png file</p> <p>Writing out the image with html2image can be a noisy process with multiple warning log items from chrome. To quiet these, git clone html2image and pip install as editable. Then, add the following as the last line in the command list in the relevant browser: '&gt; /dev/null 2&gt;&amp;1'. For chrome.py, L250</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Filename, no extension. Always in output folder. Defaults to PClevel.</p> <code>None</code> <code>items</code> <code>list</code> <p>List of dicts with item name, quantity and info. Defaults a set of items store in the _html function.</p> <code>None</code> Source code in <code>automation/templates/bestiary.py</code> <pre><code>def make_pc_img(\n    self,\n    file_path: str = None,\n    items: list = None,\n    browser=\"google-chrome\",\n    custom_browser_flags=None,\n    dry_run=False,\n):\n\"\"\"Save pc html as png file\n\n    Writing out the image with html2image can be a noisy process with multiple\n    warning log items from chrome. To quiet these, git clone html2image and pip\n    install as editable. Then, add the following as the last line in the command\n    list in the relevant browser: '&gt; /dev/null 2&gt;&amp;1'. For chrome.py, L250\n\n    Args:\n        file_path (str, optional): Filename, no extension. Always in _output\n            folder. Defaults to PC_{Name}_level_{Level}.\n        items (list, optional): List of dicts with item name, quantity and info.\n            Defaults a set of items store in the _html function.\n    \"\"\"\n    from html2image import Html2Image\n\n    hti = Html2Image(\n        browser=browser,\n        custom_flags=custom_browser_flags,\n    )\n    output_path, filename = self._pc_file_info(\"png\")\n    hti.output_path = file_path or output_path\n    hti.size = (950, 1200)\n    if not dry_run:\n        hti.screenshot(\n            html_str=self._html(items),\n            save_as=filename,\n        )\n    logger.info(f\"Wrote HTML as image: {hti.output_path}/{filename}\")\n</code></pre>"}, {"location": "api/automation/templates/bestiary/#automation.templates.bestiary.Beast.csv_dict", "title": "<code>csv_dict: dict</code>  <code>property</code>", "text": "<p>Set of information to be added as a row in the output csv</p>"}, {"location": "api/automation/templates/items/", "title": "Items", "text": ""}, {"location": "api/automation/templates/items/#automation.templates.items.Items", "title": "<code>Items</code>", "text": "<p>             Bases: <code>YamlSpec</code></p> <p>Set of DofA Items</p> <p>Attributes:</p> Name Type Description <code>as_dict</code> <code>dict</code> <p>dictionary of powers with ids as keys</p> <code>categories</code> <code>OrderedDict</code> <p>tuple of type as key, with list values of individuals</p> <code>csv_fields</code> <code>list</code> <p>list of fields to be included in csv</p> Source code in <code>automation/templates/items.py</code> <pre><code>class Items(YamlSpec):\n\"\"\"Set of DofA Items\n\n    Attributes:\n        as_dict (dict): dictionary of powers with ids as keys\n        categories (OrderedDict): tuple of type as key, with list values of individuals\n        csv_fields (list): list of fields to be included in csv\n    \"\"\"\n\n    def __init__(self, input_files=\"07_Items_SAMPLE.yaml\", limit_types: list = None):\n\"\"\"Initialize. Load file, establish attributes\n\n        Args:\n            input_files (str, optional): String to local file or list of strings.\n                Defaults to \"04_Powers_SAMPLE.yaml\".\n            limit_types (list, optional): Only output items of provided types.\n                Defaults to None, which means all of the following:\n                [\"General\", \"Consumable\", \"Tool\", \"Armor\", \"Weapon\", \"Shield\"]\n        \"\"\"\n        input_files = ensure_list(ambiguous_item=input_files)\n        super().__init__(\n            input_files=[file for file in input_files if \"item\" in file.lower()]\n        )\n        self._limit_types = limit_types or list_item_types\n        self._as_dict = {}\n        self._categories = {}\n        self._categories_set = set()\n        self._csv_fields = set()\n        self._type_dict = {k: [] for k in self._limit_types}\n\n    @property\n    def as_dict(self) -&gt; dict:\n\"\"\"Return dict of {Name:Item class}\"\"\"\n        if not self._as_dict and not self._tried_loading:\n            self._build_contents(Item, \"Rarity\")\n        return self._as_dict\n\n    @property\n    def categories(self) -&gt; list:\n\"\"\"Return set of tuples: (categories, subcategories)\"\"\"\n        return self._build_categories(build_with=\"Type\")\n\n    @property\n    def csv_fields(self):\n\"\"\"Return a list of fields for the CSV output in the desired order\"\"\"\n        if not self._csv_fields:\n            _ = self.categories\n        move_front = [\"Type\", \"Name\", \"Rarity\", \"Cost\"]\n        return [\n            *move_front,\n            *[i for i in sorted(list(self._csv_fields)) if i not in move_front],\n        ]\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Items.__init__", "title": "<code>__init__(input_files='07_Items_SAMPLE.yaml', limit_types=None)</code>", "text": "<p>Initialize. Load file, establish attributes</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>str</code> <p>String to local file or list of strings. Defaults to \"04_Powers_SAMPLE.yaml\".</p> <code>'07_Items_SAMPLE.yaml'</code> <code>limit_types</code> <code>list</code> <p>Only output items of provided types. Defaults to None, which means all of the following: [\"General\", \"Consumable\", \"Tool\", \"Armor\", \"Weapon\", \"Shield\"]</p> <code>None</code> Source code in <code>automation/templates/items.py</code> <pre><code>def __init__(self, input_files=\"07_Items_SAMPLE.yaml\", limit_types: list = None):\n\"\"\"Initialize. Load file, establish attributes\n\n    Args:\n        input_files (str, optional): String to local file or list of strings.\n            Defaults to \"04_Powers_SAMPLE.yaml\".\n        limit_types (list, optional): Only output items of provided types.\n            Defaults to None, which means all of the following:\n            [\"General\", \"Consumable\", \"Tool\", \"Armor\", \"Weapon\", \"Shield\"]\n    \"\"\"\n    input_files = ensure_list(ambiguous_item=input_files)\n    super().__init__(\n        input_files=[file for file in input_files if \"item\" in file.lower()]\n    )\n    self._limit_types = limit_types or list_item_types\n    self._as_dict = {}\n    self._categories = {}\n    self._categories_set = set()\n    self._csv_fields = set()\n    self._type_dict = {k: [] for k in self._limit_types}\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Items.as_dict", "title": "<code>as_dict: dict</code>  <code>property</code>", "text": "<p>Return dict of {Name:Item class}</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Items.categories", "title": "<code>categories: list</code>  <code>property</code>", "text": "<p>Return set of tuples: (categories, subcategories)</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Items.csv_fields", "title": "<code>csv_fields</code>  <code>property</code>", "text": "<p>Return a list of fields for the CSV output in the desired order</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Use", "title": "<code>Use</code>  <code>dataclass</code>", "text": "<p>Class representing prerequisites for a given power</p> Source code in <code>automation/templates/items.py</code> <pre><code>@dataclass(order=True)\nclass Use:\n\"\"\"Class representing prerequisites for a given power\"\"\"\n\n    Time: str = None\n    Effect: int = None\n    Duration: str = None\n    Limit: str = None\n    Power: str = None\n    PowerFull: str = field(default=None, repr=False)\n    PowerMechanic: str = field(default=None, repr=False)\n\n    def __post_init__(self):\n\"\"\"After initializing, run checks.\n\n        Checks:\n            1. Time is either a valid action or numeric prefix before another word\n            2. If Limit is just a number add 'times'\n            3. If passed a Power name (with option), set option and retrieve power.\n            4. If passed both Power and Effect, log warning. Default to power on print.\n        \"\"\"\n        if self.Time:\n            dur, measure = self.Time.lower().split(\" \")\n            if measure == \"action\" and dur not in map(str.lower, list_power_types):\n                logger.warning(f\"{dir} not a known action type.\")\n            elif measure != \"action\" and not dur.isnumeric():\n                logger.warning(f\"Expected number for non-action use time: {self.Time}\")\n        if self.Limit and self.Limit.isnumeric():\n            self.Limit += \"times\"\n        if self.Power:\n            # Handles multiple powers listed, without choices\n            if isinstance(self.Power, list) and not isinstance(self.Power[0], dict):\n                self.Power = \"Choose the effects of \" + list_to_or(self.Power)\n                choice = None  # no full power mechanic\n            else:\n                if isinstance(self.Power, list):  # handles 1 Power: choice\n                    power_name, choice = next(iter(self.Power[0].items()))\n                else:  # handles 1 Power\n                    power_name, choice = self.Power, None\n\n                power_lookup = all_powers.get(power_name, None)\n\n                if not power_lookup:  # If unknown power\n                    self.Power = power_name\n                    logger.warning(f\"Item invokes unknown Power: {power_name}\")\n                else:\n                    self.PowerFull = all_powers[power_name].set_choice(choice)\n                    self.Power = self.PowerFull.Name\n                    self.PowerMechanic = self.PowerFull._mechanic_for_item\n        if self.Effect and self.Power:\n            logger.warning(\n                f\"For items, use effect or power, not both: {self.Effect}, {power_name}\"\n            )\n\n    @property\n    def non_defaults(self):\n\"\"\"Return non-default items with field.repr==True\"\"\"\n        return {\n            f.name: attrgetter(f.name)(self)\n            for f in fields(self)\n            if f.repr and (attrgetter(f.name)(self) is not None)\n        }\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return a single dictionary with Use_X as key for each Use field\"\"\"\n        return flatten_embedded(dict(Use=self.non_defaults))\n\n    @property\n    def merged_string(self) -&gt; str:\n\"\"\"Return a single string representing item, like MergedMechanic for Power\"\"\"\n        output = f\"Up to {self.Limit}, \" if self.Limit else \"\"\n        output += f\"take {self.Time} to activate. \" if self.Time else \"\"\n        output = output.capitalize()\n        output += self.PowerMechanic or self.Effect or self.Power\n        output += \".\" if output[-1] != \".\" else \"\"\n        output += f\" Lasts {self.Duration}.\" if self.Duration else \"\"\n        return output\n\n    def __repr__(self) -&gt; str:\n        return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Use.__post_init__", "title": "<code>__post_init__()</code>", "text": "<p>After initializing, run checks.</p> Checks <ol> <li>Time is either a valid action or numeric prefix before another word</li> <li>If Limit is just a number add 'times'</li> <li>If passed a Power name (with option), set option and retrieve power.</li> <li>If passed both Power and Effect, log warning. Default to power on print.</li> </ol> Source code in <code>automation/templates/items.py</code> <pre><code>def __post_init__(self):\n\"\"\"After initializing, run checks.\n\n    Checks:\n        1. Time is either a valid action or numeric prefix before another word\n        2. If Limit is just a number add 'times'\n        3. If passed a Power name (with option), set option and retrieve power.\n        4. If passed both Power and Effect, log warning. Default to power on print.\n    \"\"\"\n    if self.Time:\n        dur, measure = self.Time.lower().split(\" \")\n        if measure == \"action\" and dur not in map(str.lower, list_power_types):\n            logger.warning(f\"{dir} not a known action type.\")\n        elif measure != \"action\" and not dur.isnumeric():\n            logger.warning(f\"Expected number for non-action use time: {self.Time}\")\n    if self.Limit and self.Limit.isnumeric():\n        self.Limit += \"times\"\n    if self.Power:\n        # Handles multiple powers listed, without choices\n        if isinstance(self.Power, list) and not isinstance(self.Power[0], dict):\n            self.Power = \"Choose the effects of \" + list_to_or(self.Power)\n            choice = None  # no full power mechanic\n        else:\n            if isinstance(self.Power, list):  # handles 1 Power: choice\n                power_name, choice = next(iter(self.Power[0].items()))\n            else:  # handles 1 Power\n                power_name, choice = self.Power, None\n\n            power_lookup = all_powers.get(power_name, None)\n\n            if not power_lookup:  # If unknown power\n                self.Power = power_name\n                logger.warning(f\"Item invokes unknown Power: {power_name}\")\n            else:\n                self.PowerFull = all_powers[power_name].set_choice(choice)\n                self.Power = self.PowerFull.Name\n                self.PowerMechanic = self.PowerFull._mechanic_for_item\n    if self.Effect and self.Power:\n        logger.warning(\n            f\"For items, use effect or power, not both: {self.Effect}, {power_name}\"\n        )\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Use.non_defaults", "title": "<code>non_defaults</code>  <code>property</code>", "text": "<p>Return non-default items with field.repr==True</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Use.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return a single dictionary with Use_X as key for each Use field</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Use.merged_string", "title": "<code>merged_string: str</code>  <code>property</code>", "text": "<p>Return a single string representing item, like MergedMechanic for Power</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Cost", "title": "<code>Cost</code>  <code>dataclass</code>", "text": "<p>Item cost split by number and currency. Useful for csv comparisons</p> Source code in <code>automation/templates/items.py</code> <pre><code>@dataclass(order=True)\nclass Cost:\n\"\"\"Item cost split by number and currency. Useful for csv comparisons\"\"\"\n\n    raw: str = field(repr=False)\n    Value: int = field(init=False)\n    Denomination: str = field(init=False)\n\n    def __post_init__(self):\n\"\"\"Check that currency is in list of valid currencies (e.g., gp, cp)\"\"\"\n        self.Value, self.Denomination = self.raw.split(\" \")\n        if self.Denomination not in list_currencies:\n            logger.warning(f\"Unexpected currency type: {self.Denomination}\")\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return single dictionary with {Cost_Value: Value, Cost_Denom: denom}\"\"\"\n        return flatten_embedded(dict(Cost=self.__dict__))\n\n    def __repr__(self) -&gt; str:\n\"\"\"When printing, just use raw form e.g. 2 gp\"\"\"\n        return self.raw\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Cost.__post_init__", "title": "<code>__post_init__()</code>", "text": "<p>Check that currency is in list of valid currencies (e.g., gp, cp)</p> Source code in <code>automation/templates/items.py</code> <pre><code>def __post_init__(self):\n\"\"\"Check that currency is in list of valid currencies (e.g., gp, cp)\"\"\"\n    self.Value, self.Denomination = self.raw.split(\" \")\n    if self.Denomination not in list_currencies:\n        logger.warning(f\"Unexpected currency type: {self.Denomination}\")\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Cost.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return single dictionary with {Cost_Value: Value, Cost_Denom: denom}</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Cost.__repr__", "title": "<code>__repr__()</code>", "text": "<p>When printing, just use raw form e.g. 2 gp</p> Source code in <code>automation/templates/items.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"When printing, just use raw form e.g. 2 gp\"\"\"\n    return self.raw\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Item", "title": "<code>Item</code>  <code>dataclass</code>", "text": "<p>Class representing an item</p> Source code in <code>automation/templates/items.py</code> <pre><code>@dataclass(order=True)\nclass Item:\n\"\"\"Class representing an item\"\"\"\n\n    sort_index: str = field(init=False, repr=False)\n    id: str = field(repr=False)\n    Name: str\n    Type: str = field(default=\"General\", repr=False)\n    Cost: str = None\n    Rarity: str = field(default=\"Common\")\n    Description: str = field(default=\"\")\n    Use: dict = field(default=None)\n    Range: int = 6\n    AOE: str = None\n    Damage: int = 0\n    Save: dict = field(default=None, repr=False)\n    Prereq: dict = field(default=None)\n    StatAdjust: dict = field(default=None, repr=False)\n    Tags: list = None\n\n    def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n        self.sort_index = self.Type\n        self.Save = Save(**self.Save) if self.Save else None\n        self.Prereq = Prereq(**self.Prereq) if self.Prereq else None\n        self.Use = Use(**self.Use) if self.Use else None\n        self.StatAdjusts = (\n            self._compose_adjust(self.StatAdjust) if self.StatAdjust else None\n        )\n        self.Cost = Cost(self.Cost) if self.Cost else None\n        if self.StatAdjusts and not self.Description:\n            self.Description = \". \".join([s.text for s in self.StatAdjusts]) + \".\"\n\n    def _compose_adjust(self, stat_adjust_items) -&gt; list:\n\"\"\"Compose list of StatAdjust class objects, respecting Add vs. Replace\"\"\"\n        output = []\n        for k, v in stat_adjust_items.items():\n            if k.lower() in [\"add\", \"replace\"]:\n                output += [StatAdjust(Stat=s, Value=val, add=k) for s, val in v.items()]\n            else:\n                output.append(StatAdjust(Stat=k, Value=v, add=True))\n        return output\n\n    @property\n    def markdown(self) -&gt; str:\n\"\"\"Concatenate info relevant to markdown export\"\"\"\n        output = f\"\\n**{self.Name}**\\n\\n\"\n        for f in fields(self):\n            if attrgetter(f.name)(self) != f.default and f.name != \"Name\" and f.repr:\n                if f.name == \"Prereq\":\n                    for key, value in self.Prereq.flat.items():\n                        title = key.replace(\"_\", \" \")\n                        output += make_bullet(f\"{title}: {value}\")\n                elif f.name == \"Cost\":\n                    output += make_bullet(f\"Cost: {self.Cost.raw}\")\n                elif f.name == \"Use\":\n                    output += make_bullet(f\"Use: {self.Use.merged_string}\")\n                elif f.name == \"Tags\":\n                    output += make_bullet(f\"Tags: {', '.join(ensure_list(self.Tags))}\")\n                else:\n                    output += make_bullet(\n                        f\"{f.name}: {list_to_or(attrgetter(f.name)(self))}\"\n                    )\n        return output\n\n    @property\n    def csv_dict(self) -&gt; dict:\n\"\"\"Set of information to be added as a row in the output csv\"\"\"\n        removed = [\n            \"sort_index\",\n            \"StatAdjust\",\n            \"StatAdjusts\",\n            \"Prereq\",\n            \"Description\",\n            \"id\",\n            \"Use\",\n        ]\n        output = {k: v for k, v in self.__dict__.items() if k not in removed}\n        for attrib in [self.Prereq, self.Use]:\n            for a in ensure_list(attrib):\n                if a:\n                    output.update({**a.flat})\n        return output\n\n    def __repr__(self):\n\"\"\"Print non-default items with repr property and linebreaks\"\"\"\n        return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Item.__post_init__", "title": "<code>__post_init__()</code>", "text": "<p>Generate values not given on initialization</p> Source code in <code>automation/templates/items.py</code> <pre><code>def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n    self.sort_index = self.Type\n    self.Save = Save(**self.Save) if self.Save else None\n    self.Prereq = Prereq(**self.Prereq) if self.Prereq else None\n    self.Use = Use(**self.Use) if self.Use else None\n    self.StatAdjusts = (\n        self._compose_adjust(self.StatAdjust) if self.StatAdjust else None\n    )\n    self.Cost = Cost(self.Cost) if self.Cost else None\n    if self.StatAdjusts and not self.Description:\n        self.Description = \". \".join([s.text for s in self.StatAdjusts]) + \".\"\n</code></pre>"}, {"location": "api/automation/templates/items/#automation.templates.items.Item.markdown", "title": "<code>markdown: str</code>  <code>property</code>", "text": "<p>Concatenate info relevant to markdown export</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Item.csv_dict", "title": "<code>csv_dict: dict</code>  <code>property</code>", "text": "<p>Set of information to be added as a row in the output csv</p>"}, {"location": "api/automation/templates/items/#automation.templates.items.Item.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default items with repr property and linebreaks</p> Source code in <code>automation/templates/items.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default items with repr property and linebreaks\"\"\"\n    return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/main/", "title": "Main", "text": ""}, {"location": "api/automation/templates/main/#automation.templates.main.yaml_to_other", "title": "<code>yaml_to_other(input_files=['04_Powers.yaml', '05_Vulnerabilities.yaml', '06_Bestiary.yaml', '07_Items.yaml', '08_PCs.yaml'], writing=['md', 'csv', 'png'], out_delim='\\t', run_samples=False)</code>", "text": "<p>Execute all write functions based on inputs at top of script</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>list</code> <p>Local relative paths. If len=2, also make combined csv</p> <code>['04_Powers.yaml', '05_Vulnerabilities.yaml', '06_Bestiary.yaml', '07_Items.yaml', '08_PCs.yaml']</code> <code>writing</code> <code>list</code> <p>List of output formats.</p> <code>['md', 'csv', 'png']</code> <code>out_delim</code> <code>str</code> <p>CSV delimiter - <code></code> or <code>,</code></p> <code>'\\t'</code> Source code in <code>automation/templates/main.py</code> <pre><code>def yaml_to_other(\n    input_files: list = [\n        \"04_Powers.yaml\",\n        \"05_Vulnerabilities.yaml\",\n        \"06_Bestiary.yaml\",\n        \"07_Items.yaml\",\n        \"08_PCs.yaml\",\n    ],\n    writing: list = [\"md\", \"csv\", \"png\"],\n    out_delim: str = \"\\t\",  # or ','\n    run_samples=False,\n):\n\"\"\"Execute all write functions based on inputs at top of script\n\n    Args:\n        input_files (list, optional): Local relative paths.\n            If len=2, also make combined csv\n        writing (list, optional): List of output formats.\n        out_delim (str, optional): CSV delimiter - `\\t` or `,`\n    \"\"\"\n    for file in input_files:\n        if run_samples and \"Vuln\" not in file:\n            file = file.split(\".\")[0] + \"_SAMPLE.yaml\"\n\n        logger.debug(f\"Started {file}\")\n\n        if \"best\" in file.lower() or \"pc\" in file.lower():\n            my_class = Bestiary(file)\n            if \"png\" in writing:\n                for pc in my_class.categories.get((\"PC\",), []):\n                    my_class.as_dict[pc].make_pc_img()\n        elif \"power\" in file.lower() or \"vuln\" in file.lower():\n            my_class = Powers(file)\n        elif \"item\" in file.lower():\n            my_class = Items(file)\n        else:\n            raise ValueError(\"Could not infer ingestion routine by file name.\")\n\n        if \"md\" in writing:\n            my_class.write_md(output_fp=None, TOC=False)\n        if \"csv\" in writing:\n            my_class.write_csv(delimiter=out_delim)\n    if \"04_Powers.yaml\" in input_files and \"05_Vulnerabilities.yaml\" in input_files:\n        Powers(input_files=[\"04_Powers.yaml\", \"05_Vulnerabilities.yaml\"]).write_csv()\n</code></pre>"}, {"location": "api/automation/templates/powers/", "title": "Powers", "text": ""}, {"location": "api/automation/templates/powers/#automation.templates.powers.Powers", "title": "<code>Powers</code>", "text": "<p>             Bases: <code>YamlSpec</code></p> <p>Set of DofA powers</p> <p>Attributes:</p> Name Type Description <code>as_dict</code> <code>dict</code> <p>dictionary of powers with ids as keys</p> <code>categories</code> <code>OrderedDict</code> <p>tuple of type as key, with list values of individuals</p> <code>csv_fields</code> <code>list</code> <p>list of fields to be included in csv</p> Source code in <code>automation/templates/powers.py</code> <pre><code>class Powers(YamlSpec):\n\"\"\"Set of DofA powers\n\n    Attributes:\n        as_dict (dict): dictionary of powers with ids as keys\n        categories (OrderedDict): tuple of type as key, with list values of individuals\n        csv_fields (list): list of fields to be included in csv\n    \"\"\"\n\n    def __init__(self, input_files=\"04_Powers_SAMPLE.yaml\", limit_types: list = None):\n\"\"\"Initialize. Load file, establish attributes\n\n        Args:\n            input_files (str, optional): String to local file or list of strings.\n                Defaults to \"04_Powers_SAMPLE.yaml\".\n            limit_types (list, optional): Only output items of provided types.\n                Defaults to None, which means all of the following:\n                [\"Major\", \"Minor\", \"Passive\", \"Adversary\", \"House\", \"Free\", \"Vulny\"]\n        \"\"\"\n        input_files = [\n            file\n            for file in ensure_list(ambiguous_item=input_files)\n            if \"power\" in file.lower() or \"vuln\" in file.lower()\n        ]\n        super().__init__(input_files=input_files)\n        self._limit_types = limit_types or list_power_types\n        self._as_dict = {}\n        self._categories = {}\n        self._categories_set = set()\n        self._csv_fields = set()\n\n    @property\n    def as_dict(self) -&gt; dict:\n\"\"\"Return dict of {Name:Power class}\"\"\"\n        if not self._as_dict and not self._tried_loading:\n            self._build_contents(Power)\n        return self._as_dict\n\n    @property\n    def categories(self) -&gt; OrderedDict(tuple=list):\n\"\"\"Return set of ordered dict with category set key and power name list as value\n\n        Each power may be in multiple categories. This property serves as a cache to\n        look up the powers associated with a unique set of categories\n\n        Example:\n            {(Combat,) : ['Sweep', 'Momentum'], ('Combat', 'Support'), ['Shield, Self']}\n        \"\"\"\n        if not self._categories:\n            self._categories = self._build_categories(build_with=\"Category\")\n        return self._categories\n\n    @property\n    def csv_fields(self) -&gt; list:\n\"\"\"Return a list of fields for the CSV output in the desired order\"\"\"\n        if not self._csv_fields:\n            _ = self.categories\n        move_front = [\"Type\", \"Name\", \"XP\", \"Mechanic\"]\n        return [\n            *move_front,\n            *[i for i in sorted(list(self._csv_fields)) if i not in move_front],\n        ]\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Powers.__init__", "title": "<code>__init__(input_files='04_Powers_SAMPLE.yaml', limit_types=None)</code>", "text": "<p>Initialize. Load file, establish attributes</p> <p>Parameters:</p> Name Type Description Default <code>input_files</code> <code>str</code> <p>String to local file or list of strings. Defaults to \"04_Powers_SAMPLE.yaml\".</p> <code>'04_Powers_SAMPLE.yaml'</code> <code>limit_types</code> <code>list</code> <p>Only output items of provided types. Defaults to None, which means all of the following: [\"Major\", \"Minor\", \"Passive\", \"Adversary\", \"House\", \"Free\", \"Vulny\"]</p> <code>None</code> Source code in <code>automation/templates/powers.py</code> <pre><code>def __init__(self, input_files=\"04_Powers_SAMPLE.yaml\", limit_types: list = None):\n\"\"\"Initialize. Load file, establish attributes\n\n    Args:\n        input_files (str, optional): String to local file or list of strings.\n            Defaults to \"04_Powers_SAMPLE.yaml\".\n        limit_types (list, optional): Only output items of provided types.\n            Defaults to None, which means all of the following:\n            [\"Major\", \"Minor\", \"Passive\", \"Adversary\", \"House\", \"Free\", \"Vulny\"]\n    \"\"\"\n    input_files = [\n        file\n        for file in ensure_list(ambiguous_item=input_files)\n        if \"power\" in file.lower() or \"vuln\" in file.lower()\n    ]\n    super().__init__(input_files=input_files)\n    self._limit_types = limit_types or list_power_types\n    self._as_dict = {}\n    self._categories = {}\n    self._categories_set = set()\n    self._csv_fields = set()\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Powers.as_dict", "title": "<code>as_dict: dict</code>  <code>property</code>", "text": "<p>Return dict of {Name:Power class}</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Powers.categories", "title": "<code>categories: OrderedDict(tuple=list)</code>  <code>property</code>", "text": "<p>Return set of ordered dict with category set key and power name list as value</p> <p>Each power may be in multiple categories. This property serves as a cache to look up the powers associated with a unique set of categories</p> Example <p>{(Combat,) : ['Sweep', 'Momentum'], ('Combat', 'Support'), ['Shield, Self']}</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Powers.csv_fields", "title": "<code>csv_fields: list</code>  <code>property</code>", "text": "<p>Return a list of fields for the CSV output in the desired order</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.StatAdjust", "title": "<code>StatAdjust</code>  <code>dataclass</code>", "text": "<p>Class representing attrib or skill number to add (e.g., Dumb vulny reduces INT)</p> Source code in <code>automation/templates/powers.py</code> <pre><code>@dataclass(order=True)\nclass StatAdjust:\n\"\"\"Class representing attrib or skill number to add (e.g., Dumb vulny reduces INT)\"\"\"\n\n    Stat: str\n    Value: int\n    add: bool = True\n\n    def __post_init__(self):\n        if isinstance(self.add, str):\n            self.add = self.add.lower() == \"add\"\n\n    @property\n    def text(self) -&gt; str:\n\"\"\"Return mechanic text of override: Add X to stat or Replace stat with X\"\"\"\n        if self.add:\n            return f\"Add {self.Value} to {self.Stat}\"\n        return f\"Replace {self.Stat} with {self.Value}\"\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return flatted dict {'StatAdjust_X': value} pairs for csv export\"\"\"\n        return flatten_embedded(\n            {\"StatAdjust\": {\"Stat\": self.Stat, \"Value\": self.Value, \"Add\": self.add}}\n        )\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.StatAdjust.text", "title": "<code>text: str</code>  <code>property</code>", "text": "<p>Return mechanic text of override: Add X to stat or Replace stat with X</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.StatAdjust.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return flatted dict {'StatAdjust_X': value} pairs for csv export</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Prereq", "title": "<code>Prereq</code>  <code>dataclass</code>", "text": "<p>Class representing prerequisites for a given power</p> Source code in <code>automation/templates/powers.py</code> <pre><code>@dataclass(order=True)\nclass Prereq:\n\"\"\"Class representing prerequisites for a given power\"\"\"\n\n    Role: str = None\n    Level: int = None\n    Skill: str = None\n    Power: str = None\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return flatted dict {'Prereq_example': value} pairs for csv export\"\"\"\n        return flatten_embedded(dict(Prereq=self.__dict__))\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Prereq.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return flatted dict {'Prereq_example': value} pairs for csv export</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Save", "title": "<code>Save</code>  <code>dataclass</code>", "text": "<p>Class representing a save triggered by a power</p> Source code in <code>automation/templates/powers.py</code> <pre><code>@dataclass(order=True)\nclass Save:\n\"\"\"Class representing a save triggered by a power\"\"\"\n\n    Trigger: str = field(repr=False)\n    Type: str\n    DR: int = None\n    Fail: str = field(default=None, repr=False)\n    Succeed: str = field(default=None, repr=False)\n\n    @property\n    def text(self) -&gt; str:\n\"\"\"Given a Save dict from a power, return a readable sentence\n\n        Returns:\n            save_string (str): readable sentence detailing all features of a save\n        \"\"\"\n        sentence = self.Trigger + \", target(s) make a \"\n        sentence += \"DR \" + str(self.DR) + \" \" if self.DR else \"\"\n        sentence += list_to_or(self.Type) + \" Save\"\n        sentence += (\n            \"\"\n            if self.DR\n            else \" with a DR of 3 minus half the Primary Skill of the Attacker\"\n        )\n        output = [sentence, \"On fail, target(s) \" + self.Fail]\n        output.append(\"On success, target(s) \" + self.Succeed) if self.Succeed else None\n        return \". \".join(output) + \".\"\n\n    @property\n    def flat(self) -&gt; dict:\n\"\"\"Return flatted dict {'Save_example': value} pairs for csv export\"\"\"\n        return flatten_embedded({\"Save\": {\"Type\": self.Type, \"DR\": self.DR}})\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Save.text", "title": "<code>text: str</code>  <code>property</code>", "text": "<p>Given a Save dict from a power, return a readable sentence</p> <p>Returns:</p> Name Type Description <code>save_string</code> <code>str</code> <p>readable sentence detailing all features of a save</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Save.flat", "title": "<code>flat: dict</code>  <code>property</code>", "text": "<p>Return flatted dict {'Save_example': value} pairs for csv export</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power", "title": "<code>Power</code>  <code>dataclass</code>", "text": "<p>Class representing a Power</p> Source code in <code>automation/templates/powers.py</code> <pre><code>@dataclass(order=True)\nclass Power:\n\"\"\"Class representing a Power\"\"\"\n\n    sort_index: str = field(init=False, repr=False)\n    Name: str\n    Type: str = field(repr=False)\n    Category: Union[str, list] = field(repr=False)\n    id: str = field(default=\"\", repr=False)\n    Description: str = field(default=\"\")\n    Mechanic: Union[str, list] = field(default=\"\")\n    Mechanic_raw: str = field(init=False, repr=False)\n    XP: int = 0\n    PP: int = field(default=0, repr=False)\n    Range: int = 6\n    AOE: str = None\n    Targets: int = 1\n    Draw: str = None\n    Options: str = field(default=None, repr=False)\n    Choice: str = field(default=None, repr=False)\n    Damage: int = field(default=1, repr=True)\n    ToHit: int = 1\n    Save: dict = field(default=None, repr=False)\n    Prereq: dict = field(default=None)\n    StatAdjust: dict = field(default=None, repr=False)\n    Tags: list = None\n\n    def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n        self.sort_index = self.Type\n        self.Category = ensure_list(self.Category)\n        self.Save = Save(**self.Save) if self.Save else None\n        self.Prereq = Prereq(**self.Prereq) if self.Prereq else None\n        self.Damage = 0 if self.Type in [\"Vulny\", \"Passive\"] else self.Damage\n        self.StatAdjusts = (\n            self._compose_adjust(self.StatAdjust) if self.StatAdjust else None\n        )\n        self.Mechanic_raw = self.Mechanic\n        self.Mechanic = self.merge_mechanic()\n        self.upper_lower_int = self._get_upper_lower_int() if self.Draw else None\n        logger.debug(f\"Loaded {self.Name}\")\n\n    def set_choice(self, choice: str = None):\n\"\"\"Given a choice among options, revise merged mechanic property\n\n        Example:\n            Power yaml:\n                Options: Select on of the following X when taking this power: A, B, C\n                Mechanic: When X, do Y for selected option.\n            Power MergedMechanic: Select.... When X, do Y for selected option.\n            &gt;&gt;&gt; power.set_choice(choice='A') # A is of type X\n            Power MergedMechanic: A. When X, do Y for selected option.\n\n        Args:\n            choice (str): Optional. Default no change. Sets choice and compiles merged\n                mechanic to reflect selected choice.\n        \"\"\"\n        if not choice:\n            return self\n\n        self.Choice = choice\n        self.Mechanic = self.merge_mechanic()\n        return self\n\n    def _get_upper_lower_int(self) -&gt; int:\n\"\"\"When value passed as Draw in yaml, return relevant integer.\n\n        Example:\n            Upper, Lower, None, -3, 4 would return 2, -2, 0, -3, 4 respectively\n\n        \"\"\"\n        ul_dict = dict(U=2, L=-2, N=0)\n        val = self.Draw.upper()[0]\n        return ul_dict[val] if isinstance(val, str) else int(self.Draw)\n\n    def _compose_adjust(self, stat_adjust_items):\n        output = []\n        for k, v in stat_adjust_items.items():\n            if k.lower() in [\"add\", \"replace\"]:\n                output += [StatAdjust(Stat=s, Value=val, add=k) for s, val in v.items()]\n            else:\n                output.append(StatAdjust(Stat=k, Value=v, add=True))\n        return output\n\n    def merge_mechanic(self) -&gt; str:\n\"\"\"Given power dict, merge all appropriate items into Mechanic\n\n        Returns:\n            power_merged (str): power sentence with all mechanic items combined.\n        \"\"\"\n        if isinstance(self.Mechanic_raw, list):  # when mech are list, indent after 1st\n            mech_bullets = self.Type + \". \" + self.Mechanic_raw[0] + \"\\n\"\n            for mech_bullet in self.Mechanic_raw[1:]:\n                mech_bullets += make_bullet(mech_bullet, 1)\n            return mech_bullets[:-1]  # remove last space.\n        else:\n            output = []\n            if self.Options:\n                output.append(self.Choice if self.Choice else self.Options)\n            if self.PP != 0:\n                output.append(\n                    \"For \" + list_to_or(self.PP) + \" PP, \" + self.Mechanic_raw\n                )\n            elif self.Mechanic_raw:\n                output.append(self.Mechanic_raw)\n            if self.StatAdjust:\n                output += [adjust.text for adjust in self.StatAdjusts]\n            if self.Save:\n                output.append(self.Save.text)\n            output_concat = \". \".join([self.Type, *output])\n            return output_concat.replace(\"..\", \".\")\n\n    @property\n    def _mechanic_for_item(self) -&gt; str:\n\"\"\"String of choice and raw mechanic for items. No other aspects of Power\"\"\"\n        choice = self.Choice + \". \" if self.Choice else \"\"\n        return choice + self.Mechanic_raw\n\n    @property\n    def markdown(self) -&gt; str:\n\"\"\"Concatenate info relevant to markdown export\"\"\"\n        output = f\"\\n**{self.Name}**\\n\\n\"\n        for f in fields(self):\n            if attrgetter(f.name)(self) != f.default and f.name != \"Name\" and f.repr:\n                if f.name == \"Prereq\":\n                    for key, value in self.Prereq.flat.items():\n                        title = key.replace(\"_\", \" \")\n                        output += make_bullet(f\"{title}: {value}\")\n                elif f.name == \"Damage\" and self.Type in [\"Vulny\", \"Passive\"]:\n                    continue\n                else:\n                    output += make_bullet(\n                        f\"{f.name}: {list_to_or(attrgetter(f.name)(self))}\"\n                    )\n        return output\n\n    @property\n    def csv_dict(self) -&gt; dict:\n\"\"\"Set of information to be added as a row in the output csv\"\"\"\n        removed = [\n            \"sort_index\",\n            \"Mechanic_raw\",\n            \"Options\",\n            \"Choice\",\n            \"StatAdjust\",\n            \"Save\",\n            \"Prereq\",\n            \"Description\",\n        ]\n        output = {k: v for k, v in self.__dict__.items() if k not in removed}\n        output[\"Mechanic\"] = output[\"Mechanic\"].replace(\"\\n\", \"\\\\\")\n        for attrib in [self.StatAdjusts, self.Save, self.Prereq]:\n            for a in ensure_list(attrib):\n                if a:\n                    output.update({**a.flat})\n        return output\n\n    def __repr__(self):\n\"\"\"Print non-default power items with repr property and linebreaks\"\"\"\n        return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.__post_init__", "title": "<code>__post_init__()</code>", "text": "<p>Generate values not given on initialization</p> Source code in <code>automation/templates/powers.py</code> <pre><code>def __post_init__(self):\n\"\"\"Generate values not given on initialization\"\"\"\n    self.sort_index = self.Type\n    self.Category = ensure_list(self.Category)\n    self.Save = Save(**self.Save) if self.Save else None\n    self.Prereq = Prereq(**self.Prereq) if self.Prereq else None\n    self.Damage = 0 if self.Type in [\"Vulny\", \"Passive\"] else self.Damage\n    self.StatAdjusts = (\n        self._compose_adjust(self.StatAdjust) if self.StatAdjust else None\n    )\n    self.Mechanic_raw = self.Mechanic\n    self.Mechanic = self.merge_mechanic()\n    self.upper_lower_int = self._get_upper_lower_int() if self.Draw else None\n    logger.debug(f\"Loaded {self.Name}\")\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.set_choice", "title": "<code>set_choice(choice=None)</code>", "text": "<p>Given a choice among options, revise merged mechanic property</p> Example <p>Power yaml:     Options: Select on of the following X when taking this power: A, B, C     Mechanic: When X, do Y for selected option. Power MergedMechanic: Select.... When X, do Y for selected option.</p> <p>power.set_choice(choice='A') # A is of type X Power MergedMechanic: A. When X, do Y for selected option.</p> <p>Parameters:</p> Name Type Description Default <code>choice</code> <code>str</code> <p>Optional. Default no change. Sets choice and compiles merged mechanic to reflect selected choice.</p> <code>None</code> Source code in <code>automation/templates/powers.py</code> <pre><code>def set_choice(self, choice: str = None):\n\"\"\"Given a choice among options, revise merged mechanic property\n\n    Example:\n        Power yaml:\n            Options: Select on of the following X when taking this power: A, B, C\n            Mechanic: When X, do Y for selected option.\n        Power MergedMechanic: Select.... When X, do Y for selected option.\n        &gt;&gt;&gt; power.set_choice(choice='A') # A is of type X\n        Power MergedMechanic: A. When X, do Y for selected option.\n\n    Args:\n        choice (str): Optional. Default no change. Sets choice and compiles merged\n            mechanic to reflect selected choice.\n    \"\"\"\n    if not choice:\n        return self\n\n    self.Choice = choice\n    self.Mechanic = self.merge_mechanic()\n    return self\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.merge_mechanic", "title": "<code>merge_mechanic()</code>", "text": "<p>Given power dict, merge all appropriate items into Mechanic</p> <p>Returns:</p> Name Type Description <code>power_merged</code> <code>str</code> <p>power sentence with all mechanic items combined.</p> Source code in <code>automation/templates/powers.py</code> <pre><code>def merge_mechanic(self) -&gt; str:\n\"\"\"Given power dict, merge all appropriate items into Mechanic\n\n    Returns:\n        power_merged (str): power sentence with all mechanic items combined.\n    \"\"\"\n    if isinstance(self.Mechanic_raw, list):  # when mech are list, indent after 1st\n        mech_bullets = self.Type + \". \" + self.Mechanic_raw[0] + \"\\n\"\n        for mech_bullet in self.Mechanic_raw[1:]:\n            mech_bullets += make_bullet(mech_bullet, 1)\n        return mech_bullets[:-1]  # remove last space.\n    else:\n        output = []\n        if self.Options:\n            output.append(self.Choice if self.Choice else self.Options)\n        if self.PP != 0:\n            output.append(\n                \"For \" + list_to_or(self.PP) + \" PP, \" + self.Mechanic_raw\n            )\n        elif self.Mechanic_raw:\n            output.append(self.Mechanic_raw)\n        if self.StatAdjust:\n            output += [adjust.text for adjust in self.StatAdjusts]\n        if self.Save:\n            output.append(self.Save.text)\n        output_concat = \". \".join([self.Type, *output])\n        return output_concat.replace(\"..\", \".\")\n</code></pre>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.markdown", "title": "<code>markdown: str</code>  <code>property</code>", "text": "<p>Concatenate info relevant to markdown export</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.csv_dict", "title": "<code>csv_dict: dict</code>  <code>property</code>", "text": "<p>Set of information to be added as a row in the output csv</p>"}, {"location": "api/automation/templates/powers/#automation.templates.powers.Power.__repr__", "title": "<code>__repr__()</code>", "text": "<p>Print non-default power items with repr property and linebreaks</p> Source code in <code>automation/templates/powers.py</code> <pre><code>def __repr__(self):\n\"\"\"Print non-default power items with repr property and linebreaks\"\"\"\n    return my_repr(self)\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/", "title": "Yaml spec", "text": ""}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec", "title": "<code>YamlSpec</code>", "text": "<p>             Bases: <code>ABC</code></p> <p>Object for handling yaml spec files: Powers, Bestiary, etc</p> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>class YamlSpec(ABC):\n\"\"\"Object for handling yaml spec files: Powers, Bestiary, etc\"\"\"\n\n    def __init__(self, input_files) -&gt; None:\n\"\"\"Takes input files, loads raw data, gets stem and name for saving\n\n        If file not found at input_file relative path, adds ./automation/_input/\n        \"\"\"\n        self._md_TOC = \"\"\n        self._raw_data = {}\n        self._categories = set()\n        self._category_hierarchy = None\n        self._content = dict()\n        self._fields = None\n        self._default_root = os.getenv(\"THEGAME_ROOT\") or \"./automation/\"\n        self._filepath_default_input = self._default_root + \"_input/\"\n        self._filepath_default_output = self._default_root + \"_output/\"\n        self._filepath_mechanics = \"./docs/src/1_Mechanics/\"\n        self._tried_loading = False\n        self._limit_types = []\n        self._as_dict = {}\n        self._type_dict = {}  # Declaring on build_contents\n\n        input_files = ensure_list(input_files)\n        if not input_files:\n            logger.critical(\n                \"YamlSpec received empty file list. Check that file name contains\"\n                + \" relevant keywords like 'power', 'vuln', 'best', 'pc', or 'item'\"\n            )\n        elif len(input_files) &gt; 1:\n            self._stem = (\n                # When multiple inputs, take prefix before '_', add 'Combined'\n                os.path.splitext(os.path.basename(input_files[0]))[0]\n                + \"_Combined\"\n            )\n        elif len(input_files) == 1:\n            self._stem = os.path.splitext(os.path.basename(input_files[0]))[0]\n\n        self._filepath_output = (\n            self._filepath_default_output\n            if \"SAMPLE\" in self._stem or \"test\" in self._stem\n            else self._filepath_mechanics\n        )\n\n        for input_file in input_files:  # If provided mult files, combine\n            if not os.path.exists(input_file):\n                input_file = self._filepath_default_input + input_file\n            logger.debug(f\"Loading {input_file}\")\n            self._raw_data.update(load_yaml(input_file))\n        self._template = self._raw_data.pop(\"Template\", None)\n        self._name = self._stem.split(\"_\")[-1]\n\n    # ------------------------------- FILEPATH UTILITIES -------------------------------\n    @property\n    def filepath_default_input(self):\n        return self._filepath_default_input\n\n    @property\n    def filepath_default_output(self):\n        return self._filepath_default_output\n\n    @property\n    def filepath_output(self):\n        return self._filepath_output\n\n    @filepath_output.setter  # Allows setting new output fp\n    def filepath_output(self, filepath_output: str):\n        # TODO: add path verification here\n        self._filepath_output = filepath_output\n\n    # -------------------------------- CORE PROPERTIES ---------------------------------\n    def _build_contents(self, this_data_class, id_component=\"\", **kwargs):\n\"\"\"Loop over items in the raw dict format. Generate list and dict versions\"\"\"\n        self._type_dict = {k: [] for k in self._limit_types}\n        self._tried_loading = True\n        for k, v in self.raw_data.items():\n            type = v.get(\"Type\", None)\n            if not type:\n                logger.warning(f\"YAML item missing Type: {k}\")\n            elif type in self._limit_types:\n                id = v[\"Name\"] + str(v.get(id_component)) if v.get(\"Name\") else k\n                _ = v.setdefault(\"Name\", k)\n                self._as_dict.update({k: this_data_class(id=id, **v, **kwargs)})\n                self._type_dict[type].append(k)  # Build type dict\n            elif type not in self._limit_types:\n                logger.debug(f\"Skipping YAML item due to excluded Type: {k}\")\n\n    def _build_categories(self, build_with=\"Type\") -&gt; OrderedDict:\n\"\"\"Return OrderedDict with {tuple(Type) : [list of beasts]} as key value pairs\"\"\"\n        if not self._categories:\n            for k, v in self.as_dict.items():\n                cat_tuple = tuple(ensure_list(getattr(v, build_with)))\n                self._categories.setdefault(cat_tuple, [])\n                self._categories[cat_tuple].append(k)  # Changed v.Name -&gt; k\n                self._categories_set.add(cat_tuple)\n                self._csv_fields = self._csv_fields.union(list(v.csv_dict.keys()))\n                self._categories = sort_dict(\n                    self._categories, sorted(self._categories_set)\n                )\n        return self._categories\n\n    @property\n    def raw_data(self):\n        return self._raw_data\n\n    @abstractmethod\n    def as_dict(self):\n        pass\n\n    @abstractmethod\n    def categories(self) -&gt; dict:\n\"\"\"{(hierarchy tuple): [List of names]} dict\"\"\"\n        pass\n\n    @property\n    def type_dict(self) -&gt; dict:\n\"\"\"Cache of items by type e.g. {Major: [a, b]}\"\"\"\n        if not self._tried_loading:\n            self._build_contents\n        return self._type_dict\n\n    # ------------------------------- MARKDOWN UTILITIES -------------------------------\n    @property\n    def category_hierarchy(self) -&gt; list[tuple[str, int, tuple]]:\n\"\"\"List of tuples containing (item, indentation, and set of (sub)-categories)\n\n        Returns:\n            list[tuple]: [(item, indent, (category, subcategory, sub-sub, etc.))]\n        \"\"\"\n        if not self._category_hierarchy:\n            categories, indents, category_set, prev_category_tuple = [], [], [], tuple()\n            for category_tuple in self.categories.keys():\n                for idx, category in enumerate(category_tuple):  # indent lvl, category\n                    prev_category = (  # previous category at same heading level\n                        prev_category_tuple[idx]\n                        if idx &lt; len(prev_category_tuple)\n                        else None\n                    )\n                    if category != prev_category:  # if new, add\n                        categories.append(category)\n                        indents.append(idx)\n                        # subset of tuple relevant to heading level\n                        category_set.append(category_tuple[0 : idx + 1])\n                prev_category_tuple = category_tuple\n            self._category_hierarchy = list(zip(categories, indents, category_set))\n        return self._category_hierarchy\n\n    @property\n    def md_TOC(self) -&gt; str:\n\"\"\"Generate markdown Table of Contents with category_hierarchy\"\"\"\n        if not self._md_TOC:\n            TOC = \"&lt;!-- MarkdownTOC add_links=True --&gt;\\n\"\n            for category, indent, _ in self.category_hierarchy:\n                TOC += make_link(category, indent)\n            self._md_TOC = TOC + \"&lt;!-- /MarkdownTOC --&gt;\\n\"\n        return self._md_TOC\n\n    def make_entries(self, category_set: set) -&gt; str:\n\"\"\"All entries into bulleted lists with key prefixes.\n\n        Args:\n            category_set (set): unique set of categories (category, subcategory)\"\"\"\n        entries = \"\"\n        for item_name in self.categories.get(category_set, []):\n            entries += self.as_dict[item_name].markdown\n        return entries\n\n    def write_md(self, output_fp: str = None, TOC: bool = False):\n\"\"\"Write markdown\n\n        Args:\n            output_fp (str, optional): relative path for writing output file. Default\n                None meaning save to ../docs/src/1_Mechanics/ path with same file name\n            TOC (bool, optional): Write table of contents. Default False\n        \"\"\"\n        if not output_fp:\n            output_fp = self.filepath_output + self._stem + \".md\"\n        output = (\n            \"&lt;!-- markdownlint-disable MD013 MD024 --&gt;\\n\"\n            + \"&lt;!-- DEVELOPERS: Please edit corresponding yaml --&gt;\\n\"\n        )\n        if TOC:\n            output += self.md_TOC\n        for category, indent, category_set in self.category_hierarchy:\n            output += make_header(category, indent)\n            output += self.make_entries(category_set)\n        with open(output_fp, \"w\", newline=\"\") as f:\n            f.write(output)\n        logger.info(f\"Wrote md: {output_fp}\")\n\n    # --------------------------------- CSV UTILITIES ----------------------------------\n\n    @abstractmethod\n    def csv_fields(self) -&gt; list:\n\"\"\"Column names for csv\n\n        Returns:\n            fields (list): list of column headers for CSV\"\"\"\n        pass\n\n    def write_csv(self, output_fp: str = None, delimiter: str = \"\\t\"):\n\"\"\"Write CSV from YAML, default is tab-delimited\n\n        Args:\n            output_fp (str): relative filepath. Default none, which means local\n                _output subfolder\n            delimiter (str): column delimiter. `\\t` for tab or `,` for comma. If other,\n                must provide extension in ext\n        \"\"\"\n        suffix_dict = {\"\\t\": \".tsv\", \",\": \".csv\"}\n        if not output_fp:\n            output_fp = self.filepath_output + self._stem + suffix_dict[delimiter]\n        rows = []\n        with open(output_fp, \"w\", newline=\"\") as f_output:\n            csv_output = csv.DictWriter(\n                f_output,\n                fieldnames=self.csv_fields,\n                delimiter=delimiter,\n            )\n            csv_output.writeheader()\n            for i in self.as_dict.values():\n                rows.append(i.csv_dict)\n            csv_output.writerows(rows)\n        logger.info(f\"Wrote csv: {output_fp}\")\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.__init__", "title": "<code>__init__(input_files)</code>", "text": "<p>Takes input files, loads raw data, gets stem and name for saving</p> <p>If file not found at input_file relative path, adds ./automation/_input/</p> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>def __init__(self, input_files) -&gt; None:\n\"\"\"Takes input files, loads raw data, gets stem and name for saving\n\n    If file not found at input_file relative path, adds ./automation/_input/\n    \"\"\"\n    self._md_TOC = \"\"\n    self._raw_data = {}\n    self._categories = set()\n    self._category_hierarchy = None\n    self._content = dict()\n    self._fields = None\n    self._default_root = os.getenv(\"THEGAME_ROOT\") or \"./automation/\"\n    self._filepath_default_input = self._default_root + \"_input/\"\n    self._filepath_default_output = self._default_root + \"_output/\"\n    self._filepath_mechanics = \"./docs/src/1_Mechanics/\"\n    self._tried_loading = False\n    self._limit_types = []\n    self._as_dict = {}\n    self._type_dict = {}  # Declaring on build_contents\n\n    input_files = ensure_list(input_files)\n    if not input_files:\n        logger.critical(\n            \"YamlSpec received empty file list. Check that file name contains\"\n            + \" relevant keywords like 'power', 'vuln', 'best', 'pc', or 'item'\"\n        )\n    elif len(input_files) &gt; 1:\n        self._stem = (\n            # When multiple inputs, take prefix before '_', add 'Combined'\n            os.path.splitext(os.path.basename(input_files[0]))[0]\n            + \"_Combined\"\n        )\n    elif len(input_files) == 1:\n        self._stem = os.path.splitext(os.path.basename(input_files[0]))[0]\n\n    self._filepath_output = (\n        self._filepath_default_output\n        if \"SAMPLE\" in self._stem or \"test\" in self._stem\n        else self._filepath_mechanics\n    )\n\n    for input_file in input_files:  # If provided mult files, combine\n        if not os.path.exists(input_file):\n            input_file = self._filepath_default_input + input_file\n        logger.debug(f\"Loading {input_file}\")\n        self._raw_data.update(load_yaml(input_file))\n    self._template = self._raw_data.pop(\"Template\", None)\n    self._name = self._stem.split(\"_\")[-1]\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.categories", "title": "<code>categories()</code>  <code>abstractmethod</code>", "text": "<p>{(hierarchy tuple): [List of names]} dict</p> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>@abstractmethod\ndef categories(self) -&gt; dict:\n\"\"\"{(hierarchy tuple): [List of names]} dict\"\"\"\n    pass\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.type_dict", "title": "<code>type_dict: dict</code>  <code>property</code>", "text": "<p>Cache of items by type e.g. {Major: [a, b]}</p>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.category_hierarchy", "title": "<code>category_hierarchy: list[tuple[str, int, tuple]]</code>  <code>property</code>", "text": "<p>List of tuples containing (item, indentation, and set of (sub)-categories)</p> <p>Returns:</p> Type Description <code>list[tuple[str, int, tuple]]</code> <p>list[tuple]: [(item, indent, (category, subcategory, sub-sub, etc.))]</p>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.md_TOC", "title": "<code>md_TOC: str</code>  <code>property</code>", "text": "<p>Generate markdown Table of Contents with category_hierarchy</p>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.make_entries", "title": "<code>make_entries(category_set)</code>", "text": "<p>All entries into bulleted lists with key prefixes.</p> <p>Parameters:</p> Name Type Description Default <code>category_set</code> <code>set</code> <p>unique set of categories (category, subcategory)</p> required Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>def make_entries(self, category_set: set) -&gt; str:\n\"\"\"All entries into bulleted lists with key prefixes.\n\n    Args:\n        category_set (set): unique set of categories (category, subcategory)\"\"\"\n    entries = \"\"\n    for item_name in self.categories.get(category_set, []):\n        entries += self.as_dict[item_name].markdown\n    return entries\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.write_md", "title": "<code>write_md(output_fp=None, TOC=False)</code>", "text": "<p>Write markdown</p> <p>Parameters:</p> Name Type Description Default <code>output_fp</code> <code>str</code> <p>relative path for writing output file. Default None meaning save to ../docs/src/1_Mechanics/ path with same file name</p> <code>None</code> <code>TOC</code> <code>bool</code> <p>Write table of contents. Default False</p> <code>False</code> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>def write_md(self, output_fp: str = None, TOC: bool = False):\n\"\"\"Write markdown\n\n    Args:\n        output_fp (str, optional): relative path for writing output file. Default\n            None meaning save to ../docs/src/1_Mechanics/ path with same file name\n        TOC (bool, optional): Write table of contents. Default False\n    \"\"\"\n    if not output_fp:\n        output_fp = self.filepath_output + self._stem + \".md\"\n    output = (\n        \"&lt;!-- markdownlint-disable MD013 MD024 --&gt;\\n\"\n        + \"&lt;!-- DEVELOPERS: Please edit corresponding yaml --&gt;\\n\"\n    )\n    if TOC:\n        output += self.md_TOC\n    for category, indent, category_set in self.category_hierarchy:\n        output += make_header(category, indent)\n        output += self.make_entries(category_set)\n    with open(output_fp, \"w\", newline=\"\") as f:\n        f.write(output)\n    logger.info(f\"Wrote md: {output_fp}\")\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.csv_fields", "title": "<code>csv_fields()</code>  <code>abstractmethod</code>", "text": "<p>Column names for csv</p> <p>Returns:</p> Name Type Description <code>fields</code> <code>list</code> <p>list of column headers for CSV</p> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>@abstractmethod\ndef csv_fields(self) -&gt; list:\n\"\"\"Column names for csv\n\n    Returns:\n        fields (list): list of column headers for CSV\"\"\"\n    pass\n</code></pre>"}, {"location": "api/automation/templates/yaml_spec/#automation.templates.yaml_spec.YamlSpec.write_csv", "title": "<code>write_csv(output_fp=None, delimiter='\\t')</code>", "text": "<p>Write CSV from YAML, default is tab-delimited</p> <p>Parameters:</p> Name Type Description Default <code>output_fp</code> <code>str</code> <p>relative filepath. Default none, which means local _output subfolder</p> <code>None</code> <code>delimiter</code> <code>str</code> <p>column delimiter. <code></code> for tab or <code>,</code> for comma. If other, must provide extension in ext</p> <code>'\\t'</code> Source code in <code>automation/templates/yaml_spec.py</code> <pre><code>def write_csv(self, output_fp: str = None, delimiter: str = \"\\t\"):\n\"\"\"Write CSV from YAML, default is tab-delimited\n\n    Args:\n        output_fp (str): relative filepath. Default none, which means local\n            _output subfolder\n        delimiter (str): column delimiter. `\\t` for tab or `,` for comma. If other,\n            must provide extension in ext\n    \"\"\"\n    suffix_dict = {\"\\t\": \".tsv\", \",\": \".csv\"}\n    if not output_fp:\n        output_fp = self.filepath_output + self._stem + suffix_dict[delimiter]\n    rows = []\n    with open(output_fp, \"w\", newline=\"\") as f_output:\n        csv_output = csv.DictWriter(\n            f_output,\n            fieldnames=self.csv_fields,\n            delimiter=delimiter,\n        )\n        csv_output.writeheader()\n        for i in self.as_dict.values():\n            rows.append(i.csv_dict)\n        csv_output.writerows(rows)\n    logger.info(f\"Wrote csv: {output_fp}\")\n</code></pre>"}, {"location": "api/automation/utils/dataclass_utils/", "title": "Dataclass utils", "text": ""}, {"location": "api/automation/utils/dataclass_utils/#automation.utils.dataclass_utils.my_repr", "title": "<code>my_repr(self, separator='\\n', indent=0)</code>", "text": "<p>Print formatting for custom dataclasses</p> Source code in <code>automation/utils/dataclass_utils.py</code> <pre><code>def my_repr(self, separator: str = \"\\n\", indent: int = 0):\n\"\"\"Print formatting for custom dataclasses\"\"\"\n    no_default_f_vals = (\n        (f.name, attrgetter(f.name)(self))\n        for f in fields(self)  # for each data field\n        # Only print if it is not the default, and it is marked for inclusion in repr\n        if attrgetter(f.name)(self) != f.default and f.repr\n    )\n    tabs = \"\\t\" * indent\n    # Separate fields with \\n newlines\n    no_default_f_repr = f\"{separator}{tabs}\".join(\n        f\"{name}={value}\" for name, value in no_default_f_vals\n    )\n    return f\"{self.__class__.__name__}{separator}{tabs}({no_default_f_repr})\"\n</code></pre>"}, {"location": "api/automation/utils/dict_manip/", "title": "Dict manip", "text": ""}, {"location": "api/automation/utils/dict_manip/#automation.utils.dict_manip.load_yaml", "title": "<code>load_yaml(input_yaml)</code>", "text": "<p>Load the yaml file</p> Source code in <code>automation/utils/dict_manip.py</code> <pre><code>def load_yaml(input_yaml: str):\n\"\"\"Load the yaml file\"\"\"\n    with open(input_yaml, encoding=\"utf8\") as f:\n        data = yaml.safe_load(f)\n    return data\n</code></pre>"}, {"location": "api/automation/utils/dict_manip/#automation.utils.dict_manip.sort_dict", "title": "<code>sort_dict(my_dict, my_list)</code>", "text": "<p>Sort dict by list of keys. Return OrderedDict</p> Source code in <code>automation/utils/dict_manip.py</code> <pre><code>def sort_dict(my_dict, my_list):\n\"\"\"Sort dict by list of keys. Return OrderedDict\"\"\"\n    index_map = {v: i for i, v in enumerate(my_list)}\n    my_dict_reduced = {k: v for k, v in my_dict.items() if k in my_list}\n    return OrderedDict(\n        sorted(my_dict_reduced.items(), key=lambda pair: index_map[pair[0]])\n    )\n</code></pre>"}, {"location": "api/automation/utils/dict_manip/#automation.utils.dict_manip.flatten_embedded", "title": "<code>flatten_embedded(input_dict)</code>", "text": "<p>Check vals in input. If dict, make embedded values new keys in output dict</p> <p>Novel keys in output dict are {'key_embedded-key': 'embedded_value'}</p> <p>Parameters:</p> Name Type Description Default <code>input_dict</code> <code>dict</code> <p>any dict</p> required <p>Returns:</p> Type Description <code>dict</code> <p>output_dict (dict)</p> Source code in <code>automation/utils/dict_manip.py</code> <pre><code>def flatten_embedded(input_dict) -&gt; dict:\n\"\"\"Check vals in input. If dict, make embedded values new keys in output dict\n\n    Novel keys in output dict are {'key_embedded-key': 'embedded_value'}\n\n    Args:\n        input_dict (dict): any dict\n\n    Returns:\n        output_dict (dict)\n    \"\"\"\n    output = {}\n    for k, v in input_dict.items():\n        if isinstance(v, dict):\n            output.update(\n                {\n                    f\"{k}_{embed_k}\": list_to_or(embed_v)\n                    for embed_k, embed_v in v.items()\n                    if embed_v\n                }\n            )\n        else:\n            output.update({k: v})\n    return output\n</code></pre>"}, {"location": "api/automation/utils/dict_manip/#automation.utils.dict_manip.filter_dict_by_key", "title": "<code>filter_dict_by_key(dict_content, key_filter='Type', key_options=None)</code>", "text": "<p>Filter an embedded dict by if values of key_filter in listed key_options</p> Example <p>my_dict = {\"a\": {\"b\": 1}, \"c\": {\"b\": 2}, \"d\": {\"b\": 3}} filter_dict_by_key(dict_content=my_dict,key_filter=\"b\",key_options=[1,2])</p> <p>{'a': {'b': 1}, 'c': {'b': 2}}</p> <p>Parameters:</p> Name Type Description Default <code>dict_content</code> <code>dict</code> <p>Input dict</p> required <code>key_filter</code> <code>str</code> <p>Optional specification of key. Default \"Type\"</p> <code>'Type'</code> <code>key_options</code> <code>set</code> <p>Set of items that, when retyped to list must match value[list_filter].</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>filtered dict</p> Source code in <code>automation/utils/dict_manip.py</code> <pre><code>def filter_dict_by_key(\n    dict_content: dict,\n    key_filter: str = \"Type\",\n    key_options: set = None,\n) -&gt; dict:\n\"\"\"Filter an embedded dict by if values of key_filter in listed key_options\n\n    Example:\n        my_dict = {\"a\": {\"b\": 1}, \"c\": {\"b\": 2}, \"d\": {\"b\": 3}}\n        filter_dict_by_key(dict_content=my_dict,key_filter=\"b\",key_options=[1,2])\n        &gt;&gt; {'a': {'b': 1}, 'c': {'b': 2}}\n\n    Args:\n        dict_content (dict): Input dict\n        key_filter (str): Optional specification of key. Default \"Type\"\n        key_options (set): Set of items that, when retyped to list must match\n            value[list_filter].\n\n    Returns:\n        dict: filtered dict\n    \"\"\"\n    if not key_options:\n        return dict_content\n    return {\n        key: value\n        for (key, value) in dict_content.items()\n        if value[key_filter] in list(key_options)\n    }\n</code></pre>"}, {"location": "api/automation/utils/list_manip/", "title": "List manip", "text": ""}, {"location": "api/automation/utils/list_manip/#automation.utils.list_manip.ensure_list", "title": "<code>ensure_list(ambiguous_item)</code>", "text": "<p>If input is not a list, return list of input</p> Source code in <code>automation/utils/list_manip.py</code> <pre><code>def ensure_list(ambiguous_item):\n\"\"\"If input is not a list, return list of input\"\"\"\n    return ambiguous_item if isinstance(ambiguous_item, list) else [ambiguous_item]\n</code></pre>"}, {"location": "api/automation/utils/list_manip/#automation.utils.list_manip.flatten_list", "title": "<code>flatten_list(my_list)</code>", "text": "<p>For a list containing embedded lists, generate 1d list with no 'None' vals</p> Source code in <code>automation/utils/list_manip.py</code> <pre><code>def flatten_list(my_list) -&gt; Generator:\n\"\"\"For a list containing embedded lists, generate 1d list with no 'None' vals\"\"\"\n    for item in my_list:\n        if not item:\n            continue\n        if isinstance(item, Iterable) and not isinstance(item, str):\n            for x in flatten_list(item):\n                yield x\n        else:\n            yield item\n</code></pre>"}, {"location": "api/automation/utils/list_manip/#automation.utils.list_manip.list_to_or", "title": "<code>list_to_or(entry)</code>", "text": "<p>Given string or list, return items as string joined OR</p> Source code in <code>automation/utils/list_manip.py</code> <pre><code>def list_to_or(entry):\n\"\"\"Given string or list, return items as string joined OR\"\"\"\n    entry = [entry] if not isinstance(entry, list) else entry\n    entry = [str(i) for i in entry]\n    return \" or \".join(entry)\n</code></pre>"}, {"location": "api/automation/utils/logger/", "title": "Logger", "text": "<p>This logger is adapted from the DataJoint Python API logger     in the following format: <code>[Hour:Min][log_level]: Content</code></p>"}, {"location": "api/automation/utils/logger_csv/", "title": "Logger csv", "text": "<p>Provides 2 loggers that send output to CSVs with configs set here.     draw_log - saves info relevant to draws     rest_log - saves info before and after rests</p>"}, {"location": "api/automation/utils/md_utils/", "title": "Md utils", "text": ""}, {"location": "api/automation/utils/md_utils/#automation.utils.md_utils.make_bullet", "title": "<code>make_bullet(value, indents=0)</code>", "text": "<p>Return string with 4 spaces per indent, plus <code>-</code></p> Source code in <code>automation/utils/md_utils.py</code> <pre><code>def make_bullet(value, indents=0):\n\"\"\"Return string with 4 spaces per indent, plus `- `\"\"\"\n    spaces = indents * \"    \"\n    return f\"{spaces}- {value}\\n\"\n</code></pre>"}, {"location": "api/automation/utils/md_utils/#automation.utils.md_utils.make_link", "title": "<code>make_link(value, indents=0)</code>", "text": "<p>Make relative within-doc bulleted link for TOC. name</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>heading name</p> required <code>indents</code> <code>int</code> <p>indent level for heading</p> <code>0</code> <p>Returns:</p> Name Type Description <code>link</code> <code>str</code> <p>markdown formatted indented bullet with relative path for table of contents. E.g., <code>- [Heading name](#heading-name)</code></p> Source code in <code>automation/utils/md_utils.py</code> <pre><code>def make_link(value: str, indents: int = 0) -&gt; str:\n\"\"\"Make relative within-doc bulleted link for TOC. [name](#no-spaces)\n\n    Args:\n        value (str): heading name\n        indents (int): indent level for heading\n\n    Returns:\n        link (str): markdown formatted indented bullet with relative path for\n            table of contents. E.g., `    - [Heading name](#heading-name)`\n    \"\"\"\n    no_spaces = value.lower().replace(\" \", \"-\")\n    link = f\"[{value}](#{no_spaces})\"\n    return make_bullet(link, indents)\n</code></pre>"}, {"location": "api/automation/utils/md_utils/#automation.utils.md_utils.make_header", "title": "<code>make_header(value, level=0)</code>", "text": "<p>Return string with level+1 * <code>#</code></p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>heading content</p> required <code>level</code> <code>int</code> <p>heading level. e.g., <code># Zero</code>, <code>## One</code></p> <code>0</code> Source code in <code>automation/utils/md_utils.py</code> <pre><code>def make_header(value: str, level: (int) = 0):\n\"\"\"Return string with level+1 * `#`\n\n    Args:\n        value (str): heading content\n        level (int): heading level. e.g., `# Zero`, `## One`\n    \"\"\"\n    prefix = level * \"#\"\n    return f\"\\n#{prefix} {value}\\n\"\n</code></pre>"}]}